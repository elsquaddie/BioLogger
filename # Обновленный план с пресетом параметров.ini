# Обновленный план с пресетом параметров

## Обновление CLAUDE.md

Добавьте в раздел "Current Priority Tasks":

```markdown
## ПРИОРИТЕТ: Календарь + Пресет параметров + Экран данных

**ПРЕСЕТ ПАРАМЕТРОВ (создается автоматически при первом запуске):**

Дефолтные параметры с иконками из values.html:
1. Сон (Number, часы) → Icons.bedtime  
2. БАДы (Text) → Icons.medication  
3. Оценка качества работы (Rating 1-10) → Icons.work
4. Тренировка (Number, минуты) → Icons.fitness_center
5. Количество шагов (Number) → Icons.directions_walk
6. Оценка социальности (Rating 1-10) → Icons.people
7. Оценка настроения (Rating 1-10) → Icons.sentiment_satisfied
8. Оценка своей привлекательности (Rating 1-10) → Icons.favorite
9. Оценка самореализации (Rating 1-10) → Icons.star
10. Оценка качества питания (Rating 1-10) → Icons.restaurant
11. Оценка текущих финансов (Rating 1-10) → Icons.attach_money
12. Оценка социальной полезности (Rating 1-10) → Icons.public
13. Оценка прошедшего дня (Rating 1-10) → Icons.thumb_up
14. Почему такая оценка (Text) → Icons.edit_note
15. Воспоминания обо дне (Text) → Icons.book

**СТРУКТУРА БД:**
- Поле `is_preset: boolean` для пометки дефолтных
- Поле `is_enabled: boolean` для включения/отключения
- Поле `sort_order: int` для пользовательского порядка
- Дефолтные параметры нельзя удалить, только отключить

**ПОЛЬЗОВАТЕЛЬСКИЕ ПАРАМЕТРЫ:**
- Иконка по умолчанию: Icons.analytics
- Добавляются после дефолтных в списке
- Можно удалять и редактировать

**КАЛЕНДАРЬ + ЭКРАН ДАННЫХ:** (требования из предыдущего плана)
```

## Этап 0: Обновление модели Parameter

### Команда для Claude Code:

```
Обнови модель Parameter для поддержки пресета:

1. **Расширь модель Parameter:**
   ```dart
   class Parameter {
     int? id;
     String name;
     String dataType; // Number, Text, Rating, YesNo (убрать Date, Time)
     String? unit;
     bool isPreset;     // NEW: дефолтный параметр или нет
     bool isEnabled;    // NEW: включен ли параметр
     int sortOrder;     // NEW: порядок отображения
     String? iconName;  // NEW: название иконки для дефолтных
     DateTime createdAt;
   }
   ```

2. **Обнови database schema:**
   - Добавь колонки: is_preset, is_enabled, sort_order, icon_name
   - Создай миграцию для обновления существующей БД

3. **Обнови DAO и Repository:**
   - Методы для получения только enabled параметров
   - Сортировка по is_preset DESC, sort_order ASC
   - Методы для toggle enabled/disabled

Обнови модель и БД схему
Протестируй миграцию на существующих данных
```

## Этап 1: Создание пресет-сервиса

### Команда для Claude Code:

```
Создай сервис для инициализации пресета параметров:

1. **Создай файл `lib/domain/services/preset_parameters_service.dart`:**
   ```dart
   class PresetParametersService {
     static List<Parameter> getDefaultParameters() {
       return [
         Parameter(name: 'Сон', dataType: 'Number', unit: 'часы', 
                  isPreset: true, iconName: 'bedtime', sortOrder: 1),
         Parameter(name: 'БАДы', dataType: 'Text', 
                  isPreset: true, iconName: 'medication', sortOrder: 2),
         // ... остальные 13 параметров
       ];
     }
     
     Future<void> initializePresetIfNeeded();
   }
   ```

2. **Список всех 15 дефолтных параметров:**
   - Сон (Number, часы, bedtime)
   - БАДы (Text, -, medication)  
   - Оценка качества работы (Rating, 1-10, work)
   - Тренировка (Number, минуты, fitness_center)
   - Количество шагов (Number, -, directions_walk)
   - Оценка социальности (Rating, 1-10, people)
   - Оценка настроения (Rating, 1-10, sentiment_satisfied)
   - Оценка своей привлекательности (Rating, 1-10, favorite)
   - Оценка самореализации (Rating, 1-10, star)
   - Оценка качества питания (Rating, 1-10, restaurant)
   - Оценка текущих финансов (Rating, 1-10, attach_money)
   - Оценка социальной полезности (Rating, 1-10, public)
   - Оценка прошедшего дня (Rating, 1-10, thumb_up)
   - Почему такая оценка (Text, -, edit_note)
   - Воспоминания обо дне (Text, -, book)

3. **Вызов при запуске приложения:**
   - Добавь в main.dart или в контроллер инициализации
   - Проверка: если нет дефолтных параметров → создать

Создай сервис пресета
Протестируй создание дефолтных параметров
Если потребуется - можешь удалить старую БД 
```

## Этап 2: Система иконок для параметров

### Команда для Claude Code:

```
Создай систему иконок для параметров:

1. **Создай файл `lib/utils/parameter_icons.dart`:**
   ```dart
   class ParameterIcons {
     static Map<String, IconData> presetIcons = {
       'bedtime': Icons.bedtime,
       'medication': Icons.medication,
       'work': Icons.work,
       'fitness_center': Icons.fitness_center,
       'directions_walk': Icons.directions_walk,
       'people': Icons.people,
       'sentiment_satisfied': Icons.sentiment_satisfied,
       'favorite': Icons.favorite,
       'star': Icons.star,
       'restaurant': Icons.restaurant,
       'attach_money': Icons.attach_money,
       'public': Icons.public,
       'thumb_up': Icons.thumb_up,
       'edit_note': Icons.edit_note,
       'book': Icons.book,
     };
     
     static IconData getIcon(Parameter parameter) {
       if (parameter.isPreset && parameter.iconName != null) {
         return presetIcons[parameter.iconName!] ?? Icons.analytics;
       }
       return Icons.analytics; // дефолтная иконка для пользовательских
     }
   }
   ```

2. **Интеграция с UI:**
   - Используй в карточках экрана данных
   - Отображение в списке параметров
   - Цвета и стили как в values.html

Создай систему иконок
Протестируй отображение разных параметров
```

## Этап 3: Обновление экрана управления параметрами

### Команда для Claude Code:

```
Обнови экран управления параметрами с поддержкой пресета:

1. **Список параметров с новой структурой:**
   - Сначала дефолтные (с возможностью включить/отключить)
   - Потом пользовательские (с возможностью редактировать/удалить)
   - Визуальное разделение между группами

2. **UI для дефолтных параметров:**
   ```dart
   ListTile(
     leading: Icon(ParameterIcons.getIcon(parameter)),
     title: Text(parameter.name),
     subtitle: Text('${parameter.dataType} • Встроенный'),
     trailing: Switch(
       value: parameter.isEnabled,
       onChanged: (value) => toggleParameter(parameter.id, value)
     )
   )
   ```

3. **UI для пользовательских параметров:**
   - Кнопки редактировать/удалить
   - Иконка по умолчанию (Icons.analytics)

4. **Drag & Drop для изменения порядка:**
   - ReorderableListView для пользовательских параметров
   - Сохранение нового порядка в sort_order

Обнови экран управления параметрами
Протестируй включение/отключение и reorder
```

## Этап 4: Исправление календаря (из предыдущего плана)

### Команда для Claude Code:

```
Исправь календарный интерфейс согласно требованиям:

1. **Визуальные состояния дней:**
   - Заполненные дни: цифра ВНУТРИ зеленого кружка с заливкой (убери точки)
   - Незаполненные доступные: просто цифра без индикации
   - Выбранная незаполненная: серый кружок вокруг цифры
   - Выбранная заполненная: зеленый кружок + дополнительная обводка (2px solid)
   - Будущие дни: серый цвет, недоступны

2. **Кнопка внизу календаря:**
   - "Записать данные" - для незаполненных дней
   - "Посмотреть данные" - для заполненных дней

3. **Заголовок над счетчиками:**
   - Добавь "Серии заполнений:" над блоком с сериями заполнений.

Исправь календарный виджет
Протестируй разные состояния дней
```

## Этап 5: Создание экрана данных с пресетом

### Команда для Claude Code:

```
think hard

Переделай экран записи данных о дне с поддержкой пресета и пользовательских параметров:

1. **Загрузка только enabled параметров:**
   - Фильтрация по is_enabled = true
   - Сортировка: как в меню данные. сейчас работает так, что какая очередь там - такая и в меню заполнения параметров. так и оставить.

2. **Стиль карточек values.html с правильными иконками:**
   ```dart
   Container(
     padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
     height: 72,
     child: Row([
       Container(
         width: 48, height: 48,
         decoration: BoxDecoration(
           color: Color(0xFFF2F3F1),
           borderRadius: BorderRadius.circular(12)
         ),
         child: Icon(ParameterIcons.getIcon(parameter), 
                    color: Color(0xFF141613), size: 24)
       ),
       SizedBox(width: 16),
       Expanded(
         child: Column([
           Text(parameter.name, // стиль из values.html
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500)),
           Text(displayValue, // значение + комментарий (обрезка)
                style: TextStyle(fontSize: 14, color: Color(0xFF757C6E)))
         ])
       )
     ])
   )
   ```

3. **Режимы просмотра/редактирования:**
   - Клик по карточке → увеличенная карточка с полями ввода
   - Автофокус для Number/Text полей
   - Навигация между карточками вертикальным скроллом

Создай экран данных с пресетом
Протестируй отображение параметров с иконками
```

## Этап 6: Логика редактирования и сохранения

### Команда для Claude Code:

```
Реализуй логику редактирования с учетом пресета:

1. **Увеличенные карточки для каждого типа:**
   - Number: NumberInput + автофокус + поле комментария снизу
   - Text: TextFormField + автофокус + поле комментария снизу  
   - Rating: Slider 1-10 + поле комментария снизу
   - YesNo: Switch/Toggle + поле комментария снизу

2. **Навигация между параметрами:**
   - PageView для вертикального скролла
   - Кнопка "Далее" → следующий enabled параметр
   - На последнем: "Сохранить"

3. **Сохранение данных:**
   - Только для enabled параметров
   - Обновление календаря после сохранения
   - Success feedback пользователю

Реализуй полный цикл редактирования
Протестируй с дефолтными и пользовательскими параметрами
```

## Этап 7: Финальная интеграция и тестирование

### Команда для Claude Code:

```
Финальная интеграция всех компонентов:

1. **Инициализация пресета при первом запуске:**
   - Вызов PresetParametersService в main.dart
   - Проверка что дефолтные параметры создались

2. **Полный workflow тестирование:**
   - Первый запуск → пресет создался
   - Отключение параметров → они исчезли из списка заполнения
   - Календарь → выбор даты → заполнение → сохранение
   - Проверка иконок дефолтных vs пользовательских

3. **Edge cases:**
   - Если все параметры отключены
   - Миграция существующих пользовательских параметров
   - Обработка ошибок при создании пресета

4. **UI polish:**
   - Анимации, loading states
   - Proper spacing и colors
   - Responsive design

Протестируй полный цикл с пресетом
Исправь найденные баги
```

## Команды для нового Claude Code чата

```bash
# Обязательный анализ в новом чате
claude
/init

# Затем первая команда анализа:
Изучи текущую структуру приложения BioLogger перед добавлением пресета параметров:

1. Найди модель Parameter и её поля
2. Изучи database schema и DAO  
3. Найди экран управления параметрами
4. Изучи экран ввода данных
5. Найди где создаются новые параметры

Создай план обновления для поддержки пресета из 15 дефолтных параметров с иконками.

НЕ ПИШИ КОД - только анализ!
```

## Финальные коммиты

```bash
git add .
git commit -m "feat: пресет из 15 дефолтных параметров с иконками

- Обновлена модель Parameter с полями is_preset, is_enabled, sort_order
- Создан PresetParametersService с 15 дефолтными параметрами  
- Система иконок для дефолтных и пользовательских параметров
- Обновлен экран управления с поддержкой включения/отключения
- Новый экран данных в стиле values.html с правильными иконками"

git push origin main
```

## Ожидаемый результат

✅ **15 дефолтных параметров** создаются автоматически при первом запуске  
✅ **Система иконок** - дефолтные как в values.html, пользовательские нейтральные  
✅ **Включение/отключение** дефолтных параметров без удаления  
✅ **Правильный порядок** - дефолтные сначала, потом пользовательские  
✅ **Экран данных** в стиле values.html с правильными иконками  
✅ **Календарь с исправлениями** - кружки, кнопки, заголовки  

**Время выполнения:** 5-6 часов с учетом пресета

Готовы начать новый чат с анализом? 🚀