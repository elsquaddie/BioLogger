This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.claude/
  settings.json
  settings.local.json
lib/
  data/
    local_database/
      daily_record_dao.dart
      parameter_dao.dart
    repositories/
      daily_record_repository_impl.dart
      daily_record_repository.dart
      parameter_repository_impl.dart
      parameter_repository.dart
    database_helper.dart
  domain/
    controllers/
      daily_record_controller.dart
      data_entry_controller.dart
      home_controller.dart
      parameter_controller.dart
    services/
      preset_parameters_service.dart
    use_cases/
      calculate_streak_use_case.dart
      create_daily_record_use_case.dart
      create_parameter_use_case.dart
      delete_daily_record_use_case.dart
      delete_parameter_use_case.dart
      export_data_use_case.dart
      get_all_daily_records_use_case.dart
      get_all_parameters_use_case.dart
      get_daily_record_by_date_use_case.dart
      get_daily_record_use_case.dart
      get_parameter_use_case.dart
      update_daily_record_use_case.dart
      update_parameter_use_case.dart
  models/
    daily_record.dart
    parameter.dart
  presentation/
    animations/
      page_transitions.dart
    screens/
      data_entry_screen.dart
      home_screen.dart
      main_navigation_screen.dart
      metrics_screen.dart
      parameter_create_screen.dart
      parameter_edit_screen.dart
      parameter_list_screen.dart
      settings_screen.dart
    theme/
      app_theme.dart
    widgets/
      calendar_widget.dart
  utils/
    csv_exporter.dart
    parameter_icons.dart
  main.dart
.gitignore
.metadata
# Обновленный план с пресетом параметров.ini
analysis_options.yaml
app.html
CLAUDE.md
LICENSE
pubspec.lock
pubspec.yaml
README.md
test_integration_manual.md
test.html
values.html
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".claude/settings.local.json">
{
  "permissions": {
    "allow": [
      "Bash(flutter:*)",
      "Bash(git add:*)",
      "Bash(rm:*)",
      "Bash(r)",
      "Bash(adb shell run-as:*)"
    ],
    "deny": []
  }
}
</file>

<file path="# Обновленный план с пресетом параметров.ini">
# Обновленный план с пресетом параметров

## Обновление CLAUDE.md

Добавьте в раздел "Current Priority Tasks":

```markdown
## ПРИОРИТЕТ: Календарь + Пресет параметров + Экран данных

**ПРЕСЕТ ПАРАМЕТРОВ (создается автоматически при первом запуске):**

Дефолтные параметры с иконками из values.html:
1. Сон (Number, часы) → Icons.bedtime  
2. БАДы (Text) → Icons.medication  
3. Оценка качества работы (Rating 1-10) → Icons.work
4. Тренировка (Number, минуты) → Icons.fitness_center
5. Количество шагов (Number) → Icons.directions_walk
6. Оценка социальности (Rating 1-10) → Icons.people
7. Оценка настроения (Rating 1-10) → Icons.sentiment_satisfied
8. Оценка своей привлекательности (Rating 1-10) → Icons.favorite
9. Оценка самореализации (Rating 1-10) → Icons.star
10. Оценка качества питания (Rating 1-10) → Icons.restaurant
11. Оценка текущих финансов (Rating 1-10) → Icons.attach_money
12. Оценка социальной полезности (Rating 1-10) → Icons.public
13. Оценка прошедшего дня (Rating 1-10) → Icons.thumb_up
14. Почему такая оценка (Text) → Icons.edit_note
15. Воспоминания обо дне (Text) → Icons.book

**СТРУКТУРА БД:**
- Поле `is_preset: boolean` для пометки дефолтных
- Поле `is_enabled: boolean` для включения/отключения
- Поле `sort_order: int` для пользовательского порядка
- Дефолтные параметры нельзя удалить, только отключить

**ПОЛЬЗОВАТЕЛЬСКИЕ ПАРАМЕТРЫ:**
- Иконка по умолчанию: Icons.analytics
- Добавляются после дефолтных в списке
- Можно удалять и редактировать

**КАЛЕНДАРЬ + ЭКРАН ДАННЫХ:** (требования из предыдущего плана)
```

## Этап 0: Обновление модели Parameter

### Команда для Claude Code:

```
Обнови модель Parameter для поддержки пресета:

1. **Расширь модель Parameter:**
   ```dart
   class Parameter {
     int? id;
     String name;
     String dataType; // Number, Text, Rating, YesNo (убрать Date, Time)
     String? unit;
     bool isPreset;     // NEW: дефолтный параметр или нет
     bool isEnabled;    // NEW: включен ли параметр
     int sortOrder;     // NEW: порядок отображения
     String? iconName;  // NEW: название иконки для дефолтных
     DateTime createdAt;
   }
   ```

2. **Обнови database schema:**
   - Добавь колонки: is_preset, is_enabled, sort_order, icon_name
   - Создай миграцию для обновления существующей БД

3. **Обнови DAO и Repository:**
   - Методы для получения только enabled параметров
   - Сортировка по is_preset DESC, sort_order ASC
   - Методы для toggle enabled/disabled

Обнови модель и БД схему
Протестируй миграцию на существующих данных
```

## Этап 1: Создание пресет-сервиса

### Команда для Claude Code:

```
Создай сервис для инициализации пресета параметров:

1. **Создай файл `lib/domain/services/preset_parameters_service.dart`:**
   ```dart
   class PresetParametersService {
     static List<Parameter> getDefaultParameters() {
       return [
         Parameter(name: 'Сон', dataType: 'Number', unit: 'часы', 
                  isPreset: true, iconName: 'bedtime', sortOrder: 1),
         Parameter(name: 'БАДы', dataType: 'Text', 
                  isPreset: true, iconName: 'medication', sortOrder: 2),
         // ... остальные 13 параметров
       ];
     }
     
     Future<void> initializePresetIfNeeded();
   }
   ```

2. **Список всех 15 дефолтных параметров:**
   - Сон (Number, часы, bedtime)
   - БАДы (Text, -, medication)  
   - Оценка качества работы (Rating, 1-10, work)
   - Тренировка (Number, минуты, fitness_center)
   - Количество шагов (Number, -, directions_walk)
   - Оценка социальности (Rating, 1-10, people)
   - Оценка настроения (Rating, 1-10, sentiment_satisfied)
   - Оценка своей привлекательности (Rating, 1-10, favorite)
   - Оценка самореализации (Rating, 1-10, star)
   - Оценка качества питания (Rating, 1-10, restaurant)
   - Оценка текущих финансов (Rating, 1-10, attach_money)
   - Оценка социальной полезности (Rating, 1-10, public)
   - Оценка прошедшего дня (Rating, 1-10, thumb_up)
   - Почему такая оценка (Text, -, edit_note)
   - Воспоминания обо дне (Text, -, book)

3. **Вызов при запуске приложения:**
   - Добавь в main.dart или в контроллер инициализации
   - Проверка: если нет дефолтных параметров → создать

Создай сервис пресета
Протестируй создание дефолтных параметров
Если потребуется - можешь удалить старую БД 
```

## Этап 2: Система иконок для параметров

### Команда для Claude Code:

```
Создай систему иконок для параметров:

1. **Создай файл `lib/utils/parameter_icons.dart`:**
   ```dart
   class ParameterIcons {
     static Map<String, IconData> presetIcons = {
       'bedtime': Icons.bedtime,
       'medication': Icons.medication,
       'work': Icons.work,
       'fitness_center': Icons.fitness_center,
       'directions_walk': Icons.directions_walk,
       'people': Icons.people,
       'sentiment_satisfied': Icons.sentiment_satisfied,
       'favorite': Icons.favorite,
       'star': Icons.star,
       'restaurant': Icons.restaurant,
       'attach_money': Icons.attach_money,
       'public': Icons.public,
       'thumb_up': Icons.thumb_up,
       'edit_note': Icons.edit_note,
       'book': Icons.book,
     };
     
     static IconData getIcon(Parameter parameter) {
       if (parameter.isPreset && parameter.iconName != null) {
         return presetIcons[parameter.iconName!] ?? Icons.analytics;
       }
       return Icons.analytics; // дефолтная иконка для пользовательских
     }
   }
   ```

2. **Интеграция с UI:**
   - Используй в карточках экрана данных
   - Отображение в списке параметров
   - Цвета и стили как в values.html

Создай систему иконок
Протестируй отображение разных параметров
```

## Этап 3: Обновление экрана управления параметрами

### Команда для Claude Code:

```
Обнови экран управления параметрами с поддержкой пресета:

1. **Список параметров с новой структурой:**
   - Сначала дефолтные (с возможностью включить/отключить)
   - Потом пользовательские (с возможностью редактировать/удалить)
   - Визуальное разделение между группами

2. **UI для дефолтных параметров:**
   ```dart
   ListTile(
     leading: Icon(ParameterIcons.getIcon(parameter)),
     title: Text(parameter.name),
     subtitle: Text('${parameter.dataType} • Встроенный'),
     trailing: Switch(
       value: parameter.isEnabled,
       onChanged: (value) => toggleParameter(parameter.id, value)
     )
   )
   ```

3. **UI для пользовательских параметров:**
   - Кнопки редактировать/удалить
   - Иконка по умолчанию (Icons.analytics)

4. **Drag & Drop для изменения порядка:**
   - ReorderableListView для пользовательских параметров
   - Сохранение нового порядка в sort_order

Обнови экран управления параметрами
Протестируй включение/отключение и reorder
```

## Этап 4: Исправление календаря (из предыдущего плана)

### Команда для Claude Code:

```
Исправь календарный интерфейс согласно требованиям:

1. **Визуальные состояния дней:**
   - Заполненные дни: цифра ВНУТРИ зеленого кружка с заливкой (убери точки)
   - Незаполненные доступные: просто цифра без индикации
   - Выбранная незаполненная: серый кружок вокруг цифры
   - Выбранная заполненная: зеленый кружок + дополнительная обводка (2px solid)
   - Будущие дни: серый цвет, недоступны

2. **Кнопка внизу календаря:**
   - "Записать данные" - для незаполненных дней
   - "Посмотреть данные" - для заполненных дней

3. **Заголовок над счетчиками:**
   - Добавь "Серии заполнений:" над блоком с сериями заполнений.

Исправь календарный виджет
Протестируй разные состояния дней
```

## Этап 5: Создание экрана данных с пресетом

### Команда для Claude Code:

```
think hard

Переделай экран записи данных о дне с поддержкой пресета и пользовательских параметров:

1. **Загрузка только enabled параметров:**
   - Фильтрация по is_enabled = true
   - Сортировка: как в меню данные. сейчас работает так, что какая очередь там - такая и в меню заполнения параметров. так и оставить.

2. **Стиль карточек values.html с правильными иконками:**
   ```dart
   Container(
     padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
     height: 72,
     child: Row([
       Container(
         width: 48, height: 48,
         decoration: BoxDecoration(
           color: Color(0xFFF2F3F1),
           borderRadius: BorderRadius.circular(12)
         ),
         child: Icon(ParameterIcons.getIcon(parameter), 
                    color: Color(0xFF141613), size: 24)
       ),
       SizedBox(width: 16),
       Expanded(
         child: Column([
           Text(parameter.name, // стиль из values.html
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500)),
           Text(displayValue, // значение + комментарий (обрезка)
                style: TextStyle(fontSize: 14, color: Color(0xFF757C6E)))
         ])
       )
     ])
   )
   ```

3. **Режимы просмотра/редактирования:**
   - Клик по карточке → увеличенная карточка с полями ввода
   - Автофокус для Number/Text полей
   - Навигация между карточками вертикальным скроллом

Создай экран данных с пресетом
Протестируй отображение параметров с иконками
```

## Этап 6: Логика редактирования и сохранения

### Команда для Claude Code:

```
Реализуй логику редактирования с учетом пресета:

1. **Увеличенные карточки для каждого типа:**
   - Number: NumberInput + автофокус + поле комментария снизу
   - Text: TextFormField + автофокус + поле комментария снизу  
   - Rating: Slider 1-10 + поле комментария снизу
   - YesNo: Switch/Toggle + поле комментария снизу

2. **Навигация между параметрами:**
   - PageView для вертикального скролла
   - Кнопка "Далее" → следующий enabled параметр
   - На последнем: "Сохранить"

3. **Сохранение данных:**
   - Только для enabled параметров
   - Обновление календаря после сохранения
   - Success feedback пользователю

Реализуй полный цикл редактирования
Протестируй с дефолтными и пользовательскими параметрами
```

## Этап 7: Финальная интеграция и тестирование

### Команда для Claude Code:

```
Финальная интеграция всех компонентов:

1. **Инициализация пресета при первом запуске:**
   - Вызов PresetParametersService в main.dart
   - Проверка что дефолтные параметры создались

2. **Полный workflow тестирование:**
   - Первый запуск → пресет создался
   - Отключение параметров → они исчезли из списка заполнения
   - Календарь → выбор даты → заполнение → сохранение
   - Проверка иконок дефолтных vs пользовательских

3. **Edge cases:**
   - Если все параметры отключены
   - Миграция существующих пользовательских параметров
   - Обработка ошибок при создании пресета

4. **UI polish:**
   - Анимации, loading states
   - Proper spacing и colors
   - Responsive design

Протестируй полный цикл с пресетом
Исправь найденные баги
```

## Команды для нового Claude Code чата

```bash
# Обязательный анализ в новом чате
claude
/init

# Затем первая команда анализа:
Изучи текущую структуру приложения BioLogger перед добавлением пресета параметров:

1. Найди модель Parameter и её поля
2. Изучи database schema и DAO  
3. Найди экран управления параметрами
4. Изучи экран ввода данных
5. Найди где создаются новые параметры

Создай план обновления для поддержки пресета из 15 дефолтных параметров с иконками.

НЕ ПИШИ КОД - только анализ!
```

## Финальные коммиты

```bash
git add .
git commit -m "feat: пресет из 15 дефолтных параметров с иконками

- Обновлена модель Parameter с полями is_preset, is_enabled, sort_order
- Создан PresetParametersService с 15 дефолтными параметрами  
- Система иконок для дефолтных и пользовательских параметров
- Обновлен экран управления с поддержкой включения/отключения
- Новый экран данных в стиле values.html с правильными иконками"

git push origin main
```

## Ожидаемый результат

✅ **15 дефолтных параметров** создаются автоматически при первом запуске  
✅ **Система иконок** - дефолтные как в values.html, пользовательские нейтральные  
✅ **Включение/отключение** дефолтных параметров без удаления  
✅ **Правильный порядок** - дефолтные сначала, потом пользовательские  
✅ **Экран данных** в стиле values.html с правильными иконками  
✅ **Календарь с исправлениями** - кружки, кнопки, заголовки  

**Время выполнения:** 5-6 часов с учетом пресета

Готовы начать новый чат с анализом? 🚀
</file>

<file path=".claude/settings.json">
{
  "permissions": {
    "allow": [
      "Edit",
      "Bash(flutter pub get)",
      "Bash(git commit:*)"
    ],
    "deny": []
  }
}
</file>

<file path="lib/data/repositories/daily_record_repository_impl.dart">
import '../local_database/daily_record_dao.dart';
import '../../models/daily_record.dart';
import 'daily_record_repository.dart';

class DailyRecordRepositoryImpl implements DailyRecordRepository {
  final DailyRecordDao _dailyRecordDao = DailyRecordDao(); // Создаем экземпляр DailyRecordDao

  @override
  Future<int> insertDailyRecord(DailyRecord dailyRecord) async {
    return await _dailyRecordDao.insertDailyRecord(dailyRecord); // Делегируем в DAO
  }

  @override
  Future<DailyRecord?> getDailyRecord(int id) async {
    return await _dailyRecordDao.getDailyRecord(id); // Делегируем в DAO
  }

  @override
  Future<DailyRecord?> getDailyRecordByDate(DateTime date) async {
    return await _dailyRecordDao.getDailyRecordByDate(date); // Делегируем в DAO
  }

  @override
  Future<List<DailyRecord>> getAllDailyRecords() async {
    return await _dailyRecordDao.getAllDailyRecords(); // Делегируем в DAO
  }

  @override
  Future<int> updateDailyRecord(DailyRecord dailyRecord) async {
    return await _dailyRecordDao.updateDailyRecord(dailyRecord); // Делегируем в DAO
  }

  @override
  Future<int> deleteDailyRecord(int id) async {
    return await _dailyRecordDao.deleteDailyRecord(id); // Делегируем в DAO
  }
}
</file>

<file path="lib/data/repositories/daily_record_repository.dart">
import '../../models/daily_record.dart';

abstract class DailyRecordRepository {
  Future<int> insertDailyRecord(DailyRecord dailyRecord);
  Future<DailyRecord?> getDailyRecord(int id);
  Future<DailyRecord?> getDailyRecordByDate(DateTime date);
  Future<List<DailyRecord>> getAllDailyRecords();
  Future<int> updateDailyRecord(DailyRecord dailyRecord);
  Future<int> deleteDailyRecord(int id);
}
</file>

<file path="lib/domain/controllers/home_controller.dart">
import 'package:get/get.dart';
import '../use_cases/calculate_streak_use_case.dart';

/// Контроллер для главного экрана с календарной логикой
class HomeController extends GetxController {
  final CalculateStreakUseCase _calculateStreakUseCase;

  HomeController(this._calculateStreakUseCase);

  // Reactive переменные
  var selectedDate = DateTime.now().obs;
  var currentMonth = DateTime.now().obs;
  var filledDates = <DateTime>{}.obs;
  var consecutiveDays = 0.obs;
  var monthlyFilledDays = 0.obs;
  var isLoading = false.obs;

  @override
  void onInit() {
    super.onInit();
    _initializeData();
  }

  /// Инициализация данных при запуске контроллера
  Future<void> _initializeData() async {
    final today = DateTime.now();
    final normalizedToday = DateTime(today.year, today.month, today.day);
    
    selectedDate.value = normalizedToday;
    currentMonth.value = DateTime(today.year, today.month, 1);
    
    await loadFilledDays();
    await updateCounters();
  }

  /// Загрузка всех заполненных дат из базы данных
  Future<void> loadFilledDays() async {
    try {
      isLoading.value = true;
      
      final dates = await _calculateStreakUseCase.getFilledDates();
      filledDates.value = dates.toSet();
      
      // Также загружаем данные для текущего месяца для оптимизации
      await _loadFilledDatesForCurrentMonth();
      
    } catch (e) {
      print('Ошибка загрузки заполненных дат: $e');
    } finally {
      isLoading.value = false;
    }
  }

  /// Загрузка заполненных дат только для текущего отображаемого месяца
  Future<void> _loadFilledDatesForCurrentMonth() async {
    try {
      final monthDates = await _calculateStreakUseCase
          .getFilledDatesInMonth(currentMonth.value);
      
      // Обновляем основной set, добавляя данные текущего месяца
      final updatedDates = Set<DateTime>.from(filledDates.value);
      updatedDates.addAll(monthDates);
      filledDates.value = updatedDates;
      
    } catch (e) {
      print('Ошибка загрузки дат для месяца: $e');
    }
  }

  /// Обновление счетчиков (дни подряд и дни в месяце)
  Future<void> updateCounters() async {
    try {
      isLoading.value = true;

      // Подсчет текущей серии дней подряд
      final consecutive = await _calculateStreakUseCase.getConsecutiveDays();
      consecutiveDays.value = consecutive;

      // Подсчет заполненных дней в текущем месяце
      final monthlyFilled = await _calculateStreakUseCase
          .getFilledDaysInMonth(currentMonth.value);
      monthlyFilledDays.value = monthlyFilled;

    } catch (e) {
      print('Ошибка обновления счетчиков: $e');
      // Устанавливаем значения по умолчанию в случае ошибки
      consecutiveDays.value = 0;
      monthlyFilledDays.value = 0;
    } finally {
      isLoading.value = false;
    }
  }

  /// Выбор даты пользователем
  void selectDate(DateTime date) {
    final normalizedDate = DateTime(date.year, date.month, date.day);
    selectedDate.value = normalizedDate;

    // Если выбрана дата из другого месяца, переключаем месяц
    final selectedMonth = DateTime(date.year, date.month, 1);
    if (selectedMonth != currentMonth.value) {
      changeMonth(selectedMonth);
    }
  }

  /// Изменение отображаемого месяца
  void changeMonth(DateTime month) async {
    final normalizedMonth = DateTime(month.year, month.month, 1);
    currentMonth.value = normalizedMonth;

    // Перезагружаем данные для нового месяца
    await _loadFilledDatesForCurrentMonth();
    await updateCounters();
  }

  /// Переход к предыдущему месяцу
  void previousMonth() {
    final prevMonth = DateTime(
      currentMonth.value.year,
      currentMonth.value.month - 1,
      1,
    );
    changeMonth(prevMonth);
  }

  /// Переход к следующему месяцу
  void nextMonth() {
    final nextMonth = DateTime(
      currentMonth.value.year,
      currentMonth.value.month + 1,
      1,
    );
    changeMonth(nextMonth);
  }

  /// Проверка, заполнен ли конкретный день
  bool isDateFilled(DateTime date) {
    final normalizedDate = DateTime(date.year, date.month, date.day);
    return filledDates.contains(normalizedDate);
  }

  /// Проверка, является ли выбранный день заполненным
  bool get isSelectedDateFilled {
    return isDateFilled(selectedDate.value);
  }

  /// Проверка, является ли выбранный день сегодняшним
  bool get isSelectedDateToday {
    final today = DateTime.now();
    final normalizedToday = DateTime(today.year, today.month, today.day);
    final normalizedSelected = DateTime(
      selectedDate.value.year,
      selectedDate.value.month,
      selectedDate.value.day,
    );
    return normalizedSelected == normalizedToday;
  }

  /// Проверка, является ли выбранный день будущим
  bool get isSelectedDateInFuture {
    final today = DateTime.now();
    final normalizedToday = DateTime(today.year, today.month, today.day);
    final normalizedSelected = DateTime(
      selectedDate.value.year,
      selectedDate.value.month,
      selectedDate.value.day,
    );
    return normalizedSelected.isAfter(normalizedToday);
  }

  /// Получение текста для динамической кнопки
  String get actionButtonText {
    if (isSelectedDateInFuture) {
      return 'Будущий день';
    } else if (isSelectedDateFilled) {
      return 'Посмотреть данные';
    } else {
      return 'Ввести данные';
    }
  }

  /// Проверка, доступна ли кнопка действия
  bool get isActionButtonEnabled {
    return !isSelectedDateInFuture;
  }

  /// Получение названия текущего месяца для отображения
  String get currentMonthName {
    final months = [
      'январе', 'феврале', 'марте', 'апреле', 'мае', 'июне',
      'июле', 'августе', 'сентябре', 'октябре', 'ноябре', 'декабре'
    ];
    return months[currentMonth.value.month - 1];
  }

  /// Принудительное обновление всех данных
  Future<void> refreshData() async {
    await loadFilledDays();
    await updateCounters();
  }

  /// Обновление данных после добавления новой записи
  Future<void> onDataEntryCompleted() async {
    // Перезагружаем данные после того как пользователь ввел данные
    await refreshData();
  }

  /// Получение максимальной серии за все время (опционально)
  Future<int> getMaxStreak() async {
    try {
      return await _calculateStreakUseCase.getMaxStreak();
    } catch (e) {
      print('Ошибка получения максимальной серии: $e');
      return 0;
    }
  }

  /// Отладочная информация
  void printDebugInfo() {
    print('=== HomeController Debug Info ===');
    print('Selected Date: ${selectedDate.value}');
    print('Current Month: ${currentMonth.value}');
    print('Filled Dates Count: ${filledDates.length}');
    print('Consecutive Days: ${consecutiveDays.value}');
    print('Monthly Filled Days: ${monthlyFilledDays.value}');
    print('Is Selected Date Filled: $isSelectedDateFilled');
    print('Action Button Text: $actionButtonText');
    print('=====================================');
  }
}
</file>

<file path="lib/domain/services/preset_parameters_service.dart">
import '../../models/parameter.dart';
import '../../data/repositories/parameter_repository.dart';
import '../../data/repositories/parameter_repository_impl.dart';

class PresetParametersService {
  final ParameterRepository _parameterRepository;
  
  PresetParametersService(this._parameterRepository);
  
  /// Возвращает список всех дефолтных пресет параметров
  static List<Parameter> getDefaultParameters() {
    // Используем фиксированную дату, так как поле created_at может отсутствовать в БД
    final now = DateTime(2025, 1, 1);
    
    return [
      Parameter(
        name: 'Сон',
        dataType: 'Number',
        unit: 'часы',
        isPreset: true,
        isEnabled: true,
        sortOrder: 1,
        iconName: 'bedtime',
        createdAt: now,
      ),
      Parameter(
        name: 'БАДы',
        dataType: 'Text',
        isPreset: true,
        isEnabled: true,
        sortOrder: 2,
        iconName: 'medication',
        createdAt: now,
      ),
      Parameter(
        name: 'Оценка качества работы',
        dataType: 'Rating',
        unit: '1-10',
        scaleOptions: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
        isPreset: true,
        isEnabled: true,
        sortOrder: 3,
        iconName: 'work',
        createdAt: now,
      ),
      Parameter(
        name: 'Тренировка',
        dataType: 'Number',
        unit: 'минуты',
        isPreset: true,
        isEnabled: true,
        sortOrder: 4,
        iconName: 'fitness_center',
        createdAt: now,
      ),
      Parameter(
        name: 'Количество шагов',
        dataType: 'Number',
        isPreset: true,
        isEnabled: true,
        sortOrder: 5,
        iconName: 'directions_walk',
        createdAt: now,
      ),
      Parameter(
        name: 'Оценка социальности',
        dataType: 'Rating',
        unit: '1-10',
        scaleOptions: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
        isPreset: true,
        isEnabled: true,
        sortOrder: 6,
        iconName: 'people',
        createdAt: now,
      ),
      Parameter(
        name: 'Оценка настроения',
        dataType: 'Rating',
        unit: '1-10',
        scaleOptions: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
        isPreset: true,
        isEnabled: true,
        sortOrder: 7,
        iconName: 'sentiment_satisfied',
        createdAt: now,
      ),
      Parameter(
        name: 'Оценка своей привлекательности',
        dataType: 'Rating',
        unit: '1-10',
        scaleOptions: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
        isPreset: true,
        isEnabled: true,
        sortOrder: 8,
        iconName: 'favorite',
        createdAt: now,
      ),
      Parameter(
        name: 'Оценка самореализации',
        dataType: 'Rating',
        unit: '1-10',
        scaleOptions: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
        isPreset: true,
        isEnabled: true,
        sortOrder: 9,
        iconName: 'star',
        createdAt: now,
      ),
      Parameter(
        name: 'Оценка качества питания',
        dataType: 'Rating',
        unit: '1-10',
        scaleOptions: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
        isPreset: true,
        isEnabled: true,
        sortOrder: 10,
        iconName: 'restaurant',
        createdAt: now,
      ),
      Parameter(
        name: 'Оценка текущих финансов',
        dataType: 'Rating',
        unit: '1-10',
        scaleOptions: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
        isPreset: true,
        isEnabled: true,
        sortOrder: 11,
        iconName: 'attach_money',
        createdAt: now,
      ),
      Parameter(
        name: 'Оценка социальной полезности',
        dataType: 'Rating',
        unit: '1-10',
        scaleOptions: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
        isPreset: true,
        isEnabled: true,
        sortOrder: 12,
        iconName: 'public',
        createdAt: now,
      ),
      Parameter(
        name: 'Оценка прошедшего дня',
        dataType: 'Rating',
        unit: '1-10',
        scaleOptions: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
        isPreset: true,
        isEnabled: true,
        sortOrder: 13,
        iconName: 'thumb_up',
        createdAt: now,
      ),
      Parameter(
        name: 'Почему такая оценка',
        dataType: 'Text',
        isPreset: true,
        isEnabled: true,
        sortOrder: 14,
        iconName: 'edit_note',
        createdAt: now,
      ),
      Parameter(
        name: 'Воспоминания обо дне',
        dataType: 'Text',
        isPreset: true,
        isEnabled: true,
        sortOrder: 15,
        iconName: 'book',
        createdAt: now,
      ),
    ];
  }
  
  /// Проверяет наличие пресет параметров и создает их при необходимости
  Future<void> initializePresetIfNeeded() async {
    try {
      print('PresetParametersService: Checking if preset parameters exist...');
      
      // Проверяем, есть ли уже пресет параметры
      bool hasPresets = await _parameterRepository.hasPresetParameters();
      
      if (hasPresets) {
        print('PresetParametersService: Preset parameters already exist, skipping initialization');
        return;
      }
      
      print('PresetParametersService: No preset parameters found, creating defaults...');
      
      // Получаем дефолтные параметры
      List<Parameter> defaultParameters = getDefaultParameters();
      
      // Создаем пресеты в БД
      await _parameterRepository.insertPresetParameters(defaultParameters);
      
      print('PresetParametersService: Successfully created ${defaultParameters.length} preset parameters');
      
      // Логируем созданные параметры
      for (Parameter param in defaultParameters) {
        print('PresetParametersService: Created preset - ${param.name} (${param.dataType}, sortOrder: ${param.sortOrder})');
      }
      
    } catch (e) {
      print('PresetParametersService: Error initializing preset parameters: $e');
      rethrow;
    }
  }
  
  /// Сбрасывает все пресет параметры (для отладки/тестирования)
  Future<void> resetPresetParameters() async {
    try {
      print('PresetParametersService: Resetting preset parameters...');
      
      // Получаем все пресет параметры
      List<Parameter> presetParameters = await _parameterRepository.getPresetParameters();
      
      // Удаляем их (если это возможно, иначе просто отключаем)
      for (Parameter preset in presetParameters) {
        if (preset.id != null) {
          try {
            await _parameterRepository.deleteParameter(preset.id!);
          } catch (e) {
            // Если удаление не удалось, просто отключаем
            await _parameterRepository.toggleParameterEnabled(preset.id!, false);
          }
        }
      }
      
      // Создаем заново
      await initializePresetIfNeeded();
      
      print('PresetParametersService: Preset parameters reset completed');
      
    } catch (e) {
      print('PresetParametersService: Error resetting preset parameters: $e');
      rethrow;
    }
  }
  
  /// Возвращает количество созданных пресет параметров
  Future<int> getPresetParametersCount() async {
    try {
      List<Parameter> presets = await _parameterRepository.getPresetParameters();
      return presets.length;
    } catch (e) {
      print('PresetParametersService: Error getting preset count: $e');
      return 0;
    }
  }
  
  /// Включает/выключает пресет параметр по имени
  Future<bool> togglePresetParameter(String parameterName, bool isEnabled) async {
    try {
      List<Parameter> presets = await _parameterRepository.getPresetParameters();
      Parameter? targetParam = presets.where((p) => p.name == parameterName).firstOrNull;
      
      if (targetParam?.id != null) {
        await _parameterRepository.toggleParameterEnabled(targetParam!.id!, isEnabled);
        print('PresetParametersService: Toggled $parameterName to ${isEnabled ? "enabled" : "disabled"}');
        return true;
      }
      
      print('PresetParametersService: Parameter $parameterName not found');
      return false;
    } catch (e) {
      print('PresetParametersService: Error toggling parameter $parameterName: $e');
      return false;
    }
  }
}
</file>

<file path="lib/domain/use_cases/calculate_streak_use_case.dart">
import '../../../data/repositories/daily_record_repository.dart';
import '../../../models/daily_record.dart';

/// Use case для подсчета серий дней и статистики заполненности календаря
class CalculateStreakUseCase {
  final DailyRecordRepository _dailyRecordRepository;

  CalculateStreakUseCase(this._dailyRecordRepository);

  /// Подсчет дней подряд (текущая серия без пропусков от сегодня назад)
  Future<int> getConsecutiveDays() async {
    try {
      final allRecords = await _dailyRecordRepository.getAllDailyRecords();
      
      if (allRecords.isEmpty) return 0;

      // Сортируем записи по дате в убывающем порядке (от новых к старым)
      final sortedRecords = List<DailyRecord>.from(allRecords);
      sortedRecords.sort((a, b) => b.date.compareTo(a.date));

      final today = DateTime.now();
      final normalizedToday = DateTime(today.year, today.month, today.day);
      
      int consecutiveDays = 0;
      DateTime expectedDate = normalizedToday;

      // Проверяем каждый день начиная с сегодня
      for (final record in sortedRecords) {
        final recordDate = DateTime(record.date.year, record.date.month, record.date.day);
        
        if (recordDate == expectedDate) {
          // Проверяем что запись действительно содержит данные
          if (record.dataValues.isNotEmpty && 
              record.dataValues.values.any((value) => 
                value != null && value.toString().trim().isNotEmpty)) {
            consecutiveDays++;
            expectedDate = expectedDate.subtract(const Duration(days: 1));
          } else {
            break; // Запись есть, но пустая - прерываем серию
          }
        } else if (recordDate.isBefore(expectedDate)) {
          break; // Пропущен день - прерываем серию
        }
        // Если recordDate.isAfter(expectedDate) - просто продолжаем поиск
      }

      return consecutiveDays;
    } catch (e) {
      print('Ошибка при подсчете последовательных дней: $e');
      return 0;
    }
  }

  /// Подсчет заполненных дней в конкретном месяце
  Future<int> getFilledDaysInMonth(DateTime month) async {
    try {
      final allRecords = await _dailyRecordRepository.getAllDailyRecords();
      
      final startOfMonth = DateTime(month.year, month.month, 1);
      final endOfMonth = DateTime(month.year, month.month + 1, 0); // Последний день месяца

      int filledDays = 0;

      for (final record in allRecords) {
        final recordDate = DateTime(record.date.year, record.date.month, record.date.day);
        
        // Проверяем что дата в нужном месяце
        if (recordDate.isAtSameMomentAs(startOfMonth) || 
            (recordDate.isAfter(startOfMonth) && recordDate.isBefore(endOfMonth)) ||
            recordDate.isAtSameMomentAs(endOfMonth)) {
          
          // Проверяем что запись содержит данные
          if (record.dataValues.isNotEmpty && 
              record.dataValues.values.any((value) => 
                value != null && value.toString().trim().isNotEmpty)) {
            filledDays++;
          }
        }
      }

      return filledDays;
    } catch (e) {
      print('Ошибка при подсчете заполненных дней в месяце: $e');
      return 0;
    }
  }

  /// Получение списка всех заполненных дат для отображения в календаре
  Future<List<DateTime>> getFilledDates() async {
    try {
      final allRecords = await _dailyRecordRepository.getAllDailyRecords();
      final filledDates = <DateTime>[];

      for (final record in allRecords) {
        // Проверяем что запись содержит данные
        if (record.dataValues.isNotEmpty && 
            record.dataValues.values.any((value) => 
              value != null && value.toString().trim().isNotEmpty)) {
          
          final normalizedDate = DateTime(record.date.year, record.date.month, record.date.day);
          filledDates.add(normalizedDate);
        }
      }

      // Удаляем дубликаты и сортируем
      final uniqueDates = filledDates.toSet().toList();
      uniqueDates.sort();
      
      return uniqueDates;
    } catch (e) {
      print('Ошибка при получении заполненных дат: $e');
      return [];
    }
  }

  /// Получение заполненных дат для конкретного месяца (оптимизированная версия)
  Future<Set<DateTime>> getFilledDatesInMonth(DateTime month) async {
    try {
      final allRecords = await _dailyRecordRepository.getAllDailyRecords();
      final filledDates = <DateTime>{};

      final startOfMonth = DateTime(month.year, month.month, 1);
      final endOfMonth = DateTime(month.year, month.month + 1, 0);

      for (final record in allRecords) {
        final recordDate = DateTime(record.date.year, record.date.month, record.date.day);
        
        // Проверяем что дата в нужном месяце
        if (recordDate.isAtSameMomentAs(startOfMonth) || 
            (recordDate.isAfter(startOfMonth) && recordDate.isBefore(endOfMonth)) ||
            recordDate.isAtSameMomentAs(endOfMonth)) {
          
          // Проверяем что запись содержит данные
          if (record.dataValues.isNotEmpty && 
              record.dataValues.values.any((value) => 
                value != null && value.toString().trim().isNotEmpty)) {
            filledDates.add(recordDate);
          }
        }
      }

      return filledDates;
    } catch (e) {
      print('Ошибка при получении заполненных дат в месяце: $e');
      return <DateTime>{};
    }
  }

  /// Проверка заполнен ли конкретный день
  Future<bool> isDayFilled(DateTime day) async {
    try {
      final normalizedDay = DateTime(day.year, day.month, day.day);
      final record = await _dailyRecordRepository.getDailyRecordByDate(normalizedDay);
      
      if (record == null) return false;
      
      // Проверяем что запись содержит данные
      return record.dataValues.isNotEmpty && 
             record.dataValues.values.any((value) => 
               value != null && value.toString().trim().isNotEmpty);
    } catch (e) {
      print('Ошибка при проверке заполненности дня: $e');
      return false;
    }
  }

  /// Получение максимальной серии дней за всё время
  Future<int> getMaxStreak() async {
    try {
      final allRecords = await _dailyRecordRepository.getAllDailyRecords();
      
      if (allRecords.isEmpty) return 0;

      // Получаем все заполненные даты
      final filledDates = <DateTime>[];
      for (final record in allRecords) {
        if (record.dataValues.isNotEmpty && 
            record.dataValues.values.any((value) => 
              value != null && value.toString().trim().isNotEmpty)) {
          
          final normalizedDate = DateTime(record.date.year, record.date.month, record.date.day);
          filledDates.add(normalizedDate);
        }
      }

      if (filledDates.isEmpty) return 0;

      // Удаляем дубликаты и сортируем
      final uniqueDates = filledDates.toSet().toList();
      uniqueDates.sort();

      int maxStreak = 1;
      int currentStreak = 1;

      for (int i = 1; i < uniqueDates.length; i++) {
        final previousDate = uniqueDates[i - 1];
        final currentDate = uniqueDates[i];
        
        // Проверяем что даты идут подряд (разница = 1 день)
        if (currentDate.difference(previousDate).inDays == 1) {
          currentStreak++;
          maxStreak = currentStreak > maxStreak ? currentStreak : maxStreak;
        } else {
          currentStreak = 1;
        }
      }

      return maxStreak;
    } catch (e) {
      print('Ошибка при подсчете максимальной серии: $e');
      return 0;
    }
  }
}
</file>

<file path="lib/domain/use_cases/create_daily_record_use_case.dart">
import '../../models/daily_record.dart';
import '../../data/repositories/daily_record_repository.dart';
import '../../data/repositories/daily_record_repository_impl.dart';

class CreateDailyRecordUseCase {
  final DailyRecordRepository _dailyRecordRepository = DailyRecordRepositoryImpl();

  Future<int> execute(DailyRecord dailyRecord) async {
    // Здесь может быть бизнес-логика перед созданием ежедневной записи
    return await _dailyRecordRepository.insertDailyRecord(dailyRecord);
  }
}
</file>

<file path="lib/domain/use_cases/create_parameter_use_case.dart">
import '../../models/parameter.dart';
import '../../data/repositories/parameter_repository.dart';
import '../../data/repositories/parameter_repository_impl.dart';

class CreateParameterUseCase {
  final ParameterRepository _parameterRepository = ParameterRepositoryImpl(); // Репозиторий

  Future<int> execute(Parameter parameter) async {
    // Здесь может быть бизнес-логика, валидация перед созданием параметра
    // Например, проверка, что имя параметра не пустое, тип данных валидный и т.д.
    if (parameter.name.isEmpty) {
      throw Exception("Parameter name cannot be empty"); // Пример валидации
    }
    return await _parameterRepository.insertParameter(parameter); // Вызываем репозиторий для сохранения
  }
}
</file>

<file path="lib/domain/use_cases/delete_daily_record_use_case.dart">
import '../../data/repositories/daily_record_repository.dart';
import '../../data/repositories/daily_record_repository_impl.dart';

class DeleteDailyRecordUseCase {
  final DailyRecordRepository _dailyRecordRepository = DailyRecordRepositoryImpl();

  Future<int> execute(int recordId) async {
    return await _dailyRecordRepository.deleteDailyRecord(recordId);
  }
}
</file>

<file path="lib/domain/use_cases/delete_parameter_use_case.dart">
import '../../data/repositories/parameter_repository.dart';
import '../../data/repositories/parameter_repository_impl.dart';

class DeleteParameterUseCase {
  final ParameterRepository _parameterRepository = ParameterRepositoryImpl();

  Future<int> execute(int parameterId) async {
    // Здесь может быть бизнес-логика перед удалением, например, проверка, что параметр не используется в ежедневных записях
    return await _parameterRepository.deleteParameter(parameterId);
  }
}
</file>

<file path="lib/domain/use_cases/export_data_use_case.dart">
// lib/domain/use_cases/export_data_use_case.dart

import '../../data/repositories/daily_record_repository.dart';
import '../../data/repositories/parameter_repository.dart';
import '../../models/daily_record.dart';
import '../../models/parameter.dart';

class ExportDataUseCase {
  final DailyRecordRepository _dailyRecordRepository;
  final ParameterRepository _parameterRepository; // Добавьте репозиторий параметров

  ExportDataUseCase(this._dailyRecordRepository, this._parameterRepository);

  Future<(List<Parameter>, List<DailyRecord>)> execute() async {
    final parameters = await _parameterRepository.getAllParameters(); // Получите все параметры
    final dailyRecords = await _dailyRecordRepository.getAllDailyRecords(); // Получите все записи
    return (parameters, dailyRecords);
  }
}
</file>

<file path="lib/domain/use_cases/get_all_daily_records_use_case.dart">
import '../../models/daily_record.dart';
import '../../data/repositories/daily_record_repository.dart';
import '../../data/repositories/daily_record_repository_impl.dart';

class GetAllDailyRecordsUseCase {
  final DailyRecordRepository _dailyRecordRepository = DailyRecordRepositoryImpl();

  Future<List<DailyRecord>> execute() async {
    return await _dailyRecordRepository.getAllDailyRecords();
  }
}
</file>

<file path="lib/domain/use_cases/get_all_parameters_use_case.dart">
import '../../models/parameter.dart';
import '../../data/repositories/parameter_repository.dart';
import '../../data/repositories/parameter_repository_impl.dart';

class GetAllParametersUseCase {
  final ParameterRepository _parameterRepository = ParameterRepositoryImpl();

  Future<List<Parameter>> execute() async {
    // Здесь может быть бизнес-логика, например, кэширование результатов, фильтрация и т.д.
    return await _parameterRepository.getAllParameters();
  }
}
</file>

<file path="lib/domain/use_cases/get_daily_record_by_date_use_case.dart">
import '../../models/daily_record.dart';
import '../../data/repositories/daily_record_repository.dart';
import '../../data/repositories/daily_record_repository_impl.dart';

class GetDailyRecordByDateUseCase {
  final DailyRecordRepository _dailyRecordRepository = DailyRecordRepositoryImpl();

  Future<DailyRecord?> execute(DateTime date) async {
    return await _dailyRecordRepository.getDailyRecordByDate(date);
  }
}
</file>

<file path="lib/domain/use_cases/get_daily_record_use_case.dart">
import '../../models/daily_record.dart';
import '../../data/repositories/daily_record_repository.dart';
import '../../data/repositories/daily_record_repository_impl.dart';

class GetDailyRecordUseCase {
  final DailyRecordRepository _dailyRecordRepository = DailyRecordRepositoryImpl();

  Future<DailyRecord?> execute(int recordId) async {
    return await _dailyRecordRepository.getDailyRecord(recordId);
  }
}
</file>

<file path="lib/domain/use_cases/get_parameter_use_case.dart">
import '../../models/parameter.dart';
import '../../data/repositories/parameter_repository.dart';
import '../../data/repositories/parameter_repository_impl.dart';

class GetParameterUseCase {
  final ParameterRepository _parameterRepository = ParameterRepositoryImpl();

  Future<Parameter?> execute(int parameterId) async {
    return await _parameterRepository.getParameter(parameterId); // Просто делегирование
  }
}
</file>

<file path="lib/domain/use_cases/update_daily_record_use_case.dart">
import '../../models/daily_record.dart';
import '../../data/repositories/daily_record_repository.dart';
import '../../data/repositories/daily_record_repository_impl.dart';

class UpdateDailyRecordUseCase {
  final DailyRecordRepository _dailyRecordRepository = DailyRecordRepositoryImpl();

  Future<int> execute(DailyRecord dailyRecord) async {
    return await _dailyRecordRepository.updateDailyRecord(dailyRecord);
  }
}
</file>

<file path="lib/domain/use_cases/update_parameter_use_case.dart">
import '../../models/parameter.dart';
import '../../data/repositories/parameter_repository.dart';
import '../../data/repositories/parameter_repository_impl.dart';

class UpdateParameterUseCase {
  final ParameterRepository _parameterRepository = ParameterRepositoryImpl();

  Future<int> execute(Parameter parameter) async {
    return await _parameterRepository.updateParameter(parameter); // Просто делегирование
  }
}
</file>

<file path="lib/presentation/animations/page_transitions.dart">
import 'package:flutter/material.dart';

/// Кастомные анимации переходов между экранами для улучшения UX
class PageTransitions {
  /// Плавный переход с прозрачностью и масштабированием
  static Route<T> fadeScale<T extends Object?>(Widget page) {
    return PageRouteBuilder<T>(
      pageBuilder: (context, animation, secondaryAnimation) => page,
      transitionDuration: const Duration(milliseconds: 400),
      reverseTransitionDuration: const Duration(milliseconds: 300),
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        const begin = 0.0;
        const end = 1.0;
        const curve = Curves.easeInOut;

        var fadeAnimation = Tween(begin: begin, end: end).animate(
          CurvedAnimation(parent: animation, curve: curve),
        );

        var scaleAnimation = Tween(begin: 0.95, end: 1.0).animate(
          CurvedAnimation(parent: animation, curve: curve),
        );

        return FadeTransition(
          opacity: fadeAnimation,
          child: ScaleTransition(
            scale: scaleAnimation,
            child: child,
          ),
        );
      },
    );
  }

  /// Слайд переход справа налево
  static Route<T> slideFromRight<T extends Object?>(Widget page) {
    return PageRouteBuilder<T>(
      pageBuilder: (context, animation, secondaryAnimation) => page,
      transitionDuration: const Duration(milliseconds: 350),
      reverseTransitionDuration: const Duration(milliseconds: 300),
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        const begin = Offset(1.0, 0.0);
        const end = Offset.zero;
        const curve = Curves.easeInOutCubic;

        var tween = Tween(begin: begin, end: end).chain(
          CurveTween(curve: curve),
        );

        return SlideTransition(
          position: animation.drive(tween),
          child: child,
        );
      },
    );
  }

  /// Слайд переход снизу вверх (для модальных экранов)
  static Route<T> slideFromBottom<T extends Object?>(Widget page) {
    return PageRouteBuilder<T>(
      pageBuilder: (context, animation, secondaryAnimation) => page,
      transitionDuration: const Duration(milliseconds: 350),
      reverseTransitionDuration: const Duration(milliseconds: 250),
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        const begin = Offset(0.0, 1.0);
        const end = Offset.zero;
        const curve = Curves.easeOutCubic;

        var tween = Tween(begin: begin, end: end).chain(
          CurveTween(curve: curve),
        );

        return SlideTransition(
          position: animation.drive(tween),
          child: child,
        );
      },
    );
  }

  /// Комбинированный переход: слайд + прозрачность
  static Route<T> slideAndFade<T extends Object?>(Widget page, {SlideDirection direction = SlideDirection.right}) {
    return PageRouteBuilder<T>(
      pageBuilder: (context, animation, secondaryAnimation) => page,
      transitionDuration: const Duration(milliseconds: 400),
      reverseTransitionDuration: const Duration(milliseconds: 300),
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        Offset begin;
        switch (direction) {
          case SlideDirection.right:
            begin = const Offset(1.0, 0.0);
            break;
          case SlideDirection.left:
            begin = const Offset(-1.0, 0.0);
            break;
          case SlideDirection.up:
            begin = const Offset(0.0, 1.0);
            break;
          case SlideDirection.down:
            begin = const Offset(0.0, -1.0);
            break;
        }

        const end = Offset.zero;
        const curve = Curves.easeInOutCubic;

        var slideTween = Tween(begin: begin, end: end).chain(
          CurveTween(curve: curve),
        );

        var fadeTween = Tween(begin: 0.0, end: 1.0).chain(
          CurveTween(curve: curve),
        );

        return SlideTransition(
          position: animation.drive(slideTween),
          child: FadeTransition(
            opacity: animation.drive(fadeTween),
            child: child,
          ),
        );
      },
    );
  }

  /// Hero-анимация с дополнительным fade эффектом
  static Route<T> heroFade<T extends Object?>(Widget page, {required String heroTag}) {
    return PageRouteBuilder<T>(
      pageBuilder: (context, animation, secondaryAnimation) => page,
      transitionDuration: const Duration(milliseconds: 600),
      reverseTransitionDuration: const Duration(milliseconds: 400),
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        const curve = Curves.easeInOutCubic;

        var fadeAnimation = Tween(begin: 0.0, end: 1.0).animate(
          CurvedAnimation(parent: animation, curve: curve),
        );

        return FadeTransition(
          opacity: fadeAnimation,
          child: child,
        );
      },
    );
  }

  /// Переход с "shared element" эффектом
  static Route<T> sharedAxisTransition<T extends Object?>(Widget page, {SharedAxisTransitionType type = SharedAxisTransitionType.horizontal}) {
    return PageRouteBuilder<T>(
      pageBuilder: (context, animation, secondaryAnimation) => page,
      transitionDuration: const Duration(milliseconds: 300),
      reverseTransitionDuration: const Duration(milliseconds: 250),
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        const curve = Curves.easeInOut;
        
        if (type == SharedAxisTransitionType.horizontal) {
          return SlideTransition(
            position: Tween<Offset>(
              begin: const Offset(0.3, 0.0),
              end: Offset.zero,
            ).animate(CurvedAnimation(parent: animation, curve: curve)),
            child: FadeTransition(
              opacity: Tween<double>(
                begin: 0.0,
                end: 1.0,
              ).animate(CurvedAnimation(parent: animation, curve: curve)),
              child: child,
            ),
          );
        } else {
          return SlideTransition(
            position: Tween<Offset>(
              begin: const Offset(0.0, 0.3),
              end: Offset.zero,
            ).animate(CurvedAnimation(parent: animation, curve: curve)),
            child: FadeTransition(
              opacity: Tween<double>(
                begin: 0.0,
                end: 1.0,
              ).animate(CurvedAnimation(parent: animation, curve: curve)),
              child: child,
            ),
          );
        }
      },
    );
  }
}

/// Направления для слайд анимаций
enum SlideDirection {
  right,
  left,
  up,
  down,
}

/// Типы shared axis переходов
enum SharedAxisTransitionType {
  horizontal,
  vertical,
}

/// Расширение для Navigator для удобного использования
extension NavigatorExtension on NavigatorState {
  Future<T?> pushWithTransition<T extends Object?>(
    Widget page, {
    PageTransitionType transition = PageTransitionType.slideAndFade,
    SlideDirection direction = SlideDirection.right,
  }) {
    late Route<T> route;
    
    switch (transition) {
      case PageTransitionType.fadeScale:
        route = PageTransitions.fadeScale<T>(page);
        break;
      case PageTransitionType.slideFromRight:
        route = PageTransitions.slideFromRight<T>(page);
        break;
      case PageTransitionType.slideFromBottom:
        route = PageTransitions.slideFromBottom<T>(page);
        break;
      case PageTransitionType.slideAndFade:
        route = PageTransitions.slideAndFade<T>(page, direction: direction);
        break;
      case PageTransitionType.sharedAxis:
        route = PageTransitions.sharedAxisTransition<T>(page);
        break;
    }
    
    return push<T>(route);
  }
}

enum PageTransitionType {
  fadeScale,
  slideFromRight,
  slideFromBottom,
  slideAndFade,
  sharedAxis,
}
</file>

<file path="lib/presentation/screens/main_navigation_screen.dart">
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../domain/controllers/home_controller.dart';
import '../../domain/controllers/data_entry_controller.dart';
import 'home_screen.dart';
import 'data_entry_screen.dart';
import 'metrics_screen.dart';
import 'settings_screen.dart';

/// Контроллер для управления навигацией между вкладками
class NavigationController extends GetxController {
  var currentIndex = 0.obs;
  
  void changeTab(int index) {
    currentIndex.value = index;
  }
  
  /// Переход на вкладку "Ввод" (индекс 1)
  void goToDataEntry() {
    // При переходе по вкладке всегда показываем список-превью
    try {
      final dataEntryController = Get.find<DataEntryController>();
      dataEntryController.setInitialViewMode('list');
    } catch (e) {
      // DataEntryController может быть не инициализирован
    }
    changeTab(1);
  }
  
  /// Переход на главную вкладку (индекс 0)
  void goToHome() {
    changeTab(0);
  }
}

class MainNavigationScreen extends StatelessWidget {
  const MainNavigationScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final NavigationController navigationController = Get.put(NavigationController());
    final HomeController homeController = Get.find<HomeController>();
    final theme = Theme.of(context);

    // Слушаем изменения выбранной даты в календаре 
    ever(homeController.selectedDate, (DateTime selectedDate) {
      // Только обновляем дату в DataEntryController, без автонавигации
      try {
        final dataEntryController = Get.find<DataEntryController>();
        dataEntryController.selectDate(selectedDate);
      } catch (e) {
        // DataEntryController может быть не инициализирован
        print('DataEntryController не найден: $e');
      }
    });

    final List<Widget> screens = [
      const HomeScreen(),        // 0 - Главная
      const DataEntryScreen(),   // 1 - Ввод
      const MetricsScreen(),     // 2 - Метрики
      const SettingsScreen(),    // 3 - Настройки
    ];

    return Scaffold(
      body: Obx(() => IndexedStack(
        index: navigationController.currentIndex.value,
        children: screens,
      )),
      bottomNavigationBar: Obx(() => BottomNavigationBar(
        currentIndex: navigationController.currentIndex.value,
        onTap: (index) {
          if (index == 1) {
            // При нажатии на "Ввод" устанавливаем текущую дату и режим списка
            final today = DateTime.now();
            homeController.selectDate(today);
            
            try {
              final dataEntryController = Get.find<DataEntryController>();
              dataEntryController.selectDate(today);
              dataEntryController.setInitialViewMode('list'); // Всегда показываем список при переходе по вкладке
            } catch (e) {
              print('DataEntryController не найден при переходе на ввод: $e');
            }
          }
          navigationController.changeTab(index);
        },
        type: BottomNavigationBarType.fixed,
        backgroundColor: theme.colorScheme.surface,
        selectedItemColor: theme.colorScheme.primary,
        unselectedItemColor: theme.colorScheme.onSurface.withOpacity(0.6),
        selectedLabelStyle: const TextStyle(
          fontWeight: FontWeight.w600,
          fontSize: 12,
        ),
        unselectedLabelStyle: const TextStyle(
          fontWeight: FontWeight.normal,
          fontSize: 12,
        ),
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.dashboard_outlined),
            activeIcon: Icon(Icons.dashboard),
            label: 'Главная',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.add_task_outlined),
            activeIcon: Icon(Icons.add_task),
            label: 'Запись',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.analytics_outlined),
            activeIcon: Icon(Icons.analytics),
            label: 'Данные',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings_outlined),
            activeIcon: Icon(Icons.settings),
            label: 'Настройки',
          ),
        ],
      )),
    );
  }
}

/// Расширение для легкого доступа к NavigationController
extension NavigationExtension on BuildContext {
  NavigationController get navigation => Get.find<NavigationController>();
}
</file>

<file path="lib/presentation/screens/metrics_screen.dart">
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../domain/controllers/parameter_controller.dart';
import 'parameter_list_screen.dart';
import '../animations/page_transitions.dart';

class MetricsScreen extends StatelessWidget {
  const MetricsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final parameterController = Get.find<ParameterController>();
    
    return Scaffold(
      backgroundColor: theme.colorScheme.surface,
      appBar: AppBar(
        title: const Text('Метрики'),
        centerTitle: true,
        elevation: 0,
        backgroundColor: theme.colorScheme.primary,
        foregroundColor: Colors.white,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Заголовок секции
            Text(
              'Управление параметрами',
              style: theme.textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
                color: theme.colorScheme.onSurface,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Создавайте и редактируйте параметры для отслеживания',
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.7),
              ),
            ),
            const SizedBox(height: 24),
            
            // Статистика параметров
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Row(
                  children: [
                    Icon(
                      Icons.analytics,
                      color: theme.colorScheme.primary,
                      size: 32,
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Параметры для отслеживания',
                            style: theme.textTheme.titleMedium,
                          ),
                          const SizedBox(height: 4),
                          Obx(() => Text(
                            'Всего создано: ${parameterController.parameters.length}',
                            style: theme.textTheme.bodyMedium?.copyWith(
                              color: theme.colorScheme.onSurface.withOpacity(0.7),
                            ),
                          )),
                        ],
                      ),
                    ),
                    Icon(
                      Icons.arrow_forward_ios,
                      color: theme.colorScheme.onSurface.withOpacity(0.5),
                      size: 16,
                    ),
                  ],
                ),
              ),
            ),
            
            const SizedBox(height: 16),
            
            // Кнопка управления параметрами
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: () {
                  Navigator.of(context).pushWithTransition(
                    ParameterListScreen(),
                    transition: PageTransitionType.slideAndFade,
                  );
                },
                icon: const Icon(Icons.tune),
                label: const Text('Управлять параметрами'),
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  backgroundColor: theme.colorScheme.primary,
                  foregroundColor: theme.colorScheme.onPrimary,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
              ),
            ),
            
            const SizedBox(height: 32),
            
            // Будущие метрики (заглушки)
            Text(
              'Статистика и анализ',
              style: theme.textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
                color: theme.colorScheme.onSurface,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Скоро здесь появятся графики и анализ ваших данных',
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.7),
              ),
            ),
            const SizedBox(height: 16),
            
            // Заглушки для будущих метрик
            _buildMetricCard(
              context,
              icon: Icons.trending_up,
              title: 'Тренды и динамика',
              description: 'Анализ изменений параметров со временем',
              isComingSoon: true,
            ),
            
            const SizedBox(height: 12),
            
            _buildMetricCard(
              context,
              icon: Icons.bar_chart,
              title: 'Сравнительная статистика',
              description: 'Сравнение показателей за разные периоды',
              isComingSoon: true,
            ),
            
            const SizedBox(height: 12),
            
            _buildMetricCard(
              context,
              icon: Icons.insights,
              title: 'Корреляции',
              description: 'Взаимосвязи между различными параметрами',
              isComingSoon: true,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMetricCard(
    BuildContext context, {
    required IconData icon,
    required String title,
    required String description,
    bool isComingSoon = false,
  }) {
    final theme = Theme.of(context);
    
    return Card(
      child: Opacity(
        opacity: isComingSoon ? 0.6 : 1.0,
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: theme.colorScheme.primaryContainer,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(
                  icon,
                  color: theme.colorScheme.onPrimaryContainer,
                  size: 24,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Text(
                          title,
                          style: theme.textTheme.titleMedium,
                        ),
                        if (isComingSoon) ...[
                          const SizedBox(width: 8),
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                            decoration: BoxDecoration(
                              color: theme.colorScheme.secondary.withOpacity(0.2),
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Text(
                              'Скоро',
                              style: theme.textTheme.labelSmall?.copyWith(
                                color: theme.colorScheme.secondary,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ),
                        ],
                      ],
                    ),
                    const SizedBox(height: 4),
                    Text(
                      description,
                      style: theme.textTheme.bodySmall?.copyWith(
                        color: theme.colorScheme.onSurface.withOpacity(0.7),
                      ),
                    ),
                  ],
                ),
              ),
              if (!isComingSoon)
                Icon(
                  Icons.arrow_forward_ios,
                  color: theme.colorScheme.onSurface.withOpacity(0.5),
                  size: 16,
                ),
            ],
          ),
        ),
      ),
    );
  }
}
</file>

<file path="lib/presentation/screens/settings_screen.dart">
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../domain/controllers/daily_record_controller.dart';

class SettingsScreen extends StatelessWidget {
  const SettingsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final dailyRecordController = Get.find<DailyRecordController>();
    
    return Scaffold(
      backgroundColor: theme.colorScheme.surface,
      appBar: AppBar(
        title: const Text('Настройки'),
        centerTitle: true,
        elevation: 0,
        backgroundColor: theme.colorScheme.primary,
        foregroundColor: Colors.white,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Секция экспорта данных
            Text(
              'Экспорт и резервное копирование',
              style: theme.textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
                color: theme.colorScheme.onSurface,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Сохраните ваши данные или поделитесь ими',
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.7),
              ),
            ),
            const SizedBox(height: 16),
            
            // Кнопка экспорта
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: () {
                  dailyRecordController.exportDataAndShare();
                },
                icon: const Icon(Icons.share),
                label: const Text('Экспортировать данные в CSV'),
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  backgroundColor: theme.colorScheme.primary,
                  foregroundColor: theme.colorScheme.onPrimary,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
              ),
            ),
            
            
            const SizedBox(height: 32),
            
            // Секция настроек приложения
            Text(
              'Настройки приложения',
              style: theme.textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
                color: theme.colorScheme.onSurface,
              ),
            ),
            const SizedBox(height: 16),
            
            // Заглушки для будущих настроек
            _buildSettingCard(
              context,
              icon: Icons.notifications,
              title: 'Уведомления',
              description: 'Напоминания о вводе данных',
              isComingSoon: true,
            ),
            
            const SizedBox(height: 12),
            
            _buildSettingCard(
              context,
              icon: Icons.palette,
              title: 'Тема оформления',
              description: 'Светлая, темная или автоматическая',
              isComingSoon: true,
            ),
            
            const SizedBox(height: 12),
            
            _buildSettingCard(
              context,
              icon: Icons.cloud_sync,
              title: 'Синхронизация',
              description: 'Резервное копирование в облако',
              isComingSoon: true,
            ),
            
            const SizedBox(height: 32),
            
            // Информация о приложении
            Text(
              'О приложении',
              style: theme.textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
                color: theme.colorScheme.onSurface,
              ),
            ),
            const SizedBox(height: 16),
            
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  children: [
                    Row(
                      children: [
                        Icon(
                          Icons.health_and_safety,
                          color: theme.colorScheme.primary,
                          size: 32,
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                'BioLogger',
                                style: theme.textTheme.titleLarge?.copyWith(
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              Text(
                                'Трекер здоровья и самочувствия',
                                style: theme.textTheme.bodyMedium?.copyWith(
                                  color: theme.colorScheme.onSurface.withOpacity(0.7),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),
                    Row(
                      children: [
                        Expanded(
                          child: Text(
                            'Версия: 1.0.0',
                            style: theme.textTheme.bodySmall?.copyWith(
                              color: theme.colorScheme.onSurface.withOpacity(0.7),
                            ),
                          ),
                        ),
                        TextButton(
                          onPressed: () {
                            Get.snackbar(
                              'Отладка',
                              'Функция отладки временно отключена',
                              snackPosition: SnackPosition.BOTTOM,
                            );
                          },
                          child: const Text('Отладка'),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }


  Widget _buildSettingCard(
    BuildContext context, {
    required IconData icon,
    required String title,
    required String description,
    bool isComingSoon = false,
  }) {
    final theme = Theme.of(context);
    
    return Card(
      child: Opacity(
        opacity: isComingSoon ? 0.6 : 1.0,
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: theme.colorScheme.primaryContainer,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(
                  icon,
                  color: theme.colorScheme.onPrimaryContainer,
                  size: 24,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Text(
                          title,
                          style: theme.textTheme.titleMedium,
                        ),
                        if (isComingSoon) ...[
                          const SizedBox(width: 8),
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                            decoration: BoxDecoration(
                              color: theme.colorScheme.secondary.withOpacity(0.2),
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Text(
                              'Скоро',
                              style: theme.textTheme.labelSmall?.copyWith(
                                color: theme.colorScheme.secondary,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ),
                        ],
                      ],
                    ),
                    const SizedBox(height: 4),
                    Text(
                      description,
                      style: theme.textTheme.bodySmall?.copyWith(
                        color: theme.colorScheme.onSurface.withOpacity(0.7),
                      ),
                    ),
                  ],
                ),
              ),
              if (!isComingSoon)
                Icon(
                  Icons.arrow_forward_ios,
                  color: theme.colorScheme.onSurface.withOpacity(0.5),
                  size: 16,
                ),
            ],
          ),
        ),
      ),
    );
  }
}
</file>

<file path="lib/presentation/widgets/calendar_widget.dart">
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

/// Переиспользуемый календарный виджет для отображения и выбора дат
class CalendarWidget extends StatefulWidget {
  /// Выбранная в данный момент дата
  final DateTime selectedDate;
  
  /// Список заполненных дат (с данными)
  final Set<DateTime> filledDates;
  
  /// Колбэк при выборе даты
  final Function(DateTime) onDateSelected;
  
  /// Колбэк при изменении месяца
  final Function(DateTime) onMonthChanged;
  
  /// Отображаемый месяц (если не указан, используется selectedDate)
  final DateTime? displayMonth;

  const CalendarWidget({
    super.key,
    required this.selectedDate,
    required this.filledDates,
    required this.onDateSelected,
    required this.onMonthChanged,
    this.displayMonth,
  });

  @override
  State<CalendarWidget> createState() => _CalendarWidgetState();
}

class _CalendarWidgetState extends State<CalendarWidget> {
  late DateTime _currentMonth;

  @override
  void initState() {
    super.initState();
    _currentMonth = widget.displayMonth ?? 
        DateTime(widget.selectedDate.year, widget.selectedDate.month, 1);
  }

  @override
  void didUpdateWidget(CalendarWidget oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.displayMonth != null && widget.displayMonth != oldWidget.displayMonth) {
      _currentMonth = widget.displayMonth!;
    }
  }

  /// Переход к предыдущему месяцу
  void _previousMonth() {
    setState(() {
      _currentMonth = DateTime(_currentMonth.year, _currentMonth.month - 1, 1);
    });
    widget.onMonthChanged(_currentMonth);
  }

  /// Переход к следующему месяцу
  void _nextMonth() {
    setState(() {
      _currentMonth = DateTime(_currentMonth.year, _currentMonth.month + 1, 1);
    });
    widget.onMonthChanged(_currentMonth);
  }

  /// Генерация всех дней для отображения в календаре (42 дня = 6 недель)
  List<DateTime> _generateCalendarDays() {
    final firstDayOfMonth = DateTime(_currentMonth.year, _currentMonth.month, 1);
    final lastDayOfMonth = DateTime(_currentMonth.year, _currentMonth.month + 1, 0);
    
    // Определяем первый день недели (понедельник = 1, воскресенье = 7)
    final firstWeekday = firstDayOfMonth.weekday;
    final startDate = firstDayOfMonth.subtract(Duration(days: firstWeekday - 1));
    
    final days = <DateTime>[];
    for (int i = 0; i < 42; i++) {
      days.add(startDate.add(Duration(days: i)));
    }
    
    return days;
  }

  /// Проверяет, является ли день заполненным
  bool _isDayFilled(DateTime day) {
    final normalizedDay = DateTime(day.year, day.month, day.day);
    return widget.filledDates.contains(normalizedDay);
  }

  /// Проверяет, является ли день выбранным
  bool _isDaySelected(DateTime day) {
    final normalizedDay = DateTime(day.year, day.month, day.day);
    final normalizedSelected = DateTime(
      widget.selectedDate.year,
      widget.selectedDate.month,
      widget.selectedDate.day,
    );
    return normalizedDay == normalizedSelected;
  }

  /// Проверяет, принадлежит ли день текущему месяцу
  bool _isDayInCurrentMonth(DateTime day) {
    return day.month == _currentMonth.month && day.year == _currentMonth.year;
  }

  /// Проверяет, является ли день будущим (недоступным для выбора)
  bool _isDayInFuture(DateTime day) {
    final today = DateTime.now();
    final normalizedToday = DateTime(today.year, today.month, today.day);
    final normalizedDay = DateTime(day.year, day.month, day.day);
    return normalizedDay.isAfter(normalizedToday);
  }

  /// Обработка клика по дню
  void _onDayTap(DateTime day) {
    if (_isDayInFuture(day)) return; // Будущие дни недоступны
    
    widget.onDateSelected(day);
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final screenWidth = MediaQuery.of(context).size.width;
    final isSmallScreen = screenWidth < 400;
    
    return Card(
      margin: const EdgeInsets.all(16),
      child: Padding(
        padding: EdgeInsets.all(isSmallScreen ? 12 : 16),
        child: Column(
          children: [
            // Header с навигацией
            _buildHeader(theme),
            const SizedBox(height: 16),
            
            // Заголовки дней недели
            _buildWeekdayHeaders(theme, isSmallScreen),
            const SizedBox(height: 8),
            
            // Сетка календаря
            _buildCalendarGrid(theme, isSmallScreen),
          ],
        ),
      ),
    );
  }

  /// Создает заголовок календаря с навигацией
  Widget _buildHeader(ThemeData theme) {
    return Row(
      children: [
        IconButton(
          onPressed: _previousMonth,
          icon: const Icon(Icons.chevron_left),
          tooltip: 'Предыдущий месяц',
        ),
        Expanded(
          child: Text(
            DateFormat('MMMM yyyy').format(_currentMonth),
            style: theme.textTheme.titleLarge?.copyWith(
              fontWeight: FontWeight.bold,
            ),
            textAlign: TextAlign.center,
          ),
        ),
        IconButton(
          onPressed: _nextMonth,
          icon: const Icon(Icons.chevron_right),
          tooltip: 'Следующий месяц',
        ),
      ],
    );
  }

  /// Создает заголовки дней недели
  Widget _buildWeekdayHeaders(ThemeData theme, bool isSmallScreen) {
    const weekdays = ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'];
    
    return Row(
      children: weekdays.map((weekday) {
        return Expanded(
          child: Center(
            child: Text(
              weekday,
              style: theme.textTheme.labelMedium?.copyWith(
                color: theme.colorScheme.onSurfaceVariant,
                fontWeight: FontWeight.w600,
                fontSize: isSmallScreen ? 12 : 14,
              ),
            ),
          ),
        );
      }).toList(),
    );
  }

  /// Создает сетку календаря
  Widget _buildCalendarGrid(ThemeData theme, bool isSmallScreen) {
    final days = _generateCalendarDays();
    final daySize = isSmallScreen ? 36.0 : 44.0;
    
    return Column(
      children: List.generate(6, (weekIndex) {
        return Padding(
          padding: const EdgeInsets.symmetric(vertical: 2),
          child: Row(
            children: List.generate(7, (dayIndex) {
              final day = days[weekIndex * 7 + dayIndex];
              return Expanded(
                child: _buildDayCell(day, theme, daySize, isSmallScreen),
              );
            }),
          ),
        );
      }),
    );
  }

  /// Создает ячейку дня
  Widget _buildDayCell(DateTime day, ThemeData theme, double size, bool isSmallScreen) {
    final isSelected = _isDaySelected(day);
    final isFilled = _isDayFilled(day);
    final isInCurrentMonth = _isDayInCurrentMonth(day);
    final isInFuture = _isDayInFuture(day);
    final isToday = _isToday(day);
    
    // Новые визуальные состояния согласно требованиям
    Color backgroundColor = Colors.transparent;
    Color textColor = theme.colorScheme.onSurface;
    Color? borderColor;
    double borderWidth = 0;
    
    if (isInFuture) {
      // Будущие дни - серые, недоступны
      textColor = Colors.grey.shade400;
    } else if (!isInCurrentMonth) {
      // Дни соседних месяцев
      textColor = Colors.grey.shade300;
    } else {
      // Дни текущего месяца
      if (isFilled) {
        if (isSelected) {
          // Выбранная заполненная: зеленый кружок + дополнительная обводка (2px solid)
          backgroundColor = const Color(0xFF87A96B); // Sage green
          textColor = Colors.white;
          borderColor = theme.colorScheme.primary;
          borderWidth = 2;
        } else {
          // Заполненные дни: цифра ВНУТРИ зеленого кружка с заливкой
          backgroundColor = const Color(0xFF87A96B); // Sage green
          textColor = Colors.white;
        }
      } else {
        if (isSelected) {
          // Выбранная незаполненная: серый кружок вокруг цифры
          backgroundColor = Colors.grey.shade300;
          textColor = theme.colorScheme.onSurface;
        } else {
          // Незаполненные доступные: просто цифра без индикации
          backgroundColor = Colors.transparent;
          textColor = theme.colorScheme.onSurface;
        }
      }
    }

    return Padding(
      padding: const EdgeInsets.all(2),
      child: InkWell(
        onTap: isInFuture ? null : () => _onDayTap(day),
        borderRadius: BorderRadius.circular(size / 2),
        child: Container(
          width: size,
          height: size,
          decoration: BoxDecoration(
            color: backgroundColor,
            borderRadius: BorderRadius.circular(size / 2),
            border: borderWidth > 0 
                ? Border.all(color: borderColor!, width: borderWidth)
                : null,
          ),
          child: Center(
            child: Text(
              day.day.toString(),
              style: theme.textTheme.bodyMedium?.copyWith(
                color: textColor,
                fontWeight: FontWeight.w500,
                fontSize: isSmallScreen ? 12 : 14,
              ),
            ),
          ),
        ),
      ),
    );
  }

  /// Проверяет, является ли день сегодняшним
  bool _isToday(DateTime day) {
    final today = DateTime.now();
    final normalizedToday = DateTime(today.year, today.month, today.day);
    final normalizedDay = DateTime(day.year, day.month, day.day);
    return normalizedDay == normalizedToday;
  }
}
</file>

<file path="lib/utils/parameter_icons.dart">
import 'package:flutter/material.dart';
import '../models/parameter.dart';

/// Система иконок для параметров - содержит все иконки для пресет параметров
class ParameterIcons {
  /// Карта иконок для пресет параметров
  static const Map<String, IconData> presetIcons = {
    'bedtime': Icons.bedtime,
    'medication': Icons.medication,
    'work': Icons.work,
    'fitness_center': Icons.fitness_center,
    'directions_walk': Icons.directions_walk,
    'people': Icons.people,
    'sentiment_satisfied': Icons.sentiment_satisfied,
    'favorite': Icons.favorite,
    'star': Icons.star,
    'restaurant': Icons.restaurant,
    'attach_money': Icons.attach_money,
    'public': Icons.public,
    'thumb_up': Icons.thumb_up,
    'edit_note': Icons.edit_note,
    'book': Icons.book,
  };
  
  /// Дефолтная иконка для пользовательских параметров
  static const IconData defaultIcon = Icons.analytics;
  
  /// Возвращает иконку для параметра
  static IconData getIcon(Parameter parameter) {
    if (parameter.isPreset && parameter.iconName != null) {
      return presetIcons[parameter.iconName!] ?? defaultIcon;
    }
    return defaultIcon; // Дефолтная иконка для пользовательских параметров
  }
  
  /// Возвращает иконку по названию (для отладки)
  static IconData getIconByName(String? iconName) {
    if (iconName == null) return defaultIcon;
    return presetIcons[iconName] ?? defaultIcon;
  }
  
  /// Возвращает все доступные иконки для выбора (для создания пользовательских параметров)
  static Map<String, IconData> getAllAvailableIcons() {
    return {
      ...presetIcons,
      'analytics': Icons.analytics,
      'tune': Icons.tune,
      'settings': Icons.settings,
      'info': Icons.info,
      'track_changes': Icons.track_changes,
      'trending_up': Icons.trending_up,
      'assessment': Icons.assessment,
      'bar_chart': Icons.bar_chart,
      'pie_chart': Icons.pie_chart,
      'show_chart': Icons.show_chart,
    };
  }
  
  /// Возвращает цвет иконки в зависимости от типа параметра
  static Color getIconColor(Parameter parameter, ColorScheme colorScheme) {
    if (parameter.isPreset) {
      // Для пресет параметров используем основной цвет темы
      return colorScheme.primary;
    } else {
      // Для пользовательских параметров используем вторичный цвет
      return colorScheme.secondary;
    }
  }
  
  /// Возвращает цвет фона для иконки
  static Color getIconBackgroundColor(Parameter parameter, ColorScheme colorScheme) {
    if (parameter.isPreset) {
      // Для пресет параметров используем контейнер основного цвета
      return colorScheme.primaryContainer;
    } else {
      // Для пользовательских параметров используем контейнер вторичного цвета  
      return colorScheme.secondaryContainer;
    }
  }
  
  /// Создает виджет иконки для параметра с правильными цветами
  static Widget buildParameterIcon(
    Parameter parameter, 
    BuildContext context, {
    double size = 24.0,
    double padding = 12.0,
  }) {
    final colorScheme = Theme.of(context).colorScheme;
    
    return Container(
      padding: EdgeInsets.all(padding),
      decoration: BoxDecoration(
        color: getIconBackgroundColor(parameter, colorScheme),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Icon(
        getIcon(parameter),
        color: getIconColor(parameter, colorScheme),
        size: size,
      ),
    );
  }
  
  /// Создает компактную иконку без фона (для использования в списках)
  static Widget buildCompactIcon(
    Parameter parameter, 
    BuildContext context, {
    double size = 20.0,
  }) {
    final colorScheme = Theme.of(context).colorScheme;
    
    return Icon(
      getIcon(parameter),
      color: getIconColor(parameter, colorScheme),
      size: size,
    );
  }
}
</file>

<file path="analysis_options.yaml">
# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
</file>

<file path="app.html">
<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>BioLogger Dashboard</title>
<script src="https://cdn.tailwindcss.com"></script>
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&amp;display=swap" rel="stylesheet"/>
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"/>
<style>
        body {
            font-family: 'Roboto', sans-serif;
            min-height: max(884px, 100dvh);
        }
        .bg-cream {
            background-color: #FAF7F0;
        }
        .text-charcoal {
            color: #2C3E3D;
        }
        .bg-sage-green {
            background-color: #87A96B;
        }
        .text-sage-green {
            color: #87A96B;
        }
        .border-sage-green {
            border-color: #87A96B;
        }
        .bg-soft-gradient {
            background-image: linear-gradient(to bottom, #FAF7F0, #FDFBF5);
        }
        .bg-header-gradient {
            background-image: linear-gradient(135deg, #87A96B, #5E8C6A);
        }
        .soft-shadow {
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        }
        .bg-success {
             background-color: #87A96B;}
        .bg-current-day {
            background-color: #A9A9A9;}
    </style>
<style>
    body {
      min-height: max(884px, 100dvh);
    }
  </style>
  </head>
<body class="bg-cream text-charcoal">
<div class="flex flex-col min-h-screen">
<header class="bg-header-gradient text-white p-6 text-center rounded-b-3xl">
<div class="flex justify-between items-center text-xs">
<span>6:05</span>
<div class="flex items-center space-x-1">
<span class="material-icons text-base">signal_cellular_alt</span>
<span class="material-icons text-base">wifi</span>
<span class="material-icons text-base">battery_full</span>
</div>
</div>
<div class="flex flex-col items-center justify-center mt-4">
<div class="bg-white/20 p-4 rounded-full mb-4">
<span class="material-icons text-4xl text-white">shield</span>
</div>
<h1 class="text-4xl font-bold">BioLogger</h1>
</div>
</header>
<main class="flex-grow p-6 flex flex-col">
<div class="bg-white rounded-2xl p-6 soft-shadow flex-grow">
<div class="flex justify-between items-center mb-4">
<button class="text-charcoal"><span class="material-icons">chevron_left</span></button>
<h2 class="text-xl font-bold text-charcoal">August 2024</h2>
<button class="text-charcoal"><span class="material-icons">chevron_right</span></button>
</div>
<div class="grid grid-cols-7 gap-1 text-center text-sm text-gray-500 mb-2">
<span>Mo</span><span>Tu</span><span>We</span><span>Th</span><span>Fr</span><span>Sa</span><span>Su</span>
</div>
<div class="grid grid-cols-7 gap-2 text-center">
<div class="text-gray-400">29</div>
<div class="text-gray-400">30</div>
<div class="text-gray-400">31</div>
<div class="relative">1<div class="absolute bottom-0 left-1/2 -translate-x-1/2 w-1.5 h-1.5 bg-success rounded-full"></div></div>
<div class="relative">2<div class="absolute bottom-0 left-1/2 -translate-x-1/2 w-1.5 h-1.5 bg-success rounded-full"></div></div>
<div class="relative">3<div class="absolute bottom-0 left-1/2 -translate-x-1/2 w-1.5 h-1.5 bg-success rounded-full"></div></div>
<div class="relative">4<div class="absolute bottom-0 left-1/2 -translate-x-1/2 w-1.5 h-1.5 bg-success rounded-full"></div></div>
<div class="relative">5<div class="absolute bottom-0 left-1/2 -translate-x-1/2 w-1.5 h-1.5 bg-success rounded-full"></div></div>
<div class="relative">6<div class="absolute bottom-0 left-1/2 -translate-x-1/2 w-1.5 h-1.5 bg-success rounded-full"></div></div>
<div class="relative">7<div class="absolute bottom-0 left-1/2 -translate-x-1/2 w-1.5 h-1.5 bg-success rounded-full"></div></div>
<div class="relative">8<div class="absolute bottom-0 left-1/2 -translate-x-1/2 w-1.5 h-1.5 bg-success rounded-full"></div></div>
<div class="bg-current-day text-white rounded-full w-8 h-8 flex items-center justify-center mx-auto">9</div>
<div class="text-gray-400 cursor-not-allowed">10</div>
<div class="text-gray-400 cursor-not-allowed">11</div>
<div class="text-gray-400 cursor-not-allowed">12</div>
<div class="text-gray-400 cursor-not-allowed">13</div>
<div class="text-gray-400 cursor-not-allowed">14</div>
<div class="text-gray-400 cursor-not-allowed">15</div>
<div class="text-gray-400 cursor-not-allowed">16</div>
<div class="text-gray-400 cursor-not-allowed">17</div>
<div class="text-gray-400 cursor-not-allowed">18</div>
<div class="text-gray-400 cursor-not-allowed">19</div>
<div class="text-gray-400 cursor-not-allowed">20</div>
<div class="text-gray-400 cursor-not-allowed">21</div>
<div class="text-gray-400 cursor-not-allowed">22</div>
<div class="text-gray-400 cursor-not-allowed">23</div>
<div class="text-gray-400 cursor-not-allowed">24</div>
<div class="text-gray-400 cursor-not-allowed">25</div>
<div class="text-gray-400 cursor-not-allowed">26</div>
<div class="text-gray-400 cursor-not-allowed">27</div>
<div class="text-gray-400 cursor-not-allowed">28</div>
<div class="text-gray-400 cursor-not-allowed">29</div>
<div class="text-gray-400 cursor-not-allowed">30</div>
<div class="text-gray-400 cursor-not-allowed">31</div>
<div class="text-gray-400">1</div>
</div>
<div class="mt-6 pt-6 border-t border-gray-200 flex justify-around text-center">
<div>
<p class="text-2xl font-bold text-sage-green">8</p>
<p class="text-xs text-gray-500">Consecutive Days Logged</p>
</div>
<div>
<p class="text-2xl font-bold text-sage-green">8</p>
<p class="text-xs text-gray-500">Days Logged this Month</p>
</div>
</div>
</div>
<button class="w-full bg-sage-green text-white font-bold py-3 px-4 rounded-full shadow-md hover:bg-opacity-90 transition-all duration-300 flex items-center justify-center mt-6">
<span class="material-icons mr-2">add_circle_outline</span>
                Log Data
            </button>
</main>
<footer class="bg-white/80 backdrop-blur-sm border-t border-gray-200 p-2 mt-auto">
<div class="flex justify-around">
<a class="flex flex-col items-center text-sage-green p-2" href="#">
<span class="material-icons">dashboard</span>
<span class="text-xs">Dashboard</span>
</a>
<a class="flex flex-col items-center text-gray-500 p-2" href="#">
<span class="material-icons">add_task</span>
<span class="text-xs">Log</span>
</a>
<a class="flex flex-col items-center text-gray-500 p-2" href="#">
<span class="material-icons">analytics</span>
<span class="text-xs">Data</span>
</a>
<a class="flex flex-col items-center text-gray-500 p-2" href="#">
<span class="material-icons">settings</span>
<span class="text-xs">Settings</span>
</a>
</div>
</footer>
</div>

</body></html>
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 Daniil Lotochkov

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="test_integration_manual.md">
# Тестовый план интеграции календарного редизайна

## Полный цикл работы

### ✅ 1. Запуск приложения
- [x] Приложение открывается с календарным интерфейсом
- [x] Отображается календарь текущего месяца (август 2025)
- [x] Видны счетчики: 🔥 дни подряд и 📅 дни в месяце
- [x] Кнопка показывает корректное состояние для сегодняшнего дня

### ✅ 2. Календарный интерфейс
- [x] Календарь показывает 6 недель (42 дня)
- [x] Заполненные дни отмечены зелеными кружками с заливкой
- [x] Незаполненные дни - зеленые кружки без заливки
- [x] Будущие дни недоступны (серые)
- [x] Сегодняшний день имеет тень (выбран)

### 🔄 3. Тестовый сценарий: выбор даты в прошлом
**Цель**: Проверить переход на ввод данных для незаполненного дня

**Шаги**:
1. Выбрать дату в прошлом без данных (например, 5 августа)
2. Проверить автопереход на вкладку "Ввод"
3. Проверить отображение даты в заголовке "Ввод данных за 05.08.2025"
4. Ввести данные для всех параметров
5. Нажать "Сохранить" на последнем параметре
6. Проверить автовозврат на главную
7. Проверить обновление календаря (день стал заполненным)
8. Проверить обновление счетчиков

**Ожидаемый результат**: 
- Дата стала заполненной (зеленый кружок с заливкой)
- Счетчики обновились
- Кнопка теперь показывает "Посмотреть данные"

### 🔄 4. Тестовый сценарий: просмотр заполненного дня
**Цель**: Проверить переход для просмотра уже заполненного дня

**Шаги**:
1. Выбрать заполненный день (например, 9 августа)
2. Проверить кнопку "Посмотреть данные"
3. Нажать кнопку
4. Проверить переход на вкладку "Ввод"
5. Проверить отображение существующих данных
6. Проверить возможность редактирования
7. Сохранить изменения
8. Проверить возврат на главную

### 🔄 5. Тестовый сценарий: навигация по месяцам
**Цель**: Проверить работу календаря в разных месяцах

**Шаги**:
1. Нажать стрелку "назад" для перехода к июлю
2. Проверить обновление заголовка "Календарь за июле"
3. Проверить обновление счетчика месяца
4. Проверить, что дни подряд не изменились
5. Выбрать дату в июле
6. Ввести данные
7. Вернуться к августу
8. Проверить обновление счетчиков

### ✅ 6. Интеграция с навигацией
- [x] При нажатии "Ввод" в навигации устанавливается текущая дата
- [x] При выборе даты в календаре происходит автопереход на "Ввод"
- [x] После сохранения происходит автовозврат на "Главная"
- [x] Состояние вкладок сохраняется при переключении

## Результаты

### Статус: 🟡 В процессе тестирования

**Завершенные интеграции:**
- ✅ DataEntryController синхронизация с HomeController
- ✅ Отображение выбранной даты в заголовке экрана ввода  
- ✅ Reactive обновление после сохранения данных
- ✅ Навигация между экранами через NavigationController
- ✅ Кнопка возврата в AppBar экрана ввода

**Требует проверки:**
- 🔄 Полный цикл календарь → ввод → сохранение → возврат
- 🔄 Обновление счетчиков в реальном времени
- 🔄 Работа с разными месяцами
- 🔄 Корректность отображения состояний кнопки

## Команды для тестирования

```bash
# Запуск приложения
flutter run --debug

# Hot reload для применения изменений
r (в терминале flutter)

# Проверка анализа кода
flutter analyze

# Запуск тестов
flutter test
```
</file>

<file path="test.html">
<html>
  <head>
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
    <link
      rel="stylesheet"
      as="style"
      onload="this.rel='stylesheet'"
      href="https://fonts.googleapis.com/css2?display=swap&amp;family=Manrope%3Awght%40400%3B500%3B700%3B800&amp;family=Noto+Sans%3Awght%40400%3B500%3B700%3B900"
    />

    <title>Stitch Design</title>
    <link rel="icon" type="image/x-icon" href="data:image/x-icon;base64," />

    <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
  </head>
  <body>
    <div class="relative flex size-full min-h-screen flex-col bg-white justify-between group/design-root overflow-x-hidden" style='font-family: Manrope, "Noto Sans", sans-serif;'>
      <div>
        <div class="flex items-center bg-white p-4 pb-2 justify-between">
          <div class="text-[#141613] flex size-12 shrink-0 items-center" data-icon="ArrowLeft" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path d="M224,128a8,8,0,0,1-8,8H59.31l58.35,58.34a8,8,0,0,1-11.32,11.32l-72-72a8,8,0,0,1,0-11.32l72-72a8,8,0,0,1,11.32,11.32L59.31,120H216A8,8,0,0,1,224,128Z"></path>
            </svg>
          </div>
          <h2 class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em] flex-1 text-center pr-12">Log</h2>
        </div>
        <h2 class="text-[#141613] text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">Monday, July 15</h2>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuCLDUZ1hovw0_HRJ0DCa1sq7lyuiZxhUoImE7Czn_73TfDXTLdHkwd8_YyAPYZkPgLf4EaL775FQOUPH3inZVpKuRS6cSYW_exFmQDfimKSDN2dd3dcv3_fGsq19B3V4np5sGZ_E7wOWIMoi7nknZi7d3t3JuHa69SySBlMIWiXlWzVgyVUA2k4XhEm4RzJSkyF_5c3JCA87kUupVv8_sHfepM2zX8D7Y5UycLQhXAk5Ko13rv33sanv7ALG7qprPosXK6N_8G3lLA");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Sleep</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Enter hours of sleep</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuCokItnUV2BKZBSP6gMgLCYlKKdkPS3tkODumqZtO4HZxey1SpiqI5wznOq6_28Ij5wEBm9mDHNAYAxNPYefOBj9TikWkGPzvPv0SrkD9FhnL20DcCCmrJziYMHbXILVWP6OK_fScXJGmGL6NIGu9--p9eCUdNESK_vTTVwXYQT_kzPmmNh_T_tJTghig7AgxqLTuuU_sIAzao-g9BZLsyAweKaRwLAIaLjzhsri0JuHcrR0G80d0j9Qqe54QSSwuNAZ43_2GYWdIc");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Exercise</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Enter minutes of exercise</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuD9xDnj08A8jRwC4y_VjjSwnwtiImwoQLmi0y4LlYbfacQHL63tt0lPGIl4y8BvqCCDUGNqg6bRCf5FD13oIE9S33FFu9M-hmmGTReDn3zpJbBGh8AgTTF22RwVlWxBAjRWYy8yYgAsQzDQVwIkSviDxe2u3hBAPwmrAgdkmQpBkNNlmIY4XMumR3X2of7VWii4XaE0B1Nt_wmGMtYfqp5_guw__35tF_n7swNmmev2N7dKmiTSCTUr_S8nWOsub1mI3l-29yjpfXs");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Nutrition</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Enter calories consumed</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuA28hphXhpespzWyfA08GyqUT_YJhnbl22PCg_HB_PFLpS1HwrsFTgB4n-a4x3VUQ0vcB3vzWQA_8HdCfyF76A9UtJWeTJ3hf4Zqb10p4PretkVc44uxPRjv2DJSAxrH5s-5_eYbftxjNjv6c8JSXv0WkMgRi_A6W-CCb3LYoZu0YGmTyw5cS0_r3b9Y2_l9gaON4XZ4pJ-h-B3rqK1VrJt2asu2NR_gtLf27kqYCj8qdj3NFZ7y2n_f_do9cRJyeaWw6DrhqCcTR8");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Mood</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Enter your mood</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuDnHJGb7TqQuP5me-m3mgLLraWPsbSRo_hwdyzOA0t5qoIFJ_K6iDwk_uWhN2aENIzYKUv8UweTb-HpytY48zpeM9cBGPeNmWsP8wu8KSPcOzVdw1Ws-A_onMy6KA7vCyIseElOR0Aoi0i3spqiYBAqUNcuhhfJGvwta4NpOgcnkp5VmEZNLjyrLtuL6RBL_rt5hIwZlRwh4qgZlz_W76q8_XsMgS02MfLb9VHHCeE3bFdX28HR6e3BFGRYxAqPWhVztJFlfLHcEq0");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Supplements</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Enter supplements taken</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuD3fQvncV8gL5BeBSLE0AqmMSOyfXsrellecDzZ_rcB9T_YcGt_xlMYLjKFxHy5Ig40zK5XezjF7Fko1NQj3ndoh_3tTzwARG6qDRAd5mQyEYThpLIG4pS9DVfKt4W70DrofuBZKBxsGMHSlgjLLTt0-N7UjvrY5XCP0aV_aRwRBRYay_-GqA2q8g4DmWh9Q892AjdDVRSVOT_UKY7XXo9Oo6MhlTSqahcrZjuIaqVFemqFdmRgJpPfu3MBy8GmHRHKhDPjWv_USJo");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Work Quality</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Rate your work quality (1-10)</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuAmtRnzGpUa54nZ6-cbebsGS3fdrso0ZwjESuOH3CzgQ8qNqmBFHPUmkifBTW3CuN6TZOfucDCRPSsKr052sogS57maUVBoQBE73cVPXnwA-3gWXInRzFPYHAqdWZKC7b4s_WQHOkm7v80qGSh_PoN9uEYuks-HlkU6HTjKr8tVgNfBN3XTnCqrSfSgCHAxsoUZe2qsZc__0T75iwPkdz4Rxw8PWSGZ3WQwcAMCWlsp14YnTdHMv9MJduzfZ49qH3v1md55dXQ2-uI");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Workout</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Enter workout details</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuATcRUXAm1devlgtIK7ids7gCbBd_CdiXPGPpU9ANmYJdlheiK5xIl37uOBvqqxw4JVnZAh_3kkBmturul2H_Nt-CrHklq6h8mn55CcqjrLLMIJV9rxBhPgW3Hh7IwHQgl7jKdULLXqCJn-i8bQ5rzMJKZYkof2yKtpbQJpsiyTWvxgjH1q8qPEc_AcUTAkwMK91Nf76zl5DNtKUF_pHaSa-jlEwHF2t3buuT0v1eRwmi-ukJ4motN3nXbvOZ3FEIh_ujbRPnYWmTg");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Step Count</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Enter your step count</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuCe7ckix6t63BbD2uNWT-muxaRQL3Jhm2Um6tEmJJj9PJKHur7zZ8r_2v2tSJT00CwR_KmPgeFcXvAOksfFlIkyns2_UalPxUwMRepqfHqaWL_DLRAf5DFhDw7a8_nR9q_hbdor_f2kw1pS_aw4hB1qiSrD0AIqvmXYE3hcoUCNz-uMy4QnieqaiQhAni3u7arutVXKCRik5QP8yhRmO8xMqEP_PiFcRdghNACFXHa9y0MJQ0AiO2ihEDLOoO-VHAcbMdg6gA0zEwY");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Social Interaction</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Rate your social interaction (1-10)</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuDfL3MogzIo1JhSRe5fBSVfvrWs4jhf7dOcPLBnMMV1_2sLEjXrGpWDaCuhZu6XLvAfHHkIrCax4lVgX8lMTWWd-1OAJTTu4wcJnEXLmHqxVuTij_O9gluw_WpeQ9vKsl_jdDUoWR-yftbnHYGx8jJPl2NplCqeW0cQ-1eoOZ0O1EdpwcCtSX5Q8I-0xo7su9VdJEG2enWr9NvSynPv8wHNTErR0m-VnNwJfAd3T5Ump9x1aXKnAIO0pkT_PGhnDyMBgyyfJ27j1LM");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Self-Attractiveness</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Rate your self-attractiveness (1-10)</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuAUjosI4UvJarnvo-lnLxHsM4Dgb1CDilffLE9FUoPDOPPWqEc4K4T5bqg62oyxPVZ3cesf0DtwMy_nTPOUkHaNyDygu2NUP1xtjiF1GDDZeY0T456HTdyFmiMjuSenymSFKmOfZnEYQLNxZVXgxz9t0wGY0ww-J7pFLWBlkRqENp6eiHlc_f5v9V3V64spwha2DyPz095FyooY94acjxygpjmuoDLCOis8Rd7pPLgd_3TtprLotphkxg-iAau19DTDTiJTTVFDBMo");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Self-Fulfillment</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Rate your self-fulfillment (1-10)</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuBnoDXU6WPcMSu2cDNkpF0jBGccYng8RXR7bPyeLyqsu6HuIoPZCCt8a5xIs8pwezfNmBhdxFgDyaNHX09CgyQmC6pSCMBJXcu0FStdqdY1PYFXBXgPKB_V5L9uwRqCSCzyfnqp2Ps6KAre8LMdpqrVDdKfCGaTmJu-VbbS6Zk0Few5Z2Fsy3m1dQvG-x-tTUHhRKmaJm5ioJxRNFotao39INNb97f0xApRkPnsk01isZzhOdML2KPGWxdCMMYhN11gkXXWSosgcu8");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Nutrition Quality</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Rate your nutrition quality (1-10)</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuC-sAJoGpxwREtFR79ty61I3lXph5T17t_hfjEqnPp3_0UJ4pATbQNi1AtcKyMPz1nyQw1cqiZ8nzoCteMT-18HMfsdkXvZ3IijpnAX2zHgxEaHLygg7GiEkahuXF7pOKe_E9xw75t3pSUwv5TU5_-VIrtyzfK-ig1rN7ZphS6EZ6aJux3mVdBpUZ5SC9J8TiNSPMThNaGY5iJ-E7xvFhdNRBQf-S5zrrUb6_vNFoFC48UKXW3qGj1u-QBpnAblwcPPr97YzA3VGac");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Current Finances</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Rate your current finances (1-10)</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuAyK7VkoYUg3AIEgD490rROdSSQQpa3VPhDL98Vwmen_gnbAavcO87tLnCRQyMFZ3wtzJW4-FU6fjO_6JWaeHWKrd2mgXc4YdVmnKDeUn-rjALwDb03Uc2WgXk3_ECTNuu0XrylG5dIgkpereX0jcB_YXuKm1u9sLh8kIEXOv-r6uHbNKk_6tJgGvUorWSyg9tYe2G4A8MeoNaWJNOV7EzIPwajECPlzgn2RKe17X1xM65_xAThHJ893KPHWXp243rccdseGodRypU");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Social Impact</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Rate your social impact (1-10)</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuCcBntVEDZgjOMUqlaR7_R0fWlT485122g9-ZFzoPQGM9dQanQtSAhKsDY0kONPsQNSU1AlJ5NYoJjFuTVsDo1KLDjO4qNY_Wl7k8BD8Z5yQOxBrb2GGDfAtTIRUs0RBoH55ginvt701FhoAxlWBqX4dgOVSQc1YI7P8UZmg8072JK7bxy4JzIkyxwvqLbpyb_k5enwP3ICF6b4Dnw1Gb7r6lY8F7lvavqnJJIGV-ULv1eaDaXa4WzPpb0grYuFH-yQtj2MsqYdOLs");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Daily Rating</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Rate your day (1-10)</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuD3MVX6BGCSCLjReq7nfVtNdPqgHGqlk2ChKoxgJecE0y9-xgbgjlXDtHP5wKkgdOemjXQpfjPSw7gUwxHKme30kgfCpQrjw8nht9-hux39hshWYSNxcRI4Zex8j5R0Njn4w7jgCzZoxKIqzgcDv8Wpf7EfHXWP6Mx7GeLh11Dz2ffnX1We9NTJ004q3iBgLTfgJGg09h62Hebuoo4ZnJiS5sSK-KoEr4rLme53akvulfhDsya7Jc51n9QZscZaBPDWFvcRY0GGQwU");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Reason for Rating</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Enter reason for rating</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="p-4 @container">
          <div class="flex flex-col items-stretch justify-start rounded-xl @xl:flex-row @xl:items-start">
            <div
              class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl"
              style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuDDBsNslyQF5qMaefSCc7vo6QaqdDZEQE58y2Ai4Rqt3Gey4gAcl9G2KMCp37-sG_J3SsilBqsmzVCr3f6CXoqZHGaypCqJ-b_oHlH4Nl0XjWmh2rr_q9Mxzom3shExNGq5OzktgI2M9cGppiKcU6Ljuctknv33plh5DaUcucGNZHFPNH2eCa1smlpiA4oi5GiD-QCjsxh2QCMOsSeLBnB3AhAlSD3VlOm9P_pLHGZvUjGvGpXFlWiTuP_bU7KoXcilJvXkdKbh-FE");'
            ></div>
            <div class="flex w-full min-w-72 grow flex-col items-stretch justify-center gap-1 py-4 @xl:px-4">
              <p class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em]">Daily Memories</p>
              <div class="flex items-end gap-3 justify-between">
                <p class="text-[#757c6e] text-base font-normal leading-normal">Enter daily memories</p>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 bg-[#86ad67] text-[#141613] text-sm font-medium leading-normal"
                >
                  <span class="truncate">Next</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div>
        <div class="flex px-4 py-3">
          <button
            class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-10 px-4 flex-1 bg-[#86ad67] text-[#141613] text-sm font-bold leading-normal tracking-[0.015em]"
          >
            <span class="truncate">Save</span>
          </button>
        </div>
        <div class="flex gap-2 border-t border-[#f2f3f1] bg-white px-4 pb-3 pt-2">
          <a class="just flex flex-1 flex-col items-center justify-end gap-1 text-[#757c6e]" href="#">
            <div class="text-[#757c6e] flex h-8 items-center justify-center" data-icon="House" data-size="24px" data-weight="regular">
              <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                  d="M218.83,103.77l-80-75.48a1.14,1.14,0,0,1-.11-.11,16,16,0,0,0-21.53,0l-.11.11L37.17,103.77A16,16,0,0,0,32,115.55V208a16,16,0,0,0,16,16H96a16,16,0,0,0,16-16V160h32v48a16,16,0,0,0,16,16h48a16,16,0,0,0,16-16V115.55A16,16,0,0,0,218.83,103.77ZM208,208H160V160a16,16,0,0,0-16-16H112a16,16,0,0,0-16,16v48H48V115.55l.11-.1L128,40l79.9,75.43.11.1Z"
                ></path>
              </svg>
            </div>
            <p class="text-[#757c6e] text-xs font-medium leading-normal tracking-[0.015em]">Home</p>
          </a>
          <a class="just flex flex-1 flex-col items-center justify-end gap-1 rounded-full text-[#141613]" href="#">
            <div class="text-[#141613] flex h-8 items-center justify-center" data-icon="ListBullets" data-size="24px" data-weight="fill">
              <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                  d="M56,128a16,16,0,1,1-16-16A16,16,0,0,1,56,128ZM40,48A16,16,0,1,0,56,64,16,16,0,0,0,40,48Zm0,128a16,16,0,1,0,16,16A16,16,0,0,0,40,176Zm176-64H88a8,8,0,0,0-8,8v16a8,8,0,0,0,8,8H216a8,8,0,0,0,8-8V120A8,8,0,0,0,216,112Zm0-64H88a8,8,0,0,0-8,8V72a8,8,0,0,0,8,8H216a8,8,0,0,0,8-8V56A8,8,0,0,0,216,48Zm0,128H88a8,8,0,0,0-8,8v16a8,8,0,0,0,8,8H216a8,8,0,0,0,8-8V184A8,8,0,0,0,216,176Z"
                ></path>
              </svg>
            </div>
            <p class="text-[#141613] text-xs font-medium leading-normal tracking-[0.015em]">Log</p>
          </a>
          <a class="just flex flex-1 flex-col items-center justify-end gap-1 text-[#757c6e]" href="#">
            <div class="text-[#757c6e] flex h-8 items-center justify-center" data-icon="ChartLine" data-size="24px" data-weight="regular">
              <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                  d="M232,208a8,8,0,0,1-8,8H32a8,8,0,0,1-8-8V48a8,8,0,0,1,16,0v94.37L90.73,98a8,8,0,0,1,10.07-.38l58.81,44.11L218.73,90a8,8,0,1,1,10.54,12l-64,56a8,8,0,0,1-10.07.38L96.39,114.29,40,163.63V200H224A8,8,0,0,1,232,208Z"
                ></path>
              </svg>
            </div>
            <p class="text-[#757c6e] text-xs font-medium leading-normal tracking-[0.015em]">Data</p>
          </a>
          <a class="just flex flex-1 flex-col items-center justify-end gap-1 text-[#757c6e]" href="#">
            <div class="text-[#757c6e] flex h-8 items-center justify-center" data-icon="Gear" data-size="24px" data-weight="regular">
              <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                  d="M128,80a48,48,0,1,0,48,48A48.05,48.05,0,0,0,128,80Zm0,80a32,32,0,1,1,32-32A32,32,0,0,1,128,160Zm88-29.84q.06-2.16,0-4.32l14.92-18.64a8,8,0,0,0,1.48-7.06,107.21,107.21,0,0,0-10.88-26.25,8,8,0,0,0-6-3.93l-23.72-2.64q-1.48-1.56-3-3L186,40.54a8,8,0,0,0-3.94-6,107.71,107.71,0,0,0-26.25-10.87,8,8,0,0,0-7.06,1.49L130.16,40Q128,40,125.84,40L107.2,25.11a8,8,0,0,0-7.06-1.48A107.6,107.6,0,0,0,73.89,34.51a8,8,0,0,0-3.93,6L67.32,64.27q-1.56,1.49-3,3L40.54,70a8,8,0,0,0-6,3.94,107.71,107.71,0,0,0-10.87,26.25,8,8,0,0,0,1.49,7.06L40,125.84Q40,128,40,130.16L25.11,148.8a8,8,0,0,0-1.48,7.06,107.21,107.21,0,0,0,10.88,26.25,8,8,0,0,0,6,3.93l23.72,2.64q1.49,1.56,3,3L70,215.46a8,8,0,0,0,3.94,6,107.71,107.71,0,0,0,26.25,10.87,8,8,0,0,0,7.06-1.49L125.84,216q2.16.06,4.32,0l18.64,14.92a8,8,0,0,0,7.06,1.48,107.21,107.21,0,0,0,26.25-10.88,8,8,0,0,0,3.93-6l2.64-23.72q1.56-1.48,3-3L215.46,186a8,8,0,0,0,6-3.94,107.71,107.71,0,0,0,10.87-26.25,8,8,0,0,0-1.49-7.06Zm-16.1-6.5a73.93,73.93,0,0,1,0,8.68,8,8,0,0,0,1.74,5.48l14.19,17.73a91.57,91.57,0,0,1-6.23,15L187,173.11a8,8,0,0,0-5.1,2.64,74.11,74.11,0,0,1-6.14,6.14,8,8,0,0,0-2.64,5.1l-2.51,22.58a91.32,91.32,0,0,1-15,6.23l-17.74-14.19a8,8,0,0,0-5-1.75h-.48a73.93,73.93,0,0,1-8.68,0,8,8,0,0,0-5.48,1.74L100.45,215.8a91.57,91.57,0,0,1-15-6.23L82.89,187a8,8,0,0,0-2.64-5.1,74.11,74.11,0,0,1-6.14-6.14,8,8,0,0,0-5.1-2.64L46.43,170.6a91.32,91.32,0,0,1-6.23-15l14.19-17.74a8,8,0,0,0,1.74-5.48,73.93,73.93,0,0,1,0-8.68,8,8,0,0,0-1.74-5.48L40.2,100.45a91.57,91.57,0,0,1,6.23-15L69,82.89a8,8,0,0,0,5.1-2.64,74.11,74.11,0,0,1,6.14-6.14A8,8,0,0,0,82.89,69L85.4,46.43a91.32,91.32,0,0,1,15-6.23l17.74,14.19a8,8,0,0,0,5.48,1.74,73.93,73.93,0,0,1,8.68,0,8,8,0,0,0,5.48-1.74L155.55,40.2a91.57,91.57,0,0,1,15,6.23L173.11,69a8,8,0,0,0,2.64,5.1,74.11,74.11,0,0,1,6.14,6.14,8,8,0,0,0,5.1,2.64l22.58,2.51a91.32,91.32,0,0,1,6.23,15l-14.19,17.74A8,8,0,0,0,199.87,123.66Z"
                ></path>
              </svg>
            </div>
            <p class="text-[#757c6e] text-xs font-medium leading-normal tracking-[0.015em]">Settings</p>
          </a>
        </div>
        <div class="h-5 bg-white"></div>
      </div>
    </div>
  </body>
</html>
</file>

<file path="values.html">
<html>
  <head>
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
    <link
      rel="stylesheet"
      as="style"
      onload="this.rel='stylesheet'"
      href="https://fonts.googleapis.com/css2?display=swap&amp;family=Manrope%3Awght%40400%3B500%3B700%3B800&amp;family=Noto+Sans%3Awght%40400%3B500%3B700%3B900"
    />

    <title>Stitch Design</title>
    <link rel="icon" type="image/x-icon" href="data:image/x-icon;base64," />

    <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
  </head>
  <body>
    <div class="relative flex size-full min-h-screen flex-col bg-white justify-between group/design-root overflow-x-hidden" style='font-family: Manrope, "Noto Sans", sans-serif;'>
      <div>
        <div class="flex items-center bg-white p-4 pb-2 justify-between">
          <div class="text-[#141613] flex size-12 shrink-0 items-center" data-icon="ArrowLeft" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path d="M224,128a8,8,0,0,1-8,8H59.31l58.35,58.34a8,8,0,0,1-11.32,11.32l-72-72a8,8,0,0,1,0-11.32l72-72a8,8,0,0,1,11.32,11.32L59.31,120H216A8,8,0,0,1,224,128Z"></path>
            </svg>
          </div>
          <h2 class="text-[#141613] text-lg font-bold leading-tight tracking-[-0.015em] flex-1 text-center pr-12">Log</h2>
        </div>
        <h2 class="text-[#141613] text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">Monday, July 15</h2>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="Moon" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M233.54,142.23a8,8,0,0,0-8-2,88.08,88.08,0,0,1-109.8-109.8,8,8,0,0,0-10-10,104.84,104.84,0,0,0-52.91,37A104,104,0,0,0,136,224a103.09,103.09,0,0,0,62.52-20.88,104.84,104.84,0,0,0,37-52.91A8,8,0,0,0,233.54,142.23ZM188.9,190.34A88,88,0,0,1,65.66,67.11a89,89,0,0,1,31.4-26A106,106,0,0,0,96,56,104.11,104.11,0,0,0,200,160a106,106,0,0,0,14.92-1.06A89,89,0,0,1,188.9,190.34Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Sleep</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">8 hours</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="Barbell" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M248,120h-8V88a16,16,0,0,0-16-16H208V64a16,16,0,0,0-16-16H168a16,16,0,0,0-16,16v56H104V64A16,16,0,0,0,88,48H64A16,16,0,0,0,48,64v8H32A16,16,0,0,0,16,88v32H8a8,8,0,0,0,0,16h8v32a16,16,0,0,0,16,16H48v8a16,16,0,0,0,16,16H88a16,16,0,0,0,16-16V136h48v56a16,16,0,0,0,16,16h24a16,16,0,0,0,16-16v-8h16a16,16,0,0,0,16-16V136h8a8,8,0,0,0,0-16ZM32,168V88H48v80Zm56,24H64V64H88V192Zm104,0H168V64h24V175.82c0,.06,0,.12,0,.18s0,.12,0,.18V192Zm32-24H208V88h16Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Exercise</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">60 minutes</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="Command" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M180,144H160V112h20a36,36,0,1,0-36-36V96H112V76a36,36,0,1,0-36,36H96v32H76a36,36,0,1,0,36,36V160h32v20a36,36,0,1,0,36-36ZM160,76a20,20,0,1,1,20,20H160ZM56,76a20,20,0,0,1,40,0V96H76A20,20,0,0,1,56,76ZM96,180a20,20,0,1,1-20-20H96Zm16-68h32v32H112Zm68,88a20,20,0,0,1-20-20V160h20a20,20,0,0,1,0,40Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Nutrition</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">2000 calories</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="Smiley" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24Zm0,192a88,88,0,1,1,88-88A88.1,88.1,0,0,1,128,216ZM80,108a12,12,0,1,1,12,12A12,12,0,0,1,80,108Zm96,0a12,12,0,1,1-12-12A12,12,0,0,1,176,108Zm-1.07,48c-10.29,17.79-27.4,28-46.93,28s-36.63-10.2-46.92-28a8,8,0,1,1,13.84-8c7.47,12.91,19.21,20,33.08,20s25.61-7.1,33.07-20a8,8,0,0,1,13.86,8Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Mood</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">Notes: Felt great! Today i was in the swimming po...</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="Pill" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M216.42,39.6a53.26,53.26,0,0,0-75.32,0L39.6,141.09a53.26,53.26,0,0,0,75.32,75.31h0L216.43,114.91A53.31,53.31,0,0,0,216.42,39.6ZM103.61,205.09h0a37.26,37.26,0,0,1-52.7-52.69L96,107.31,148.7,160ZM205.11,103.6,160,148.69,107.32,96l45.1-45.09a37.26,37.26,0,0,1,52.69,52.69ZM189.68,82.34a8,8,0,0,1,0,11.32l-24,24a8,8,0,1,1-11.31-11.32l24-24A8,8,0,0,1,189.68,82.34Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Supplements</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">Supplements: Vitamin D, Omega-3</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="Briefcase" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M216,56H176V48a24,24,0,0,0-24-24H104A24,24,0,0,0,80,48v8H40A16,16,0,0,0,24,72V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V72A16,16,0,0,0,216,56ZM96,48a8,8,0,0,1,8-8h48a8,8,0,0,1,8,8v8H96ZM216,72v41.61A184,184,0,0,1,128,136a184.07,184.07,0,0,1-88-22.38V72Zm0,128H40V131.64A200.19,200.19,0,0,0,128,152a200.25,200.25,0,0,0,88-20.37V200ZM104,112a8,8,0,0,1,8-8h32a8,8,0,0,1,0,16H112A8,8,0,0,1,104,112Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Work Quality</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">Work Quality: 8/10</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="PersonSimpleRun" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M152,88a32,32,0,1,0-32-32A32,32,0,0,0,152,88Zm0-48a16,16,0,1,1-16,16A16,16,0,0,1,152,40Zm67.31,100.68c-.61.28-7.49,3.28-19.67,3.28-13.85,0-34.55-3.88-60.69-20a169.31,169.31,0,0,1-15.41,32.34,104.29,104.29,0,0,1,31.31,15.81C173.92,186.65,184,207.35,184,232a8,8,0,0,1-16,0c0-41.7-34.69-56.71-54.14-61.85-.55.7-1.12,1.41-1.69,2.1-19.64,23.8-44.25,36.18-71.63,36.18A92.29,92.29,0,0,1,31.2,208,8,8,0,0,1,32.8,192c25.92,2.58,48.47-7.49,67-30,12.49-15.14,21-33.61,25.25-47C86.13,92.35,61.27,111.63,61,111.84A8,8,0,1,1,51,99.36c1.5-1.2,37.22-29,89.51,6.57,45.47,30.91,71.93,20.31,72.18,20.19a8,8,0,1,1,6.63,14.56Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Workout</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">Workout: 45 minutes of cardio</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="Footprints" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M208.06,184H152a8,8,0,0,0-8,8v12a36,36,0,0,0,72.05,0V192A8,8,0,0,0,208.06,184Zm-8,20a20,20,0,0,1-40,0v-4h40ZM104,160h-56a8,8,0,0,0-8,8v12A36,36,0,0,0,112,180V168A8,8,0,0,0,104,160Zm-8,20a20,20,0,0,1-40,0v-4H96ZM76,16C64.36,16,53.07,26.31,44.2,45c-13.93,29.38-18.56,73,.29,96a8,8,0,0,0,6.2,2.93h50.55a8,8,0,0,0,6.2-2.93c18.85-23,14.22-66.65.29-96C98.85,26.31,87.57,16,76,16ZM97.15,128H54.78c-11.4-18.1-7.21-52.7,3.89-76.11C65.14,38.22,72.17,32,76,32s10.82,6.22,17.3,19.89C104.36,75.3,108.55,109.9,97.15,128Zm57.61,40h50.55a8,8,0,0,0,6.2-2.93c18.85-23,14.22-66.65.29-96C202.93,50.31,191.64,40,180,40s-22.89,10.31-31.77,29c-13.93,29.38-18.56,73,.29,96A8.05,8.05,0,0,0,154.76,168Zm8-92.11C169.22,62.22,176.25,56,180,56s10.82,6.22,17.29,19.89c11.1,23.41,15.29,58,3.9,76.11H158.85C147.45,133.9,151.64,99.3,162.74,75.89Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Step Count</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">Step Count: 10,000</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="Users" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M117.25,157.92a60,60,0,1,0-66.5,0A95.83,95.83,0,0,0,3.53,195.63a8,8,0,1,0,13.4,8.74,80,80,0,0,1,134.14,0,8,8,0,0,0,13.4-8.74A95.83,95.83,0,0,0,117.25,157.92ZM40,108a44,44,0,1,1,44,44A44.05,44.05,0,0,1,40,108Zm210.14,98.7a8,8,0,0,1-11.07-2.33A79.83,79.83,0,0,0,172,168a8,8,0,0,1,0-16,44,44,0,1,0-16.34-84.87,8,8,0,1,1-5.94-14.85,60,60,0,0,1,55.53,105.64,95.83,95.83,0,0,1,47.22,37.71A8,8,0,0,1,250.14,206.7Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Social Interaction</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">Social Interaction: 7/10</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="Smiley" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24Zm0,192a88,88,0,1,1,88-88A88.1,88.1,0,0,1,128,216ZM80,108a12,12,0,1,1,12,12A12,12,0,0,1,80,108Zm96,0a12,12,0,1,1-12-12A12,12,0,0,1,176,108Zm-1.07,48c-10.29,17.79-27.4,28-46.93,28s-36.63-10.2-46.92-28a8,8,0,1,1,13.84-8c7.47,12.91,19.21,20,33.08,20s25.61-7.1,33.07-20a8,8,0,0,1,13.86,8Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Mood</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">Mood: Happy</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div
            class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12"
            data-icon="MagnifyingGlassMinus"
            data-size="24px"
            data-weight="regular"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M152,112a8,8,0,0,1-8,8H80a8,8,0,0,1,0-16h64A8,8,0,0,1,152,112Zm77.66,117.66a8,8,0,0,1-11.32,0l-50.06-50.07a88.11,88.11,0,1,1,11.31-11.31l50.07,50.06A8,8,0,0,1,229.66,229.66ZM112,184a72,72,0,1,0-72-72A72.08,72.08,0,0,0,112,184Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Self-Attractiveness</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">Self-Attractiveness: 6/10</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="Star" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M239.2,97.29a16,16,0,0,0-13.81-11L166,81.17,142.72,25.81h0a15.95,15.95,0,0,0-29.44,0L90.07,81.17,30.61,86.32a16,16,0,0,0-9.11,28.06L66.61,153.8,53.09,212.34a16,16,0,0,0,23.84,17.34l51-31,51.11,31a16,16,0,0,0,23.84-17.34l-13.51-58.6,45.1-39.36A16,16,0,0,0,239.2,97.29Zm-15.22,5-45.1,39.36a16,16,0,0,0-5.08,15.71L187.35,216v0l-51.07-31a15.9,15.9,0,0,0-16.54,0l-51,31h0L82.2,157.4a16,16,0,0,0-5.08-15.71L32,102.35a.37.37,0,0,1,0-.09l59.44-5.14a16,16,0,0,0,13.35-9.75L128,32.08l23.2,55.29a16,16,0,0,0,13.35,9.75L224,102.26S224,102.32,224,102.33Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Self-Fulfillment</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">Self-Fulfillment: 9/10</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="Carrot" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M232,64H203.31l26.35-26.34a8,8,0,0,0-11.32-11.32L192,52.69V24a8,8,0,0,0-16,0V56.57a64,64,0,0,0-77.2,10.12l0,0,0,0,0,0c-40.1,39.39-70.25,133.08-73.19,142.45a16,16,0,0,0,21.26,21.26c9.37-2.94,103.18-33.13,142.47-73.21A64,64,0,0,0,199.43,80H232a8,8,0,0,0,0-16Zm-54.12,82c-8.94,9.12-21.25,17.8-34.85,25.73l-25.38-25.39a8,8,0,0,0-11.32,11.32l22.09,22.09c-40.87,21.19-86.32,35.42-87,35.63A7.93,7.93,0,0,0,40,216a7.93,7.93,0,0,0,.59-1.41c.29-.93,28-89.58,64-130.67l33.77,33.77a8,8,0,0,0,11.32-11.32L116.18,72.88A48,48,0,0,1,177.88,146Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Nutrition Quality</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">Nutrition Quality: 8/10</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="CurrencyDollar" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M152,120H136V56h8a32,32,0,0,1,32,32,8,8,0,0,0,16,0,48.05,48.05,0,0,0-48-48h-8V24a8,8,0,0,0-16,0V40h-8a48,48,0,0,0,0,96h8v64H104a32,32,0,0,1-32-32,8,8,0,0,0-16,0,48.05,48.05,0,0,0,48,48h16v16a8,8,0,0,0,16,0V216h16a48,48,0,0,0,0-96Zm-40,0a32,32,0,0,1,0-64h8v64Zm40,80H136V136h16a32,32,0,0,1,0,64Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Current Finances</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">Current Finances: 5/10</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="Globe" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24ZM101.63,168h52.74C149,186.34,140,202.87,128,215.89,116,202.87,107,186.34,101.63,168ZM98,152a145.72,145.72,0,0,1,0-48h60a145.72,145.72,0,0,1,0,48ZM40,128a87.61,87.61,0,0,1,3.33-24H81.79a161.79,161.79,0,0,0,0,48H43.33A87.61,87.61,0,0,1,40,128ZM154.37,88H101.63C107,69.66,116,53.13,128,40.11,140,53.13,149,69.66,154.37,88Zm19.84,16h38.46a88.15,88.15,0,0,1,0,48H174.21a161.79,161.79,0,0,0,0-48Zm32.16-16H170.94a142.39,142.39,0,0,0-20.26-45A88.37,88.37,0,0,1,206.37,88ZM105.32,43A142.39,142.39,0,0,0,85.06,88H49.63A88.37,88.37,0,0,1,105.32,43ZM49.63,168H85.06a142.39,142.39,0,0,0,20.26,45A88.37,88.37,0,0,1,49.63,168Zm101.05,45a142.39,142.39,0,0,0,20.26-45h35.43A88.37,88.37,0,0,1,150.68,213Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Social Impact</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">Social Impact: 7/10</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="ThumbsUp" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M234,80.12A24,24,0,0,0,216,72H160V56a40,40,0,0,0-40-40,8,8,0,0,0-7.16,4.42L75.06,96H32a16,16,0,0,0-16,16v88a16,16,0,0,0,16,16H204a24,24,0,0,0,23.82-21l12-96A24,24,0,0,0,234,80.12ZM32,112H72v88H32ZM223.94,97l-12,96a8,8,0,0,1-7.94,7H88V105.89l36.71-73.43A24,24,0,0,1,144,56V80a8,8,0,0,0,8,8h64a8,8,0,0,1,7.94,9Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Daily Rating</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">Daily Rating: 8/10</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="Note" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M88,96a8,8,0,0,1,8-8h64a8,8,0,0,1,0,16H96A8,8,0,0,1,88,96Zm8,40h64a8,8,0,0,0,0-16H96a8,8,0,0,0,0,16Zm32,16H96a8,8,0,0,0,0,16h32a8,8,0,0,0,0-16ZM224,48V156.69A15.86,15.86,0,0,1,219.31,168L168,219.31A15.86,15.86,0,0,1,156.69,224H48a16,16,0,0,1-16-16V48A16,16,0,0,1,48,32H208A16,16,0,0,1,224,48ZM48,208H152V160a8,8,0,0,1,8-8h48V48H48Zm120-40v28.7L196.69,168Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Reason for Rating</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">Reason for Rating: Productive day</p>
          </div>
        </div>
        <div class="flex items-center gap-4 bg-white px-4 min-h-[72px] py-2">
          <div class="text-[#141613] flex items-center justify-center rounded-lg bg-[#f2f3f1] shrink-0 size-12" data-icon="BookOpen" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path
                d="M224,48H160a40,40,0,0,0-32,16A40,40,0,0,0,96,48H32A16,16,0,0,0,16,64V192a16,16,0,0,0,16,16H96a24,24,0,0,1,24,24,8,8,0,0,0,16,0,24,24,0,0,1,24-24h64a16,16,0,0,0,16-16V64A16,16,0,0,0,224,48ZM96,192H32V64H96a24,24,0,0,1,24,24V200A39.81,39.81,0,0,0,96,192Zm128,0H160a39.81,39.81,0,0,0-24,8V88a24,24,0,0,1,24-24h64Z"
              ></path>
            </svg>
          </div>
          <div class="flex flex-col justify-center">
            <p class="text-[#141613] text-base font-medium leading-normal line-clamp-1">Daily Memories</p>
            <p class="text-[#757c6e] text-sm font-normal leading-normal line-clamp-2">Daily Memories: Journal entry</p>
          </div>
        </div>
      </div>
      <div>
        <div class="flex px-4 py-3">
          <button
            class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-10 px-4 flex-1 bg-[#86ad67] text-[#141613] text-sm font-bold leading-normal tracking-[0.015em]"
          >
            <span class="truncate">Edit</span>
          </button>
        </div>
        <div class="flex gap-2 border-t border-[#f2f3f1] bg-white px-4 pb-3 pt-2">
          <a class="just flex flex-1 flex-col items-center justify-end gap-1 text-[#757c6e]" href="#">
            <div class="text-[#757c6e] flex h-8 items-center justify-center" data-icon="House" data-size="24px" data-weight="regular">
              <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                  d="M218.83,103.77l-80-75.48a1.14,1.14,0,0,1-.11-.11,16,16,0,0,0-21.53,0l-.11.11L37.17,103.77A16,16,0,0,0,32,115.55V208a16,16,0,0,0,16,16H96a16,16,0,0,0,16-16V160h32v48a16,16,0,0,0,16,16h48a16,16,0,0,0,16-16V115.55A16,16,0,0,0,218.83,103.77ZM208,208H160V160a16,16,0,0,0-16-16H112a16,16,0,0,0-16,16v48H48V115.55l.11-.1L128,40l79.9,75.43.11.1Z"
                ></path>
              </svg>
            </div>
            <p class="text-[#757c6e] text-xs font-medium leading-normal tracking-[0.015em]">Home</p>
          </a>
          <a class="just flex flex-1 flex-col items-center justify-end gap-1 rounded-full text-[#141613]" href="#">
            <div class="text-[#141613] flex h-8 items-center justify-center" data-icon="ListBullets" data-size="24px" data-weight="fill">
              <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                  d="M56,128a16,16,0,1,1-16-16A16,16,0,0,1,56,128ZM40,48A16,16,0,1,0,56,64,16,16,0,0,0,40,48Zm0,128a16,16,0,1,0,16,16A16,16,0,0,0,40,176Zm176-64H88a8,8,0,0,0-8,8v16a8,8,0,0,0,8,8H216a8,8,0,0,0,8-8V120A8,8,0,0,0,216,112Zm0-64H88a8,8,0,0,0-8,8V72a8,8,0,0,0,8,8H216a8,8,0,0,0,8-8V56A8,8,0,0,0,216,48Zm0,128H88a8,8,0,0,0-8,8v16a8,8,0,0,0,8,8H216a8,8,0,0,0,8-8V184A8,8,0,0,0,216,176Z"
                ></path>
              </svg>
            </div>
            <p class="text-[#141613] text-xs font-medium leading-normal tracking-[0.015em]">Log</p>
          </a>
          <a class="just flex flex-1 flex-col items-center justify-end gap-1 text-[#757c6e]" href="#">
            <div class="text-[#757c6e] flex h-8 items-center justify-center" data-icon="ChartLine" data-size="24px" data-weight="regular">
              <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                  d="M232,208a8,8,0,0,1-8,8H32a8,8,0,0,1-8-8V48a8,8,0,0,1,16,0v94.37L90.73,98a8,8,0,0,1,10.07-.38l58.81,44.11L218.73,90a8,8,0,1,1,10.54,12l-64,56a8,8,0,0,1-10.07.38L96.39,114.29,40,163.63V200H224A8,8,0,0,1,232,208Z"
                ></path>
              </svg>
            </div>
            <p class="text-[#757c6e] text-xs font-medium leading-normal tracking-[0.015em]">Data</p>
          </a>
          <a class="just flex flex-1 flex-col items-center justify-end gap-1 text-[#757c6e]" href="#">
            <div class="text-[#757c6e] flex h-8 items-center justify-center" data-icon="Gear" data-size="24px" data-weight="regular">
              <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                  d="M128,80a48,48,0,1,0,48,48A48.05,48.05,0,0,0,128,80Zm0,80a32,32,0,1,1,32-32A32,32,0,0,1,128,160Zm88-29.84q.06-2.16,0-4.32l14.92-18.64a8,8,0,0,0,1.48-7.06,107.21,107.21,0,0,0-10.88-26.25,8,8,0,0,0-6-3.93l-23.72-2.64q-1.48-1.56-3-3L186,40.54a8,8,0,0,0-3.94-6,107.71,107.71,0,0,0-26.25-10.87,8,8,0,0,0-7.06,1.49L130.16,40Q128,40,125.84,40L107.2,25.11a8,8,0,0,0-7.06-1.48A107.6,107.6,0,0,0,73.89,34.51a8,8,0,0,0-3.93,6L67.32,64.27q-1.56,1.49-3,3L40.54,70a8,8,0,0,0-6,3.94,107.71,107.71,0,0,0-10.87,26.25,8,8,0,0,0,1.49,7.06L40,125.84Q40,128,40,130.16L25.11,148.8a8,8,0,0,0-1.48,7.06,107.21,107.21,0,0,0,10.88,26.25,8,8,0,0,0,6,3.93l23.72,2.64q1.49,1.56,3,3L70,215.46a8,8,0,0,0,3.94,6,107.71,107.71,0,0,0,26.25,10.87,8,8,0,0,0,7.06-1.49L125.84,216q2.16.06,4.32,0l18.64,14.92a8,8,0,0,0,7.06,1.48,107.21,107.21,0,0,0,26.25-10.88,8,8,0,0,0,3.93-6l2.64-23.72q1.56-1.48,3-3L215.46,186a8,8,0,0,0,6-3.94,107.71,107.71,0,0,0,10.87-26.25,8,8,0,0,0-1.49-7.06Zm-16.1-6.5a73.93,73.93,0,0,1,0,8.68,8,8,0,0,0,1.74,5.48l14.19,17.73a91.57,91.57,0,0,1-6.23,15L187,173.11a8,8,0,0,0-5.1,2.64,74.11,74.11,0,0,1-6.14,6.14,8,8,0,0,0-2.64,5.1l-2.51,22.58a91.32,91.32,0,0,1-15,6.23l-17.74-14.19a8,8,0,0,0-5-1.75h-.48a73.93,73.93,0,0,1-8.68,0,8,8,0,0,0-5.48,1.74L100.45,215.8a91.57,91.57,0,0,1-15-6.23L82.89,187a8,8,0,0,0-2.64-5.1,74.11,74.11,0,0,1-6.14-6.14,8,8,0,0,0-5.1-2.64L46.43,170.6a91.32,91.32,0,0,1-6.23-15l14.19-17.74a8,8,0,0,0,1.74-5.48,73.93,73.93,0,0,1,0-8.68,8,8,0,0,0-1.74-5.48L40.2,100.45a91.57,91.57,0,0,1,6.23-15L69,82.89a8,8,0,0,0,5.1-2.64,74.11,74.11,0,0,1,6.14-6.14A8,8,0,0,0,82.89,69L85.4,46.43a91.32,91.32,0,0,1,15-6.23l17.74,14.19a8,8,0,0,0,5.48,1.74,73.93,73.93,0,0,1,8.68,0,8,8,0,0,0,5.48-1.74L155.55,40.2a91.57,91.57,0,0,1,15,6.23L173.11,69a8,8,0,0,0,2.64,5.1,74.11,74.11,0,0,1,6.14,6.14,8,8,0,0,0,5.1,2.64l22.58,2.51a91.32,91.32,0,0,1,6.23,15l-14.19,17.74A8,8,0,0,0,199.87,123.66Z"
                ></path>
              </svg>
            </div>
            <p class="text-[#757c6e] text-xs font-medium leading-normal tracking-[0.015em]">Settings</p>
          </a>
        </div>
        <div class="h-5 bg-white"></div>
      </div>
    </div>
  </body>
</html>
</file>

<file path="lib/data/local_database/daily_record_dao.dart">
import 'package:sqflite/sqflite.dart';
import '../../models/daily_record.dart';
import 'package:biologgs/data/database_helper.dart';
import 'dart:convert'; // Для работы с JSON

class DailyRecordDao {
final DatabaseHelper _databaseHelper = DatabaseHelper.instance; // Получаем экземпляр DatabaseHelper

// Метод для добавления новой ежедневной записи в базу данных
Future<int> insertDailyRecord(DailyRecord dailyRecord) async {
Database? db = await _databaseHelper.database;

// First try to find existing record for this date
String dateString = dailyRecord.date.toIso8601String().split('T')[0];

// Delete any existing records for this date
await db!.delete(
  DatabaseHelper.tableDailyRecords,
  where: "date = ?",
  whereArgs: [dateString]
);

Map<String, dynamic> values = dailyRecord.toJson();
print("DailyRecordDao: Saving new record for date: $dateString");
print("DailyRecordDao: Values before JSON encode: ${values['dataValues']}");
print("DailyRecordDao: Comments before JSON encode: ${values['comments']}");
values['dataValues'] = jsonEncode(values['dataValues']);
values['comments'] = jsonEncode(values['comments']);

return await db.insert(
  DatabaseHelper.tableDailyRecords,
  values,
);
}

// Метод для получения ежедневной записи по ID
Future<DailyRecord?> getDailyRecord(int id) async {
Database? db = await _databaseHelper.database;
List<Map> maps = await db!.query(
DatabaseHelper.tableDailyRecords,
columns: [
DatabaseHelper.columnDailyRecordId,
DatabaseHelper.columnDailyRecordDate,
DatabaseHelper.columnDailyRecordDataValues,
DatabaseHelper.columnDailyRecordComments,
],
where: '${DatabaseHelper.columnDailyRecordId} = ?',
whereArgs: [id],
);

if (maps.isNotEmpty) {
  Map<String, dynamic> recordMap = Map<String, dynamic>.from(maps.first);
  // Десериализуем dataValues из JSON строки обратно в Map<String, dynamic>
  recordMap[DatabaseHelper.columnDailyRecordDataValues] = jsonDecode(recordMap[DatabaseHelper.columnDailyRecordDataValues]);
  // Десериализуем comments из JSON строки обратно в Map<String, String>
  if (recordMap[DatabaseHelper.columnDailyRecordComments] != null && recordMap[DatabaseHelper.columnDailyRecordComments].isNotEmpty) {
    recordMap[DatabaseHelper.columnDailyRecordComments] = jsonDecode(recordMap[DatabaseHelper.columnDailyRecordComments]);
  } else {
    recordMap[DatabaseHelper.columnDailyRecordComments] = <String, String>{};
  }
  return DailyRecord.fromJson(recordMap);
}
return null;
}

// Метод для получения ежедневной записи по дате
Future<DailyRecord?> getDailyRecordByDate(DateTime date) async {
Database? db = await _databaseHelper.database;
String dateString = date.toIso8601String().split('T')[0];

print("DailyRecordDao: Searching for record with date: $dateString");

List<Map> maps = await db!.query(
  DatabaseHelper.tableDailyRecords,
  where: "date = ?", // Changed from substr to direct comparison
  whereArgs: [dateString],
  orderBy: "id DESC", // Get the latest record if multiple exist
  limit: 1 // Only get one record
);

print("DailyRecordDao: Raw query result: $maps");

if (maps.isNotEmpty) {
  Map<String, dynamic> recordMap = Map<String, dynamic>.from(maps.first);
  recordMap[DatabaseHelper.columnDailyRecordDataValues] = 
      jsonDecode(recordMap[DatabaseHelper.columnDailyRecordDataValues]);
  // Десериализуем comments из JSON строки обратно в Map<String, String>
  if (recordMap[DatabaseHelper.columnDailyRecordComments] != null && recordMap[DatabaseHelper.columnDailyRecordComments].isNotEmpty) {
    recordMap[DatabaseHelper.columnDailyRecordComments] = jsonDecode(recordMap[DatabaseHelper.columnDailyRecordComments]);
  } else {
    recordMap[DatabaseHelper.columnDailyRecordComments] = <String, String>{};
  }
  return DailyRecord.fromJson(recordMap);
}
return null;
}

// Метод для получения всех ежедневных записей
Future<List<DailyRecord>> getAllDailyRecords() async {
Database? db = await _databaseHelper.database;
List<Map> maps = await db!.query(DatabaseHelper.tableDailyRecords);

if (maps.isNotEmpty) {
  return maps.map((map) {
     Map<String, dynamic> recordMap = Map<String, dynamic>.from(map);
    // Десериализуем dataValues из JSON строки обратно в Map<String, dynamic>
    recordMap[DatabaseHelper.columnDailyRecordDataValues] = jsonDecode(recordMap[DatabaseHelper.columnDailyRecordDataValues]);
    // Десериализуем comments из JSON строки обратно в Map<String, String>
    if (recordMap[DatabaseHelper.columnDailyRecordComments] != null && recordMap[DatabaseHelper.columnDailyRecordComments].isNotEmpty) {
      recordMap[DatabaseHelper.columnDailyRecordComments] = jsonDecode(recordMap[DatabaseHelper.columnDailyRecordComments]);
    } else {
      recordMap[DatabaseHelper.columnDailyRecordComments] = <String, String>{};
    }
    return DailyRecord.fromJson(recordMap);
  }).toList();
}
return [];
}

// Метод для обновления ежедневной записи
Future<int> updateDailyRecord(DailyRecord dailyRecord) async {
Database? db = await _databaseHelper.database;
Map<String, dynamic> values = dailyRecord.toJson();

// Сериализуем dataValues и comments в JSON строку
values['dataValues'] = jsonEncode(values['dataValues']);
values['comments'] = jsonEncode(values['comments']);

return await db!.update(
  DatabaseHelper.tableDailyRecords,
  values,
  where: '${DatabaseHelper.columnDailyRecordId} = ?',
  whereArgs: [dailyRecord.id],
);
}

// Метод для удаления ежедневной записи по ID
Future<int> deleteDailyRecord(int id) async {
Database? db = await _databaseHelper.database;
return await db!.delete(
DatabaseHelper.tableDailyRecords,
where: '${DatabaseHelper.columnDailyRecordId} = ?',
whereArgs: [id],
);
}
}
</file>

<file path="lib/data/repositories/parameter_repository_impl.dart">
import '../local_database/parameter_dao.dart';
import '../../models/parameter.dart';
import 'parameter_repository.dart';

class ParameterRepositoryImpl implements ParameterRepository {
  final ParameterDao _parameterDao = ParameterDao(); // Создаем экземпляр ParameterDao

  @override
  Future<int> insertParameter(Parameter parameter) async {
    return await _parameterDao.insertParameter(parameter); // Просто делегируем вызов в DAO
  }

  @override
  Future<Parameter?> getParameter(int id) async {
    return await _parameterDao.getParameter(id); // Делегируем в DAO
  }

  @override
  Future<List<Parameter>> getAllParameters() async {
    return await _parameterDao.getAllParameters(); // Делегируем в DAO
  }

  @override
  Future<List<Parameter>> getEnabledParameters() async {
    return await _parameterDao.getEnabledParameters();
  }

  @override
  Future<List<Parameter>> getPresetParameters() async {
    return await _parameterDao.getPresetParameters();
  }

  @override
  Future<List<Parameter>> getUserParameters() async {
    return await _parameterDao.getUserParameters();
  }

  @override
  Future<int> updateParameter(Parameter parameter) async {
    return await _parameterDao.updateParameter(parameter); // Делегируем в DAO
  }

  @override
  Future<int> toggleParameterEnabled(int id, bool isEnabled) async {
    return await _parameterDao.toggleParameterEnabled(id, isEnabled);
  }

  @override
  Future<int> updateParameterSortOrder(int id, int sortOrder) async {
    return await _parameterDao.updateParameterSortOrder(id, sortOrder);
  }

  @override
  Future<int> deleteParameter(int id) async {
    return await _parameterDao.deleteParameter(id); // Делегируем в DAO
  }

  @override
  Future<bool> hasPresetParameters() async {
    return await _parameterDao.hasPresetParameters();
  }

  @override
  Future<void> insertPresetParameters(List<Parameter> presets) async {
    return await _parameterDao.insertPresetParameters(presets);
  }
}
</file>

<file path="lib/data/repositories/parameter_repository.dart">
import '../../models/parameter.dart';

abstract class ParameterRepository {
  Future<int> insertParameter(Parameter parameter);
  Future<Parameter?> getParameter(int id);
  Future<List<Parameter>> getAllParameters();
  Future<List<Parameter>> getEnabledParameters();
  Future<List<Parameter>> getPresetParameters();
  Future<List<Parameter>> getUserParameters();
  Future<int> updateParameter(Parameter parameter);
  Future<int> toggleParameterEnabled(int id, bool isEnabled);
  Future<int> updateParameterSortOrder(int id, int sortOrder);
  Future<int> deleteParameter(int id);
  Future<bool> hasPresetParameters();
  Future<void> insertPresetParameters(List<Parameter> presets);
}
</file>

<file path="lib/models/daily_record.dart">
/// Represents a daily record containing values for tracked parameters
class DailyRecord {
  /// Unique identifier for the record, null when creating new record
  final int? id;
  
  /// Date when this record was created
  final DateTime date;
  
  /// Map storing parameter values where:
  /// - key is parameter.id.toString()
  /// - value is the user input (type depends on parameter.dataType)
  final Map<String, dynamic> dataValues;

  /// Map storing comments for each parameter where:
  /// - key is parameter.id.toString()
  /// - value is the user comment (String)
  final Map<String, String> comments;

  /// Constructor for creating a DailyRecord instance
  DailyRecord({
    this.id,
    required this.date,
    required this.dataValues,
    this.comments = const {},
  });

  /// Converts DailyRecord instance to JSON format for storage or export
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'date': date.toIso8601String().split('T')[0], // Store only date part
      'dataValues': dataValues,
      'comments': comments,
    };
  }

  /// Creates a DailyRecord instance from JSON data
  factory DailyRecord.fromJson(Map<String, dynamic> json) {
    return DailyRecord(
      id: json['id'] as int?,
      date: DateTime.parse(json['date'] as String), // Parse ISO 8601 string back to DateTime
      dataValues: Map<String, dynamic>.from(json['dataValues']),
      comments: json['comments'] != null 
          ? Map<String, String>.from(json['comments']) 
          : {},
    );
  }

  /// Creates a copy of DailyRecord with optional field updates
  DailyRecord copyWith({
    int? id,
    DateTime? date,
    Map<String, dynamic>? dataValues,
    Map<String, String>? comments,
  }) {
    return DailyRecord(
      id: id ?? this.id,
      date: date ?? this.date,
      dataValues: dataValues ?? this.dataValues,
      comments: comments ?? this.comments,
    );
  }
}
</file>

<file path="lib/presentation/screens/parameter_create_screen.dart">
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../models/parameter.dart';
import '../../domain/controllers/parameter_controller.dart';
import '../theme/app_theme.dart';

class ParameterCreateScreen extends StatefulWidget {
  const ParameterCreateScreen({Key? key}) : super(key: key);

  @override
  State<ParameterCreateScreen> createState() => _ParameterCreateScreenState();
}
class _ParameterCreateScreenState extends State<ParameterCreateScreen> {
  final _formKey = GlobalKey<FormState>();
  final _parameterController = Get.find<ParameterController>();
  String _parameterName = '';
  String? _dataType;
  String _unit = '';

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Scaffold(
      backgroundColor: theme.colorScheme.background,
      appBar: AppBar(
        title: const Text('Создать параметр'),
      ),
      body: SingleChildScrollView(
        padding: AppTheme.pagePadding,
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: <Widget>[
              Card(
                child: Padding(
                  padding: AppTheme.cardPadding,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(
                            Icons.tune,
                            color: theme.colorScheme.primary,
                            size: 24,
                          ),
                          const SizedBox(width: 12),
                          Text(
                            'Информация о параметре',
                            style: theme.textTheme.titleLarge,
                          ),
                        ],
                      ),
                      const SizedBox(height: 24),
                      TextFormField(
                        decoration: InputDecoration(
                          labelText: 'Название параметра',
                          hintText: 'Например: Вес, Настроение, Сон',
                          prefixIcon: const Icon(Icons.label_outline),
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Пожалуйста, введите название параметра';
                          }
                          return null;
                        },
                        onSaved: (value) {
                          _parameterName = value!;
                        },
                      ),
                      const SizedBox(height: 20),
                      DropdownButtonFormField<String>(
                        decoration: InputDecoration(
                          labelText: 'Тип данных',
                          hintText: 'Выберите тип данных для параметра',
                          prefixIcon: const Icon(Icons.category_outlined),
                        ),
                        value: _dataType,
                        items: <String>['Число', 'Текст', 'Оценка', 'Да/Нет', 'Время', 'Дата']
                            .map<DropdownMenuItem<String>>((String value) {
                          return DropdownMenuItem<String>(
                            value: value,
                            child: Row(
                              children: [
                                Icon(
                                  _getTypeIcon(value),
                                  size: 20,
                                  color: theme.colorScheme.onSurfaceVariant,
                                ),
                                const SizedBox(width: 12),
                                Text(value),
                              ],
                            ),
                          );
                        }).toList(),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Пожалуйста, выберите тип данных';
                          }
                          return null;
                        },
                        onChanged: (String? newValue) {
                          setState(() {
                            _dataType = newValue;
                          });
                        },
                        onSaved: (value) {
                          _dataType = value;
                        },
                      ),
                      const SizedBox(height: 20),
                      TextFormField(
                        decoration: InputDecoration(
                          labelText: 'Единица измерения (опционально)',
                          hintText: 'кг, см, баллы, часы и т.д.',
                          prefixIcon: const Icon(Icons.straighten),
                        ),
                        onSaved: (value) {
                          _unit = value ?? '';
                        },
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton.icon(
                  onPressed: _saveParameter,
                  icon: const Icon(Icons.save),
                  label: const Text('Создать параметр'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _saveParameter() async {
    final theme = Theme.of(context);
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      // Parameter creation data processed

      final newParameter = Parameter(
        name: _parameterName,
        dataType: _dataType!,
        unit: _unit.isEmpty ? null : _unit,
      );

      try {
        await _parameterController.createParameter(newParameter);

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Параметр "$_parameterName" создан успешно!'),
            backgroundColor: theme.colorScheme.primaryContainer,
            behavior: SnackBarBehavior.floating,
          ),
        );

        _formKey.currentState!.reset();
        setState(() {
          _dataType = null;
          _parameterName = '';
          _unit = '';
        });
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Ошибка при сохранении: $e'),
            backgroundColor: theme.colorScheme.error,
            behavior: SnackBarBehavior.floating,
          ),
        );
      }
    }
  }
  
  IconData _getTypeIcon(String dataType) {
    switch (dataType.toLowerCase()) {
      case 'число':
        return Icons.numbers;
      case 'текст':
        return Icons.text_fields;
      case 'оценка':
        return Icons.star_rate;
      case 'да/нет':
        return Icons.check_box;
      case 'время':
        return Icons.access_time;
      case 'дата':
        return Icons.date_range;
      default:
        return Icons.tune;
    }
  }
}
</file>

<file path="lib/presentation/theme/app_theme.dart">
import 'package:flutter/material.dart';

class AppTheme {
  // Цветовая палитра по референсу HTML
  static const Color primaryGreen = Color(0xFF87A96B);     // Sage green #87A96B
  static const Color primaryLightGreen = Color(0xFF87A96B); // Sage green
  static const Color secondaryBlue = Color(0xFF5E8C6A);     // Darker green
  static const Color backgroundLight = Color(0xFFFAF7F0);   // Cream background #FAF7F0
  static const Color surfaceLight = Color(0xFFFFFFFF);      // White cards
  static const Color errorColor = Color(0xFFE53935);        // Красный для ошибок
  static const Color warningColor = Color(0xFFFF9800);      // Оранжевый для предупреждений
  static const Color successColor = Color(0xFF4CAF50);      // Зеленый для успеха
  
  // Серые оттенки
  static const Color textPrimary = Color(0xFF2C3E3D);      // Charcoal text #2C3E3D
  static const Color textSecondary = Color(0xFF49454F);     // Вторичный текст
  static const Color textHint = Color(0xFF79747E);          // Подсказки
  static const Color outline = Color(0xFF79747E);           // Контуры
  static const Color surfaceVariant = Color(0xFFF3F2F7);    // Вариант поверхности

  static ThemeData get lightTheme {
    const ColorScheme colorScheme = ColorScheme.light(
      brightness: Brightness.light,
      primary: primaryGreen,
      onPrimary: Colors.white,
      primaryContainer: Color(0xFFA8DAB5),
      onPrimaryContainer: Color(0xFF002106),
      secondary: secondaryBlue,
      onSecondary: Colors.white,
      secondaryContainer: Color(0xFFD1E4FF),
      onSecondaryContainer: Color(0xFF001D36),
      tertiary: Color(0xFF6750A4),
      onTertiary: Colors.white,
      tertiaryContainer: Color(0xFFEADDFF),
      onTertiaryContainer: Color(0xFF21005D),
      error: errorColor,
      onError: Colors.white,
      errorContainer: Color(0xFFFFDAD6),
      onErrorContainer: Color(0xFF410002),
      background: backgroundLight,
      onBackground: textPrimary,
      surface: surfaceLight,
      onSurface: textPrimary,
      surfaceVariant: surfaceVariant,
      onSurfaceVariant: textSecondary,
      outline: outline,
      outlineVariant: Color(0xFFCAC4D0),
      shadow: Color(0xFF000000),
      scrim: Color(0xFF000000),
      inverseSurface: Color(0xFF313033),
      onInverseSurface: Color(0xFFF4EFF4),
      inversePrimary: Color(0xFF8FD694),
    );

    return ThemeData(
      colorScheme: colorScheme,
      useMaterial3: true,
      
      // AppBar Theme
      appBarTheme: const AppBarTheme(
        elevation: 0,
        scrolledUnderElevation: 1,
        backgroundColor: backgroundLight,
        foregroundColor: textPrimary,
        titleTextStyle: TextStyle(
          color: textPrimary,
          fontSize: 22,
          fontWeight: FontWeight.w600,
          letterSpacing: 0.0,
        ),
        iconTheme: IconThemeData(color: textPrimary, size: 24),
      ),

      // Card Theme
      cardTheme: CardThemeData(
        elevation: 1,
        shadowColor: Colors.black.withOpacity(0.1),
        surfaceTintColor: primaryGreen.withOpacity(0.05),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      ),

      // Elevated Button Theme
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          elevation: 1,
          shadowColor: Colors.black.withOpacity(0.1),
          backgroundColor: primaryGreen,
          foregroundColor: Colors.white,
          disabledBackgroundColor: outline.withOpacity(0.3),
          disabledForegroundColor: textHint,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
          minimumSize: const Size(64, 48),
          textStyle: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w600,
            letterSpacing: 0.1,
          ),
        ),
      ),

      // Text Button Theme
      textButtonTheme: TextButtonThemeData(
        style: TextButton.styleFrom(
          foregroundColor: primaryGreen,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          textStyle: const TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.w600,
            letterSpacing: 0.1,
          ),
        ),
      ),

      // Outlined Button Theme
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          foregroundColor: primaryGreen,
          side: const BorderSide(color: outline, width: 1),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
          minimumSize: const Size(64, 48),
          textStyle: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w600,
            letterSpacing: 0.1,
          ),
        ),
      ),

      // FloatingActionButton Theme
      floatingActionButtonTheme: const FloatingActionButtonThemeData(
        backgroundColor: primaryGreen,
        foregroundColor: Colors.white,
        elevation: 6,
        focusElevation: 8,
        hoverElevation: 8,
        highlightElevation: 12,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.all(Radius.circular(16)),
        ),
      ),

      // Input Decoration Theme
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: surfaceVariant,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: outline),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: outline),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: primaryGreen, width: 2),
        ),
        errorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: errorColor),
        ),
        focusedErrorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: errorColor, width: 2),
        ),
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        labelStyle: const TextStyle(
          color: textSecondary,
          fontSize: 16,
          fontWeight: FontWeight.w400,
        ),
        hintStyle: const TextStyle(
          color: textHint,
          fontSize: 16,
          fontWeight: FontWeight.w400,
        ),
      ),

      // Снекбар Theme
      snackBarTheme: SnackBarThemeData(
        backgroundColor: Color(0xFF313033),
        contentTextStyle: const TextStyle(color: Colors.white),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        behavior: SnackBarBehavior.floating,
        elevation: 6,
      ),

      // Typography
      textTheme: const TextTheme(
        displayLarge: TextStyle(
          fontSize: 57,
          fontWeight: FontWeight.w400,
          letterSpacing: -0.25,
          color: textPrimary,
        ),
        displayMedium: TextStyle(
          fontSize: 45,
          fontWeight: FontWeight.w400,
          letterSpacing: 0.0,
          color: textPrimary,
        ),
        displaySmall: TextStyle(
          fontSize: 36,
          fontWeight: FontWeight.w400,
          letterSpacing: 0.0,
          color: textPrimary,
        ),
        headlineLarge: TextStyle(
          fontSize: 32,
          fontWeight: FontWeight.w600,
          letterSpacing: 0.0,
          color: textPrimary,
        ),
        headlineMedium: TextStyle(
          fontSize: 28,
          fontWeight: FontWeight.w600,
          letterSpacing: 0.0,
          color: textPrimary,
        ),
        headlineSmall: TextStyle(
          fontSize: 24,
          fontWeight: FontWeight.w600,
          letterSpacing: 0.0,
          color: textPrimary,
        ),
        titleLarge: TextStyle(
          fontSize: 22,
          fontWeight: FontWeight.w600,
          letterSpacing: 0.0,
          color: textPrimary,
        ),
        titleMedium: TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.w600,
          letterSpacing: 0.15,
          color: textPrimary,
        ),
        titleSmall: TextStyle(
          fontSize: 14,
          fontWeight: FontWeight.w600,
          letterSpacing: 0.1,
          color: textPrimary,
        ),
        bodyLarge: TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.w400,
          letterSpacing: 0.15,
          color: textPrimary,
        ),
        bodyMedium: TextStyle(
          fontSize: 14,
          fontWeight: FontWeight.w400,
          letterSpacing: 0.25,
          color: textPrimary,
        ),
        bodySmall: TextStyle(
          fontSize: 12,
          fontWeight: FontWeight.w400,
          letterSpacing: 0.4,
          color: textSecondary,
        ),
        labelLarge: TextStyle(
          fontSize: 14,
          fontWeight: FontWeight.w600,
          letterSpacing: 0.1,
          color: textPrimary,
        ),
        labelMedium: TextStyle(
          fontSize: 12,
          fontWeight: FontWeight.w600,
          letterSpacing: 0.5,
          color: textPrimary,
        ),
        labelSmall: TextStyle(
          fontSize: 11,
          fontWeight: FontWeight.w600,
          letterSpacing: 0.5,
          color: textSecondary,
        ),
      ),

      // Divider Theme
      dividerTheme: const DividerThemeData(
        color: outline,
        thickness: 1,
        space: 1,
      ),

      // Icon Theme
      iconTheme: const IconThemeData(
        color: textSecondary,
        size: 24,
      ),

      // List Tile Theme
      listTileTheme: const ListTileThemeData(
        contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 4),
        minLeadingWidth: 32,
        titleTextStyle: TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.w500,
          color: textPrimary,
        ),
        subtitleTextStyle: TextStyle(
          fontSize: 14,
          fontWeight: FontWeight.w400,
          color: textSecondary,
        ),
      ),
    );
  }

  // Дополнительные цвета и утилиты
  static const EdgeInsets pagePadding = EdgeInsets.all(16.0);
  static const EdgeInsets cardPadding = EdgeInsets.all(20.0);
  static const EdgeInsets buttonPadding = EdgeInsets.symmetric(horizontal: 24, vertical: 12);
  
  static const double borderRadius = 12.0;
  static const double cardBorderRadius = 16.0;
  static const double buttonBorderRadius = 12.0;
  
  static const Duration animationDuration = Duration(milliseconds: 300);
  static const Curve animationCurve = Curves.easeInOut;
}
</file>

<file path=".metadata">
# This file tracks properties of this Flutter project.
# Used by Flutter tool to assess capabilities and perform upgrades etc.
#
# This file should be version controlled and should not be manually edited.

version:
  revision: "edada7c56edf4a183c1735310e123c7f923584f1"
  channel: "stable"

project_type: app

# Tracks metadata for the flutter migrate command
migration:
  platforms:
    - platform: root
      create_revision: edada7c56edf4a183c1735310e123c7f923584f1
      base_revision: edada7c56edf4a183c1735310e123c7f923584f1
    - platform: android
      create_revision: edada7c56edf4a183c1735310e123c7f923584f1
      base_revision: edada7c56edf4a183c1735310e123c7f923584f1
    - platform: ios
      create_revision: edada7c56edf4a183c1735310e123c7f923584f1
      base_revision: edada7c56edf4a183c1735310e123c7f923584f1
    - platform: linux
      create_revision: edada7c56edf4a183c1735310e123c7f923584f1
      base_revision: edada7c56edf4a183c1735310e123c7f923584f1
    - platform: macos
      create_revision: edada7c56edf4a183c1735310e123c7f923584f1
      base_revision: edada7c56edf4a183c1735310e123c7f923584f1
    - platform: web
      create_revision: edada7c56edf4a183c1735310e123c7f923584f1
      base_revision: edada7c56edf4a183c1735310e123c7f923584f1
    - platform: windows
      create_revision: edada7c56edf4a183c1735310e123c7f923584f1
      base_revision: edada7c56edf4a183c1735310e123c7f923584f1

  # User provided section

  # List of Local paths (relative to this file) that should be
  # ignored by the migrate tool.
  #
  # Files that are not part of the templates will be ignored by default.
  unmanaged_files:
    - 'lib/main.dart'
    - 'ios/Runner.xcodeproj/project.pbxproj'
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code when working with the BioLogger Flutter application.

## Project Overview

BioLogger is a Flutter application for tracking personal metrics and life quality data. Users define custom parameters (Sleep Hours, Mood, etc.), log daily progress, and export data to CSV format.

## Essential Commands

```bash
# Flutter development
flutter pub get              # Install dependencies - run this first!
flutter run                  # Run app on connected device/simulator  
flutter test                 # Run unit and widget tests
flutter analyze             # Static code analysis with linting
flutter clean               # Clean build artifacts if issues occur

# Testing specific functionality
flutter run --debug         # Run in debug mode for hot reload
flutter test test/          # Run all tests
flutter test test/models/   # Test specific models
flutter test test/controllers/ # Test business logic
flutter test test/presentation/ # Test UI components
flutter build apk --debug   # Build debug APK for testing

# Git workflow  
git status                  # Check current changes
git add .                   # Stage all changes
git commit -m "message"     # Commit with descriptive message
git push origin main        # Push to remote repository
```

## ПРИОРИТЕТ: Календарь + Пресет параметров + Экран данных

**ПРЕСЕТ ПАРАМЕТРОВ (создается автоматически при первом запуске):**

Дефолтные параметры с иконками из values.html:
1. Сон (Number, часы) → Icons.bedtime  
2. БАДы (Text) → Icons.medication  
3. Оценка качества работы (Rating 1-10) → Icons.work
4. Тренировка (Number, минуты) → Icons.fitness_center
5. Количество шагов (Number) → Icons.directions_walk
6. Оценка социальности (Rating 1-10) → Icons.people
7. Оценка настроения (Rating 1-10) → Icons.sentiment_satisfied
8. Оценка своей привлекательности (Rating 1-10) → Icons.favorite
9. Оценка самореализации (Rating 1-10) → Icons.star
10. Оценка качества питания (Rating 1-10) → Icons.restaurant
11. Оценка текущих финансов (Rating 1-10) → Icons.attach_money
12. Оценка социальной полезности (Rating 1-10) → Icons.public
13. Оценка прошедшего дня (Rating 1-10) → Icons.thumb_up
14. Почему такая оценка (Text) → Icons.edit_note
15. Воспоминания обо дне (Text) → Icons.book

**СТРУКТУРА БД:**
- Поле `is_preset: boolean` для пометки дефолтных
- Поле `is_enabled: boolean` для включения/отключения
- Поле `sort_order: int` для пользовательского порядка
- Дефолтные параметры нельзя удалить, только отключить

**ПОЛЬЗОВАТЕЛЬСКИЕ ПАРАМЕТРЫ:**
- Иконка по умолчанию: Icons.analytics
- Добавляются после дефолтных в списке
- Можно удалять и редактировать

**КАЛЕНДАРЬ + ЭКРАН ДАННЫХ:** 

**КАЛЕНДАРЬ - исправления:**
1. Заполненные дни = цифра ВНУТРИ зеленого кружка (не точка под цифрой)
2. Выбранная незаполненная дата = серый кружок вокруг цифры  
3. Выбранная + заполненная = зеленый кружок + двойная обводка/увеличенный размер
4. Кнопка: "Записать данные" / "Посмотреть данные" 
5. Заголовок над счетчиками: "Серии заполнений:"

**ЭКРАН ДАННЫХ - полная переработка на основе values.html:**
- Единый экран просмотра/редактирования  
- Карточки как в values.html: иконка + название + значение
- values.html - лишь референс. Нужно брать из него картинки (в будущем это будут предзаданные в бд параметры)
- Клик по карточке → увеличение + поля ввода + автофокус
- Вертикальный скролл между карточками при заполнении
- Комментарии под основным полем (обрезка если длинные)
- Кнопка "Далее" → "Сохранить" на последнем параметре

**УДАЛИТЬ типы полей:** Date и Time (оставить Number, Text, Rating, Yes/No)

## Code Standards & Architecture

```dart
// Use GetX for state management
class MyController extends GetxController {
  // Reactive variables
  var isLoading = false.obs;
  
  // Methods should be async when needed
  Future<void> saveData() async { }
}

// Follow Clean Architecture layers:
// Presentation -> Domain -> Data
// UI calls Controller -> Controller calls UseCase -> UseCase calls Repository
```

**Architecture Pattern**: Clean Architecture with three layers:
- **Presentation**: `lib/presentation/screens/` + GetX controllers in `lib/domain/controllers/`
- **Domain**: Business logic in `lib/domain/use_cases/`
- **Data**: Repositories in `lib/data/repositories/` and DAOs in `lib/data/local_database/`

**Key Architecture Components**:
- **Models**: `Parameter` and `DailyRecord` classes in `lib/models/`
- **Database**: SQLite via `DatabaseHelper` with version-controlled migrations
- **Dependency Injection**: Centralized in `main.dart` using GetX `AppBindings`
- **State Management**: Reactive variables with GetX `.obs` and `.update()`

## Key Technical Details

- **Database**: SQLite with `sqflite` package
- **State Management**: GetX (already configured in `main.dart`)
- **Data Types Supported**: Number, Text, Rating, Yes/No, Time, Date
- **Main Models**: Parameter (parameter definitions), DailyRecord (daily entries)

## Workflow Instructions

**YOU MUST follow this sequence when making changes:**

1. **Read and understand code first** - explore relevant files before making changes
2. **Make incremental changes** - implement one feature at a time
3. **Test after each change** - run `flutter run` to verify functionality
4. **Commit frequently** - use descriptive commit messages
5. **Use TDD approach** - write tests first when possible

## Database Schema Notes

**Current Schema (v4)**:
```sql
-- Parameters table stores parameter definitions  
CREATE TABLE parameters (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  data_type TEXT NOT NULL, -- Number, Text, Rating, YesNo (Date/Time removed)
  unit TEXT,
  scale_options TEXT -- JSON array for Rating scales
);

-- Daily records table stores user entries
CREATE TABLE daily_records (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  date TEXT NOT NULL, -- ISO 8601 date format
  dataValues TEXT NOT NULL, -- JSON map of parameter_id -> value
  comments TEXT -- JSON map of parameter_id -> comment
);
```

**Important Notes**:
- Database migrations handled in `DatabaseHelper._onUpgrade()` 
- DailyRecord stores all parameter values for a date in single JSON fields
- Parameter types limited to: Number, Text, Rating, YesNo (Date/Time removed per requirements)

## UI/UX Guidelines

- **Material Design 3**: Use modern elevation, colors, and typography
- **Responsive design**: Ensure UI works on different screen sizes
- **Accessibility**: Proper contrast ratios and semantic widgets
- **Animations**: Use smooth transitions between screens (Hero animations, fade transitions)
- **User feedback**: Show loading states, success/error messages via SnackBars

## File Locations to Focus On

- **Data Entry Screen**: `lib/presentation/screens/data_entry/` or similar
- **Parameter Models**: `lib/models/parameter.dart`
- **Database Helper**: `lib/data/database_helper.dart`
- **Controllers**: `lib/domain/controllers/`
- **Theme Configuration**: `lib/presentation/theme/` (create if doesn't exist)

## Important Warnings

- **ALWAYS test changes** with `flutter run` before proceeding to next task
- **Database migrations**: When changing schema, implement proper migration logic
- **GetX reactive variables**: Use `.obs` for reactive state and `.update()` to trigger UI updates
- **Async operations**: Always handle Future/async operations properly with try-catch blocks

## Dependencies Already Available

```yaml
get: ^4.6.5              # State management - USE THIS for controllers
sqflite: ^2.0.0          # Database - for schema changes
path_provider: ^2.0.14   # File paths
share_plus: ^7.2.1       # Sharing functionality  
intl: ^0.18.0           # Date/time formatting
flutter_lints: ^5.0.0   # Code quality - follow linting suggestions
```

## Development Tips

- **Hot reload**: Save files to see changes instantly during `flutter run`
- **Debug console**: Check debug output for errors and print statements
- **Use descriptive variable names**: `isLastParameter` not `isLast`
- **Error handling**: Wrap database operations in try-catch blocks
- **Performance**: Avoid rebuilding entire UI - use GetX selective updates

## Testing Strategy

```bash
# Test specific functionality
flutter test test/models/           # Test data models
flutter test test/controllers/      # Test business logic
flutter test test/database/         # Test database operations

# Integration testing
flutter run --debug                 # Manual testing with hot reload
```
## Project Structure

lib/
├── main.dart                    # App entry point with dependency injection
├── models/                      # Data models (Parameter, DailyRecord)
├── data/                        # Data layer
│   ├── database_helper.dart     # SQLite database setup and migrations
│   ├── local_database/          # DAOs for database operations
│   └── repositories/            # Repository implementations
├── domain/                      # Business logic layer
│   ├── controllers/             # GetX controllers
│   └── use_cases/              # Business use cases
├── presentation/               # UI layer
│   └── screens/               # Flutter screens/pages
└── utils/                     # Utility classes (CSV export, etc.)
</file>

<file path="lib/data/local_database/parameter_dao.dart">
import 'package:sqflite/sqflite.dart';
import '../../models/parameter.dart';
import 'package:biologgs/data/database_helper.dart';
import 'dart:convert'; // Для работы с JSON

class ParameterDao {
  final DatabaseHelper _databaseHelper = DatabaseHelper.instance; // Получаем экземпляр DatabaseHelper

  // Метод для добавления нового параметра в базу данных
  Future<int> insertParameter(Parameter parameter) async {
    Database db = await _databaseHelper.database;
    Map<String, dynamic> values = parameter.toJson();

    print("ParameterDao: Inserting parameter with values: $values");

    return await db.insert(
      DatabaseHelper.tableParameters,
      values,
      conflictAlgorithm: ConflictAlgorithm.replace,
    );
  }

  // Метод для получения параметра по ID
  Future<Parameter?> getParameter(int id) async {
    Database db = await _databaseHelper.database;
    List<Map<String, dynamic>> maps = await db.query(
      DatabaseHelper.tableParameters,
      where: '${DatabaseHelper.columnParameterId} = ?',
      whereArgs: [id],
    );

    if (maps.isNotEmpty) {
      return Parameter.fromJson(Map<String, dynamic>.from(maps.first));
    }
    return null;
  }

  // Метод для получения всех параметров
  Future<List<Parameter>> getAllParameters() async {
    print("ParameterDao: getAllParameters() - Start fetching all parameters from database...");

    Database db = await _databaseHelper.database;
    List<Map<String, dynamic>> maps = await db.query(
      DatabaseHelper.tableParameters,
      orderBy: '${DatabaseHelper.columnParameterIsPreset} DESC, ${DatabaseHelper.columnParameterSortOrder} ASC, ${DatabaseHelper.columnParameterName} ASC',
    );

    print("ParameterDao: getAllParameters() - Raw data from database: $maps");

    if (maps.isNotEmpty) {
      try {
        final parameters = maps.map((map) {
          return Parameter.fromJson(Map<String, dynamic>.from(map));
        }).toList();
        print("ParameterDao: Successfully converted ${parameters.length} parameters");
        return parameters;
      } catch (e) {
        print("ParameterDao: Error converting database data to Parameters: $e");
        rethrow;
      }
    }

    print("ParameterDao: getAllParameters() - No parameters found in database table.");
    return [];
  }

  // Метод для получения только включенных параметров
  Future<List<Parameter>> getEnabledParameters() async {
    print("ParameterDao: getEnabledParameters() - Fetching enabled parameters...");

    Database db = await _databaseHelper.database;
    List<Map<String, dynamic>> maps = await db.query(
      DatabaseHelper.tableParameters,
      where: '${DatabaseHelper.columnParameterIsEnabled} = ?',
      whereArgs: [1],
      orderBy: '${DatabaseHelper.columnParameterIsPreset} DESC, ${DatabaseHelper.columnParameterSortOrder} ASC, ${DatabaseHelper.columnParameterName} ASC',
    );

    if (maps.isNotEmpty) {
      try {
        final parameters = maps.map((map) {
          return Parameter.fromJson(Map<String, dynamic>.from(map));
        }).toList();
        print("ParameterDao: Successfully fetched ${parameters.length} enabled parameters");
        return parameters;
      } catch (e) {
        print("ParameterDao: Error converting enabled parameters: $e");
        rethrow;
      }
    }

    print("ParameterDao: No enabled parameters found");
    return [];
  }

  // Метод для получения только пресет параметров
  Future<List<Parameter>> getPresetParameters() async {
    Database db = await _databaseHelper.database;
    List<Map<String, dynamic>> maps = await db.query(
      DatabaseHelper.tableParameters,
      where: '${DatabaseHelper.columnParameterIsPreset} = ?',
      whereArgs: [1],
      orderBy: '${DatabaseHelper.columnParameterSortOrder} ASC',
    );

    return maps.map((map) => Parameter.fromJson(Map<String, dynamic>.from(map))).toList();
  }

  // Метод для получения только пользовательских параметров
  Future<List<Parameter>> getUserParameters() async {
    Database db = await _databaseHelper.database;
    List<Map<String, dynamic>> maps = await db.query(
      DatabaseHelper.tableParameters,
      where: '${DatabaseHelper.columnParameterIsPreset} = ?',
      whereArgs: [0],
      orderBy: '${DatabaseHelper.columnParameterSortOrder} ASC, ${DatabaseHelper.columnParameterName} ASC',
    );

    return maps.map((map) => Parameter.fromJson(Map<String, dynamic>.from(map))).toList();
  }

  // Метод для обновления параметра
  Future<int> updateParameter(Parameter parameter) async {
    Database db = await _databaseHelper.database;
    Map<String, dynamic> values = parameter.toJson();

    print("ParameterDao: Updating parameter ID ${parameter.id} with values: $values");
    return await db.update(
      DatabaseHelper.tableParameters,
      values,
      where: '${DatabaseHelper.columnParameterId} = ?',
      whereArgs: [parameter.id],
    );
  }

  // Метод для переключения состояния включен/выключен
  Future<int> toggleParameterEnabled(int id, bool isEnabled) async {
    Database db = await _databaseHelper.database;
    
    print("ParameterDao: Toggling parameter ID $id enabled state to $isEnabled");
    return await db.update(
      DatabaseHelper.tableParameters,
      {DatabaseHelper.columnParameterIsEnabled: isEnabled ? 1 : 0},
      where: '${DatabaseHelper.columnParameterId} = ?',
      whereArgs: [id],
    );
  }

  // Метод для обновления порядка сортировки
  Future<int> updateParameterSortOrder(int id, int sortOrder) async {
    Database db = await _databaseHelper.database;
    
    print("ParameterDao: Updating parameter ID $id sort order to $sortOrder");
    return await db.update(
      DatabaseHelper.tableParameters,
      {DatabaseHelper.columnParameterSortOrder: sortOrder},
      where: '${DatabaseHelper.columnParameterId} = ?',
      whereArgs: [id],
    );
  }

  // Метод для удаления параметра по ID (только для пользовательских параметров)
  Future<int> deleteParameter(int id) async {
    Database db = await _databaseHelper.database;
    
    // Проверяем, что это не пресет параметр
    List<Map<String, dynamic>> maps = await db.query(
      DatabaseHelper.tableParameters,
      columns: [DatabaseHelper.columnParameterIsPreset],
      where: '${DatabaseHelper.columnParameterId} = ?',
      whereArgs: [id],
    );
    
    if (maps.isNotEmpty && maps.first[DatabaseHelper.columnParameterIsPreset] == 1) {
      throw Exception('Cannot delete preset parameter. Use toggleParameterEnabled instead.');
    }
    
    print("ParameterDao: Deleting parameter ID $id");
    return await db.delete(
      DatabaseHelper.tableParameters,
      where: '${DatabaseHelper.columnParameterId} = ?',
      whereArgs: [id],
    );
  }

  // Метод для проверки наличия пресет параметров
  Future<bool> hasPresetParameters() async {
    Database db = await _databaseHelper.database;
    List<Map<String, dynamic>> maps = await db.query(
      DatabaseHelper.tableParameters,
      columns: ['COUNT(*) as count'],
      where: '${DatabaseHelper.columnParameterIsPreset} = ?',
      whereArgs: [1],
    );
    
    int count = maps.first['count'] as int;
    print("ParameterDao: Found $count preset parameters");
    return count > 0;
  }

  // Метод для массовой вставки параметров (для инициализации пресетов)
  Future<void> insertPresetParameters(List<Parameter> presets) async {
    Database db = await _databaseHelper.database;
    
    print("ParameterDao: Inserting ${presets.length} preset parameters...");
    
    Batch batch = db.batch();
    for (Parameter preset in presets) {
      batch.insert(
        DatabaseHelper.tableParameters,
        preset.toJsonForInsert(), // Используем метод без created_at для совместимости
        conflictAlgorithm: ConflictAlgorithm.ignore, // Игнорируем если уже существует
      );
    }
    
    await batch.commit(noResult: true);
    print("ParameterDao: Preset parameters insertion completed");
  }
}
</file>

<file path="lib/domain/controllers/daily_record_controller.dart">
// lib/domain/controllers/daily_record_controller.dart

import 'package:get/get.dart';
import 'package:share_plus/share_plus.dart';
import 'package:flutter/material.dart';  // Добавляем для Center и CircularProgressIndicator
import 'package:intl/intl.dart';        // Добавляем для DateFormat
import 'dart:io';
import 'dart:convert';

import '../../models/daily_record.dart';
import '../../data/repositories/daily_record_repository.dart';
// Убедись, что импорт для ParameterRepositoryImpl тоже есть, если он нужен для ExportDataUseCase
// import '../../data/repositories/parameter_repository_impl.dart';
import '../use_cases/export_data_use_case.dart';
import '../../utils/csv_exporter.dart';
import '../../models/parameter.dart'; // Уже есть

class DailyRecordController extends GetxController {
  final DailyRecordRepository _dailyRecordRepository;
  final ExportDataUseCase _exportDataUseCase;

  // Убедись, что конструктор получает все необходимые зависимости
  DailyRecordController(this._dailyRecordRepository, this._exportDataUseCase);

  final dailyRecords = <DailyRecord>[].obs;
  final selectedRecord = Rxn<DailyRecord>();

  // ... (onInit, loadDailyRecords, getRecordByDate, create/update/delete методы остаются без изменений) ...

  @override
  void onInit() {
    super.onInit();
    loadDailyRecords();
  }

  Future<void> loadDailyRecords() async {
    try {
      final loadedRecords = await _dailyRecordRepository.getAllDailyRecords();
      dailyRecords.assignAll(loadedRecords);
    } catch (e) {
      print("Error loading daily records: $e");
      // Возможно, стоит показать Snackbar пользователю
      Get.snackbar('Ошибка загрузки', 'Не удалось загрузить записи.');
    }
  }

  Future<DailyRecord?> getRecordByDate(DateTime date) async {
    try {
      final normalizedDate = DateTime(date.year, date.month, date.day);
      return await _dailyRecordRepository.getDailyRecordByDate(normalizedDate);
    } catch (e) {
      print("Error getting record by date: $e");
      return null;
    }
  }

  Future<void> createDailyRecord(DailyRecord dailyRecord) async {
    try {
      final id = await _dailyRecordRepository.insertDailyRecord(dailyRecord);
      if (id != 0) {
        DailyRecord newRecord = dailyRecord.copyWith(id: id);
        dailyRecords.add(newRecord);
        dailyRecords.refresh(); // Обновляем список, если нужно немедленное отображение
      }
    } catch (e) {
      print("Error creating daily record: $e");
      Get.snackbar('Ошибка', 'Не удалось сохранить запись.');
    }
  }

  Future<void> updateDailyRecord(DailyRecord dailyRecord) async {
    try {
      await _dailyRecordRepository.updateDailyRecord(dailyRecord);
      final index = dailyRecords.indexWhere((record) => record.id == dailyRecord.id);
      if (index != -1) {
        dailyRecords[index] = dailyRecord;
        dailyRecords.refresh();
      }
    } catch (e) {
      print("Error updating daily record: $e");
      Get.snackbar('Ошибка', 'Не удалось обновить запись.');
    }
  }

  Future<void> deleteDailyRecord(int id) async {
    try {
      await _dailyRecordRepository.deleteDailyRecord(id);
      dailyRecords.removeWhere((record) => record.id == id);
    } catch (e) {
      print("Error deleting daily record: $e");
      Get.snackbar('Ошибка', 'Не удалось удалить запись.');
    }
  }


  // --- ОБНОВЛЕННЫЙ МЕТОД ЭКСПОРТА ---
  Future<void> exportDataAndShare() async { // Можно переименовать для ясности
    Get.dialog( // Показываем индикатор загрузки
      Center(child: CircularProgressIndicator()),
      barrierDismissible: false, // Нельзя закрыть диалог тапом вне его
    );

    try {
      // 1. Получаем данные для экспорта
      final (parameters, recordsToExport) = await _exportDataUseCase.execute();

      // Проверяем, есть ли что экспортировать
      if (recordsToExport.isEmpty || parameters.isEmpty) {
         if (Get.isDialogOpen ?? false) Get.back(); // Закрываем индикатор загрузки
         Get.snackbar('Информация', 'Нет данных для экспорта.');
         return;
      }

      // 2. Конвертируем данные в строку CSV
      final csvData = CsvExporter.convertToCsv(parameters, recordsToExport);

      // 3. Создаем временный файл CSV
      final csvFilePath = await CsvExporter.createTemporaryCsvFile(csvData);

      if (Get.isDialogOpen ?? false) Get.back(); // Закрываем индикатор загрузки ПЕРЕД открытием Share

      // 4. Вызываем диалог "Поделиться"
      final result = await Share.shareXFiles(
          [XFile(csvFilePath)], // Передаем путь к файлу как XFile
          subject: 'Экспорт данных BioLog (${DateFormat('yyyy-MM-dd').format(DateTime.now())})', // Тема (для email)
          text: 'Файл CSV с экспортированными данными из приложения BioLog.' // Сопроводительный текст
      );

      // 5. (Опционально) Обрабатываем результат шаринга
      if (result.status == ShareResultStatus.success) {
        print('Файл успешно отправлен/сохранен.');
        // Get.snackbar('Успех', 'Файл CSV готов к отправке.'); // Можно и не показывать, т.к. пользователь сам выбрал действие
      } else if (result.status == ShareResultStatus.dismissed) {
        print('Диалог "Поделиться" был закрыт пользователем.');
        // Можно показать сообщение, что экспорт отменен
         Get.snackbar('Отменено', 'Отправка файла была отменена.');
      } else {
         print('Отправка файла завершилась со статусом: ${result.status}');
         // Возможно, стоит показать общее сообщение об ошибке, если статус не success и не dismissed
         Get.snackbar('Ошибка отправки', 'Не удалось отправить файл.');
      }

      // 6. (Опционально, но рекомендуется) Удаляем временный файл после завершения операции
      // Хотя система должна сама чистить временные папки, лучше сделать это явно
      try {
        final tempFile = File(csvFilePath);
        if (await tempFile.exists()) {
          await tempFile.delete();
          print('Временный файл $csvFilePath удален.');
        }
      } catch (e) {
        print('Не удалось удалить временный файл $csvFilePath: $e');
        // Не критичная ошибка, можно просто залогировать
      }

    } catch (e) {
      print('Ошибка экспорта и отправки CSV: $e');
       if (Get.isDialogOpen ?? false) Get.back(); // Убедимся, что индикатор закрыт в случае ошибки
      Get.snackbar('Ошибка', 'Не удалось подготовить файл CSV для отправки.');
    }
  }

  // Старый метод можно удалить или оставить для справки
  /*
  Future<void> exportDataToCsv() async {
    // ... старый код ...
  }
  */
}
</file>

<file path="lib/models/parameter.dart">
import 'dart:convert';

/// Represents a parameter that can be tracked in the bio logging system
class Parameter {
  /// Unique identifier for the parameter, null when creating new parameter
  final int? id;

  /// Name of the parameter (e.g., "Sleep", "Weight", "Mood")
  final String name;

  /// Type of data this parameter stores ("Number", "Text", "Rating", "YesNo")
  /// Note: "Date" and "Time" types removed as per requirements
  final String dataType;

  /// Optional unit of measurement (e.g., "hours", "%", "kg")
  final String? unit;

  /// Optional list of possible values for "Rating" type parameters (e.g., ["1", "2", "3", "4", "5"])
  final List<String>? scaleOptions;

  /// Whether this parameter is a preset (default) parameter
  final bool isPreset;

  /// Whether this parameter is currently enabled/active
  final bool isEnabled;

  /// Sort order for displaying parameters (lower numbers first)
  final int sortOrder;

  /// Icon name for preset parameters (e.g., "bedtime", "medication")
  final String? iconName;

  /// When this parameter was created
  final DateTime createdAt;

  /// Constructor for creating a Parameter instance
  Parameter({
    this.id,
    required this.name,
    required this.dataType,
    this.unit,
    this.scaleOptions,
    this.isPreset = false,
    this.isEnabled = true,
    this.sortOrder = 0,
    this.iconName,
    DateTime? createdAt,
  }) : createdAt = createdAt ?? DateTime.now();

  /// Converts Parameter instance to JSON format for storage or export
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'data_type': dataType,
      'unit': unit,
      'scale_options': scaleOptions == null ? null : jsonEncode(scaleOptions),
      'is_preset': isPreset ? 1 : 0,
      'is_enabled': isEnabled ? 1 : 0,
      'sort_order': sortOrder,
      'icon_name': iconName,
      // Убираем created_at временно для совместимости
    };
  }
  
  /// Converts Parameter instance to JSON format for database insert without created_at field
  Map<String, dynamic> toJsonForInsert() {
    return {
      'id': id,
      'name': name,
      'data_type': dataType,
      'unit': unit,
      'scale_options': scaleOptions == null ? null : jsonEncode(scaleOptions),
      'is_preset': isPreset ? 1 : 0,
      'is_enabled': isEnabled ? 1 : 0,
      'sort_order': sortOrder,
      'icon_name': iconName,
    };
  }

  /// Creates a Parameter instance from JSON data
  factory Parameter.fromJson(Map<String, dynamic> json) {
    List<String>? decodedScaleOptions;
    final scaleOptionsJson = json['scale_options'];

    if (scaleOptionsJson != null && scaleOptionsJson is String && scaleOptionsJson.isNotEmpty) {
      try {
        final decodedList = jsonDecode(scaleOptionsJson);
        if (decodedList is List) {
          decodedScaleOptions = List<String>.from(decodedList.map((item) => item.toString()));
        }
      } catch (e) {
        print("Ошибка декодирования scale_options JSON: $e, JSON: $scaleOptionsJson");
      }
    }

    return Parameter(
      id: json['id'] as int?,
      name: json['name'] as String,
      dataType: json['data_type'] as String? ?? '',
      unit: json['unit'] as String?,
      scaleOptions: decodedScaleOptions,
      isPreset: (json['is_preset'] as int?) == 1,
      isEnabled: (json['is_enabled'] as int?) != 0, // Default to true if null
      sortOrder: json['sort_order'] as int? ?? 0,
      iconName: json['icon_name'] as String?,
      createdAt: json['created_at'] != null 
          ? DateTime.parse(json['created_at'] as String)
          : DateTime.now(),
    );
  }

  /// Creates a copy of Parameter with optional field updates
  Parameter copyWith({
    int? id,
    String? name,
    String? dataType,
    String? unit,
    List<String>? scaleOptions,
    bool? isPreset,
    bool? isEnabled,
    int? sortOrder,
    String? iconName,
    DateTime? createdAt,
  }) {
    return Parameter(
      id: id ?? this.id,
      name: name ?? this.name,
      dataType: dataType ?? this.dataType,
      unit: unit ?? this.unit,
      scaleOptions: scaleOptions ?? this.scaleOptions,
      isPreset: isPreset ?? this.isPreset,
      isEnabled: isEnabled ?? this.isEnabled,
      sortOrder: sortOrder ?? this.sortOrder,
      iconName: iconName ?? this.iconName,
      createdAt: createdAt ?? this.createdAt,
    );
  }

  @override
  String toString() {
    return 'Parameter(id: $id, name: $name, dataType: $dataType, isPreset: $isPreset, isEnabled: $isEnabled, sortOrder: $sortOrder)';
  }
}
</file>

<file path="lib/presentation/screens/parameter_list_screen.dart">
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../domain/controllers/parameter_controller.dart';
import '../../models/parameter.dart';
import 'parameter_create_screen.dart';
import 'parameter_edit_screen.dart';
import '../theme/app_theme.dart';
import '../animations/page_transitions.dart';
import '../../utils/parameter_icons.dart';

class ParameterListScreen extends StatelessWidget {
  ParameterListScreen({Key? key}) : super(key: key);

  final ParameterController _parameterController = Get.find();

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Scaffold(
      backgroundColor: theme.colorScheme.background,
      appBar: AppBar(
        title: const Text('Управление параметрами'),
        actions: [
          IconButton(
            icon: const Icon(Icons.add),
            tooltip: 'Создать параметр',
            onPressed: () => Navigator.of(context).pushWithTransition(
              const ParameterCreateScreen(),
              transition: PageTransitionType.slideFromBottom,
            ),
          ),
        ],
      ),
      body: Obx(() {
        if (!_parameterController.isParametersLoaded.value) {
          return Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const CircularProgressIndicator(),
                const SizedBox(height: 16),
                Text(
                  'Загрузка параметров...',
                  style: theme.textTheme.bodyMedium,
                ),
              ],
            ),
          );
        } else if (_parameterController.parameters.isEmpty) {
          return Center(
            child: Padding(
              padding: AppTheme.pagePadding,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.tune,
                    size: 80,
                    color: theme.colorScheme.onSurfaceVariant,
                  ),
                  const SizedBox(height: 24),
                  Text(
                    'Пока нет параметров',
                    style: theme.textTheme.headlineSmall,
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Создайте первый параметр для отслеживания ваших данных',
                    style: theme.textTheme.bodyMedium?.copyWith(
                      color: theme.colorScheme.onSurfaceVariant,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 32),
                  ElevatedButton.icon(
                    onPressed: () => Navigator.of(context).pushWithTransition(
                      const ParameterCreateScreen(),
                      transition: PageTransitionType.slideFromBottom,
                    ),
                    icon: const Icon(Icons.add),
                    label: const Text('Создать первый параметр'),
                  ),
                ],
              ),
            ),
          );
        } else {
          // Единый список всех параметров
          return Padding(
            padding: const EdgeInsets.only(bottom: 80), // Отступ для FAB
            child: ReorderableListView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: _parameterController.parameters.length,
              onReorder: (oldIndex, newIndex) async {
                if (newIndex > oldIndex) {
                  newIndex -= 1;
                }
                
                final reorderedParams = List<Parameter>.from(_parameterController.parameters);
                final parameter = reorderedParams.removeAt(oldIndex);
                reorderedParams.insert(newIndex, parameter);
                
                // Обновляем sort_order для всех параметров
                await _parameterController.reorderAllParameters(reorderedParams);
              },
              itemBuilder: (context, index) {
                final parameter = _parameterController.parameters[index];
                return _buildParameterTile(context, parameter, theme, index);
              },
            ),
          );
        }
      }),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () => Navigator.of(context).pushWithTransition(
          const ParameterCreateScreen(),
          transition: PageTransitionType.slideFromBottom,
        ),
        icon: const Icon(Icons.add),
        label: const Text('Добавить'),
      ),
    );
  }

  // Единый виджет для всех параметров
  Widget _buildParameterTile(BuildContext context, Parameter parameter, ThemeData theme, int index) {
    return Card(
      key: ValueKey(parameter.id),
      margin: const EdgeInsets.symmetric(vertical: 6),
      child: InkWell(
        onTap: () => Navigator.of(context).pushWithTransition(
          ParameterEditScreen(parameter: parameter),
          transition: PageTransitionType.slideAndFade,
        ),
        borderRadius: BorderRadius.circular(AppTheme.cardBorderRadius),
        child: Padding(
          padding: AppTheme.cardPadding,
          child: Row(
            children: [
              // Drag handle + Иконка
              Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(
                    Icons.drag_handle,
                    color: theme.colorScheme.onSurfaceVariant,
                  ),
                  const SizedBox(width: 8),
                  ParameterIcons.buildParameterIcon(
                    parameter,
                    context,
                    size: 24.0,
                    padding: 12.0,
                  ),
                ],
              ),
              const SizedBox(width: 16),
              // Основная информация
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      parameter.name,
                      style: theme.textTheme.titleMedium,
                    ),
                    const SizedBox(height: 4),
                    Wrap(
                      spacing: 8,
                      runSpacing: 4,
                      children: [
                        Chip(
                          label: Text(
                            parameter.dataType,
                            style: theme.textTheme.bodySmall,
                          ),
                          backgroundColor: theme.colorScheme.secondaryContainer,
                          side: BorderSide.none,
                          padding: const EdgeInsets.symmetric(horizontal: 8),
                        ),
                        if (parameter.isPreset)
                          Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 8,
                              vertical: 2,
                            ),
                            decoration: BoxDecoration(
                              color: theme.colorScheme.primaryContainer,
                              borderRadius: BorderRadius.circular(10),
                            ),
                            child: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                Icon(
                                  Icons.star,
                                  size: 12,
                                  color: theme.colorScheme.onPrimaryContainer,
                                ),
                                const SizedBox(width: 4),
                                Text(
                                  'Пресет',
                                  style: theme.textTheme.labelSmall?.copyWith(
                                    color: theme.colorScheme.onPrimaryContainer,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        if (parameter.unit != null && parameter.unit!.isNotEmpty)
                          Chip(
                            label: Text(
                              parameter.unit!,
                              style: theme.textTheme.bodySmall,
                            ),
                            backgroundColor: theme.colorScheme.surfaceVariant,
                            side: BorderSide.none,
                            padding: const EdgeInsets.symmetric(horizontal: 8),
                          ),
                      ],
                    ),
                  ],
                ),
              ),
              // Кнопки управления
              Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  // Переключатель активности
                  Switch(
                    value: parameter.isEnabled,
                    onChanged: (value) async {
                      await _parameterController.toggleParameterEnabled(parameter.id!, value);
                    },
                  ),
                  const SizedBox(width: 8),
                  // Меню действий
                  PopupMenuButton<String>(
                    onSelected: (value) {
                      if (value == 'edit') {
                        Navigator.of(context).pushWithTransition(
                          ParameterEditScreen(parameter: parameter),
                          transition: PageTransitionType.slideAndFade,
                        );
                      } else if (value == 'delete') {
                        _showDeleteConfirmationDialog(context, parameter);
                      }
                    },
                    itemBuilder: (context) => [
                      PopupMenuItem(
                        value: 'edit',
                        child: Row(
                          children: [
                            Icon(Icons.edit, color: theme.colorScheme.primary),
                            const SizedBox(width: 12),
                            const Text('Редактировать'),
                          ],
                        ),
                      ),
                      if (!parameter.isPreset) // Только для пользовательских параметров
                        PopupMenuItem(
                          value: 'delete',
                          child: Row(
                            children: [
                              Icon(Icons.delete, color: theme.colorScheme.error),
                              const SizedBox(width: 12),
                              const Text('Удалить'),
                            ],
                          ),
                        ),
                    ],
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _showDeleteConfirmationDialog(BuildContext context, Parameter parameter) {
    final theme = Theme.of(context);
    
    // Проверяем, что это не пресет параметр
    if (parameter.isPreset) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('Встроенные параметры нельзя удалить. Вы можете их отключить.'),
          backgroundColor: theme.colorScheme.errorContainer,
          behavior: SnackBarBehavior.floating,
        ),
      );
      return;
    }
    
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          icon: Icon(
            Icons.warning_amber_rounded,
            color: theme.colorScheme.error,
            size: 32,
          ),
          title: const Text('Удалить параметр?'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Вы уверены, что хотите удалить параметр "${parameter.name}"?',
                style: theme.textTheme.bodyMedium,
              ),
              const SizedBox(height: 8),
              Text(
                'Все связанные данные будут потеряны навсегда. Это действие нельзя отменить.',
                style: theme.textTheme.bodySmall?.copyWith(
                  color: theme.colorScheme.onSurfaceVariant,
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Отмена'),
            ),
            FilledButton(
              style: FilledButton.styleFrom(
                backgroundColor: theme.colorScheme.error,
                foregroundColor: theme.colorScheme.onError,
              ),
              onPressed: () async {
                Navigator.of(context).pop();
                
                // Показываем индикатор загрузки
                showDialog(
                  context: context,
                  barrierDismissible: false,
                  builder: (context) => const Center(
                    child: CircularProgressIndicator(),
                  ),
                );
                
                try {
                  await _parameterController.deleteParameter(parameter.id!);
                  Navigator.of(context).pop(); // Закрыть loading
                  
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Параметр "${parameter.name}" удален'),
                      backgroundColor: theme.colorScheme.primaryContainer,
                      behavior: SnackBarBehavior.floating,
                    ),
                  );
                } catch (e) {
                  Navigator.of(context).pop(); // Закрыть loading
                  
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Ошибка удаления: ${e.toString()}'),
                      backgroundColor: theme.colorScheme.error,
                      behavior: SnackBarBehavior.floating,
                    ),
                  );
                }
              },
              child: const Text('Удалить'),
            ),
          ],
        );
      },
    );
  }
}
</file>

<file path="lib/utils/csv_exporter.dart">
// lib/utils/csv_exporter.dart

import 'dart:io';
import 'dart:convert'; // Не используется напрямую, но может быть полезен
import 'package:flutter/foundation.dart';
import 'package:path_provider/path_provider.dart' as path_provider; // Используем псевдоним
import '../models/parameter.dart';
import '../models/daily_record.dart';
import 'package:intl/intl.dart';

class CsvExporter {
  // --- Метод convertToCsv остается без изменений ---
  static String convertToCsv(List<Parameter> parameters, List<DailyRecord> dailyRecords) {
    if (kDebugMode) {
      print('Starting CSV conversion with ${parameters.length} parameters and ${dailyRecords.length} records');
    }

    StringBuffer csvData = StringBuffer(); // Используем StringBuffer для эффективности
    final dateFormat = DateFormat('yyyy-MM-dd');

    // Add headers - include parameter names and their comment columns
    csvData.write('Дата,');
    final headers = <String>[];
    for (var parameter in parameters) {
      headers.add(_escapeCsvValue(parameter.name));
      headers.add(_escapeCsvValue('${parameter.name} (комментарий)'));
    }
    csvData.writeln(headers.join(','));

    // Process each record
    for (var record in dailyRecords) {
      try {
        // Add date
        csvData.write('${dateFormat.format(record.date)},');

        // Process values and comments for each parameter
        final valuesAndComments = <String>[];
        for (var parameter in parameters) {
          try {
            final rawValues = record.dataValues;
            final rawComments = record.comments;
            
            // Get value
            final value = (rawValues is Map<String, dynamic>)
                ? rawValues[parameter.id.toString()] ?? ''
                : '';
            valuesAndComments.add(_escapeCsvValue(value.toString()));
            
            // Get comment
            final comment = (rawComments is Map<String, String>)
                ? rawComments[parameter.id.toString()] ?? ''
                : '';
            valuesAndComments.add(_escapeCsvValue(comment));
          } catch (e) {
            if (kDebugMode) {
              print('Error processing parameter ${parameter.id} for record ${record.date}: $e');
            }
            valuesAndComments.add(''); // Empty value
            valuesAndComments.add(''); // Empty comment
          }
        }
        final values = valuesAndComments.join(',');

        csvData.writeln(values); // Используем writeln для добавления \n
      } catch (e) {
        if (kDebugMode) {
          print('Error processing record for date ${record.date}: $e');
        }
        // Add empty values and comments for this record if the whole record processing fails
        csvData.writeln(List.filled(parameters.length * 2, '').join(','));
      }
    }
    if (kDebugMode) {
      print('CSV conversion finished.');
    }
    return csvData.toString();
  }

  // Вспомогательная функция для экранирования значений CSV (если они содержат запятые, кавычки или переводы строк)
  static String _escapeCsvValue(String value) {
    if (value.contains(',') || value.contains('"') || value.contains('\n')) {
      // Заменяем все кавычки на двойные кавычки и оборачиваем значение в кавычки
      return '"${value.replaceAll('"', '""')}"';
    }
    return value;
  }


  // --- НОВЫЙ Метод для создания временного файла ---
  static Future<String> createTemporaryCsvFile(String csvData) async {
    try {
      // Получаем временную директорию, специфичную для приложения
      final directory = await path_provider.getTemporaryDirectory();
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      // Создаем уникальное имя файла
      final filePath = '${directory.path}/biolog_export_$timestamp.csv';
      final file = File(filePath);

      // Записываем данные в файл
      await file.writeAsString(csvData, encoding: utf8); // Указываем кодировку utf8

      if (kDebugMode) {
        print('Temporary CSV file created at: $filePath');
      }
      // Возвращаем путь к созданному файлу
      return filePath;
    } catch (e) {
      if (kDebugMode) {
        print('Error creating temporary CSV file: $e');
      }
      // Пробрасываем ошибку выше, чтобы ее можно было обработать в контроллере
      rethrow;
    }
  }
}
</file>

<file path="lib/data/database_helper.dart">
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

class DatabaseHelper {
  static const databaseName = "biolog_database.db";
  static const databaseVersion = 5;

  // Имена таблиц
  static const tableParameters = 'parameters';
  static const tableDailyRecords = 'daily_records';

  // Поля таблицы parameters
  static const columnParameterId = 'id';
  static const columnParameterName = 'name';
  static const columnParameterDataType = 'data_type';
  static const columnParameterUnit = 'unit';
  static const columnParameterScaleOptions = 'scale_options';
  static const columnParameterIsPreset = 'is_preset';
  static const columnParameterIsEnabled = 'is_enabled';
  static const columnParameterSortOrder = 'sort_order';
  static const columnParameterIconName = 'icon_name';
  static const columnParameterCreatedAt = 'created_at';

  // Поля таблицы daily_records
  static const columnDailyRecordId = 'id';
  static const columnDailyRecordDate = 'date';
  static const columnDailyRecordDataValues = 'dataValues'; // Changed from 'data_values' to 'dataValues'
  static const columnDailyRecordComments = 'comments';

  DatabaseHelper._privateConstructor();
  static final DatabaseHelper instance = DatabaseHelper._privateConstructor();

  static Database? _database;

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    String path = join(await getDatabasesPath(), databaseName); // Путь к базе данных
    print("Database path: $path"); // <--- ДОБАВЬ ЭТУ СТРОКУ: Логирование пути
    print("Requesting database version: $databaseVersion");
    return await openDatabase(
      path,
      version: databaseVersion,
      onCreate: _onCreate,
      onUpgrade: _onUpgrade,
    );
  }

  Future<void> _onCreate(Database db, int version) async {
    // Создание таблицы parameters с полной схемой v5 (без created_at для совместимости)
    await db.execute('''
      CREATE TABLE $tableParameters (
        $columnParameterId INTEGER PRIMARY KEY AUTOINCREMENT,
        $columnParameterName TEXT NOT NULL,
        $columnParameterDataType TEXT NOT NULL,
        $columnParameterUnit TEXT,
        $columnParameterScaleOptions TEXT,
        $columnParameterIsPreset INTEGER DEFAULT 0,
        $columnParameterIsEnabled INTEGER DEFAULT 1,
        $columnParameterSortOrder INTEGER DEFAULT 0,
        $columnParameterIconName TEXT
      )
    ''');

    // Создание таблицы daily_records с обновленным именем колонки
    await db.execute('''
      CREATE TABLE daily_records (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT NOT NULL,
        dataValues TEXT NOT NULL,
        comments TEXT
      )
    ''');
    
    print('DatabaseHelper: Created new database with version $version');
  }

  Future<void> _onUpgrade(Database db, int oldVersion, int newVersion) async {
    print("Upgrading database from version $oldVersion to $newVersion");
    
    if (oldVersion < 3) {
      print("Applying migration for version 3: Adding column $columnParameterScaleOptions if not exists...");
      try {
        await db.execute('''
          ALTER TABLE $tableParameters ADD COLUMN $columnParameterScaleOptions TEXT
        ''');
        print("Column $columnParameterScaleOptions added or already exists.");
      } catch (e) {
        print("Error trying to add column $columnParameterScaleOptions: $e");
        var columns = await db.rawQuery('PRAGMA table_info($tableParameters)');
        bool exists = columns.any((col) => col['name'] == columnParameterScaleOptions);
        print("Column $columnParameterScaleOptions ${exists ? 'exists' : 'does not exist'}");
        if (!exists) {
          print("Failed to add column $columnParameterScaleOptions!");
        }
      }
    }

    if (oldVersion < 4) {
      print("Applying migration for version 4: Adding column $columnDailyRecordComments...");
      try {
        await db.execute('''
          ALTER TABLE $tableDailyRecords ADD COLUMN $columnDailyRecordComments TEXT
        ''');
        print("Column $columnDailyRecordComments added successfully.");
      } catch (e) {
        print("Error trying to add column $columnDailyRecordComments: $e");
        var columns = await db.rawQuery('PRAGMA table_info($tableDailyRecords)');
        bool exists = columns.any((col) => col['name'] == columnDailyRecordComments);
        print("Column $columnDailyRecordComments ${exists ? 'exists' : 'does not exist'}");
        if (!exists) {
          print("Failed to add column $columnDailyRecordComments!");
        }
      }
    }

    if (oldVersion < 5) {
      print("Applying migration for version 5: Adding preset parameter support...");
      
      // Add new columns for preset support
      List<String> newColumns = [
        'ALTER TABLE $tableParameters ADD COLUMN $columnParameterIsPreset INTEGER DEFAULT 0',
        'ALTER TABLE $tableParameters ADD COLUMN $columnParameterIsEnabled INTEGER DEFAULT 1',
        'ALTER TABLE $tableParameters ADD COLUMN $columnParameterSortOrder INTEGER DEFAULT 0',
        'ALTER TABLE $tableParameters ADD COLUMN $columnParameterIconName TEXT',
        'ALTER TABLE $tableParameters ADD COLUMN $columnParameterCreatedAt TEXT',
      ];
      
      for (String sql in newColumns) {
        try {
          await db.execute(sql);
          print("Successfully executed: $sql");
        } catch (e) {
          print("Error executing: $sql - Error: $e");
          // Continue with other migrations even if one fails
        }
      }
      
      // Update existing parameters with default created_at timestamp
      try {
        await db.execute('''
          UPDATE $tableParameters 
          SET $columnParameterCreatedAt = datetime('now') 
          WHERE $columnParameterCreatedAt IS NULL OR $columnParameterCreatedAt = ''
        ''');
        print("Updated existing parameters with created_at timestamps");
      } catch (e) {
        print("Error updating created_at timestamps: $e");
      }
      
      print("Migration to version 5 completed");
    }
  }

  /// Get current database schema info for debugging
  Future<void> printTableSchema() async {
    Database db = await database;
    var parametersSchema = await db.rawQuery('PRAGMA table_info($tableParameters)');
    var dailyRecordsSchema = await db.rawQuery('PRAGMA table_info($tableDailyRecords)');
    
    print('=== Parameters Table Schema ===');
    for (var col in parametersSchema) {
      print('${col['name']}: ${col['type']} (nullable: ${col['notnull'] == 0})');
    }
    
    print('=== Daily Records Table Schema ===');
    for (var col in dailyRecordsSchema) {
      print('${col['name']}: ${col['type']} (nullable: ${col['notnull'] == 0})');
    }
  }
}
</file>

<file path="lib/domain/controllers/parameter_controller.dart">
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../models/parameter.dart';
import '../../data/repositories/parameter_repository.dart';
import '../../data/repositories/parameter_repository_impl.dart';

class ParameterController extends GetxController {
  final ParameterRepository _parameterRepository;
  ParameterController(this._parameterRepository);

  final parameters = <Parameter>[].obs;
  final isParametersLoaded = false.obs;

  @override
  void onInit() {
    super.onInit();
    loadParameters().then((_) {
      isParametersLoaded.value = true;
    });
  }

  Future<void> loadParameters() async {
    // Loading parameters from database

    try {
      final loadedParameters = await _parameterRepository.getAllParameters();
      parameters.assignAll(loadedParameters);

      // Parameters loaded successfully: ${loadedParameters.length} items

    } catch (e) {
      // Error loading parameters: $e
      Get.snackbar(
        'Ошибка загрузки',
        'Не удалось загрузить параметры: $e',
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      rethrow;
    }
    // Finished loading parameters
  }

  Future<void> createParameter(Parameter parameter) async {
    try {
      final id = await _parameterRepository.insertParameter(parameter);
      if (id != 0) {
        Parameter newParameter = parameter.copyWith(id: id);
        parameters.add(newParameter);
      }
    } catch (e) {
      print("Error creating parameter: $e");
      Get.snackbar(
        'Ошибка создания',
        'Не удалось создать параметр: $e',
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      rethrow;
    }
  }

  Future<void> updateParameter(Parameter parameter) async {
    try {
      await _parameterRepository.updateParameter(parameter);
      final index = parameters.indexWhere((p) => p.id == parameter.id);
      if (index != -1) {
        parameters[index] = parameter;
        parameters.refresh();
      }
    } catch (e) {
      print("Error updating parameter: $e");
      Get.snackbar(
        'Ошибка обновления',
        'Не удалось обновить параметр: $e',
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      rethrow;
    }
  }

  Future<void> deleteParameter(int id) async {
    try {
      final index = parameters.indexWhere((p) => p.id == id);
      if (index == -1) return;

      await _parameterRepository.deleteParameter(id);
      parameters.removeWhere((p) => p.id == id);
    } catch (e) {
      print("Error deleting parameter: $e");
      Get.snackbar(
        'Ошибка удаления',
        'Не удалось удалить параметр: $e',
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      rethrow;
    }
  }

  // Методы для работы с пресетами
  List<Parameter> get presetParameters => parameters.where((p) => p.isPreset).toList();
  List<Parameter> get userParameters => parameters.where((p) => !p.isPreset).toList();

  Future<void> toggleParameterEnabled(int id, bool isEnabled) async {
    try {
      await _parameterRepository.toggleParameterEnabled(id, isEnabled);
      final index = parameters.indexWhere((p) => p.id == id);
      if (index != -1) {
        parameters[index] = parameters[index].copyWith(isEnabled: isEnabled);
        parameters.refresh();
      }
    } catch (e) {
      print("Error toggling parameter: $e");
      Get.snackbar(
        'Ошибка переключения',
        'Не удалось изменить состояние параметра: $e',
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      rethrow;
    }
  }

  Future<void> reorderUserParameters(List<Parameter> reorderedParameters) async {
    try {
      // Обновляем sort_order для каждого параметра
      for (int i = 0; i < reorderedParameters.length; i++) {
        final parameter = reorderedParameters[i];
        if (!parameter.isPreset) {
          await _parameterRepository.updateParameterSortOrder(parameter.id!, i);
          final index = parameters.indexWhere((p) => p.id == parameter.id);
          if (index != -1) {
            parameters[index] = parameters[index].copyWith(sortOrder: i);
          }
        }
      }
      parameters.refresh();
    } catch (e) {
      print("Error reordering parameters: $e");
      Get.snackbar(
        'Ошибка изменения порядка',
        'Не удалось изменить порядок параметров: $e',
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      rethrow;
    }
  }

  Future<void> reorderAllParameters(List<Parameter> reorderedParameters) async {
    try {
      // Обновляем sort_order для всех параметров
      for (int i = 0; i < reorderedParameters.length; i++) {
        final parameter = reorderedParameters[i];
        await _parameterRepository.updateParameterSortOrder(parameter.id!, i);
        final index = parameters.indexWhere((p) => p.id == parameter.id);
        if (index != -1) {
          parameters[index] = parameters[index].copyWith(sortOrder: i);
        }
      }
      
      // Переупорядочиваем локальный список
      parameters.assignAll(reorderedParameters);
      parameters.refresh();
    } catch (e) {
      print("Error reordering all parameters: $e");
      Get.snackbar(
        'Ошибка изменения порядка',
        'Не удалось изменить порядок параметров: $e',
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      rethrow;
    }
  }
}
</file>

<file path="lib/presentation/screens/parameter_edit_screen.dart">
// lib/presentation/screens/parameter_edit_screen.dart
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../models/parameter.dart';
import '../../domain/controllers/parameter_controller.dart';
import '../theme/app_theme.dart';

class ParameterEditScreen extends StatefulWidget {
  final Parameter parameter; // Принимаем параметр для редактирования

  const ParameterEditScreen({Key? key, required this.parameter}) : super(key: key);

  @override
  State<ParameterEditScreen> createState() => _ParameterEditScreenState();
}

class _ParameterEditScreenState extends State<ParameterEditScreen> {
  final _formKey = GlobalKey<FormState>();
  final _parameterController = Get.find<ParameterController>();

  // Используем TextEditingController для предзаполнения полей
  late TextEditingController _nameController;
  late TextEditingController _unitController;
  String? _dataType; // Тип данных как и раньше

  @override
  void initState() {
    super.initState();
    // Инициализируем контроллеры и тип данных значениями из widget.parameter
    _nameController = TextEditingController(text: widget.parameter.name);
    _unitController = TextEditingController(text: widget.parameter.unit ?? '');
    _dataType = _mapDataTypeToDisplay(widget.parameter.dataType);
  }
  
  // Маппинг типов данных из базы в отображаемые значения
  String _mapDataTypeToDisplay(String dbType) {
    switch (dbType) {
      case 'Number': return 'Число';
      case 'Text': return 'Текст';
      case 'Rating': return 'Оценка';
      case 'YesNo': return 'Да/Нет';
      case 'Time': return 'Время';
      case 'Date': return 'Дата';
      default: return 'Число';
    }
  }
  
  // Маппинг отображаемых значений в типы базы данных
  String _mapDisplayToDataType(String displayType) {
    switch (displayType) {
      case 'Число': return 'Number';
      case 'Текст': return 'Text';
      case 'Оценка': return 'Rating';
      case 'Да/Нет': return 'YesNo';
      case 'Время': return 'Time';
      case 'Дата': return 'Date';
      default: return 'Number';
    }
  }

  @override
  void dispose() {
    // Не забываем очищать контроллеры
    _nameController.dispose();
    _unitController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Scaffold(
      backgroundColor: theme.colorScheme.background,
      appBar: AppBar(
        title: const Text('Редактировать параметр'),
      ),
      body: SingleChildScrollView(
        padding: AppTheme.pagePadding,
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: <Widget>[
              Card(
                child: Padding(
                  padding: AppTheme.cardPadding,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(
                            Icons.edit,
                            color: theme.colorScheme.primary,
                            size: 24,
                          ),
                          const SizedBox(width: 12),
                          Text(
                            'Редактирование параметра',
                            style: theme.textTheme.titleLarge,
                          ),
                        ],
                      ),
                      const SizedBox(height: 24),
                      TextFormField(
                        controller: _nameController,
                        decoration: InputDecoration(
                          labelText: 'Название параметра',
                          hintText: 'Например: Вес, Настроение, Сон',
                          prefixIcon: const Icon(Icons.label_outline),
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Пожалуйста, введите название параметра';
                          }
                          return null;
                        },
                      ),
                      const SizedBox(height: 20),
                      DropdownButtonFormField<String>(
                        decoration: InputDecoration(
                          labelText: 'Тип данных',
                          hintText: 'Выберите тип данных для параметра',
                          prefixIcon: const Icon(Icons.category_outlined),
                        ),
                        value: _dataType,
                        items: <String>['Число', 'Текст', 'Оценка', 'Да/Нет', 'Время', 'Дата']
                            .map<DropdownMenuItem<String>>((String value) {
                          return DropdownMenuItem<String>(
                            value: value,
                            child: Row(
                              children: [
                                Icon(
                                  _getTypeIcon(value),
                                  size: 20,
                                  color: theme.colorScheme.onSurfaceVariant,
                                ),
                                const SizedBox(width: 12),
                                Text(value),
                              ],
                            ),
                          );
                        }).toList(),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Пожалуйста, выберите тип данных';
                          }
                          return null;
                        },
                        onChanged: (String? newValue) {
                          setState(() {
                            _dataType = newValue;
                          });
                        },
                      ),
                      const SizedBox(height: 20),
                      TextFormField(
                        controller: _unitController,
                        decoration: InputDecoration(
                          labelText: 'Единица измерения (опционально)',
                          hintText: 'кг, см, баллы, часы и т.д.',
                          prefixIcon: const Icon(Icons.straighten),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton.icon(
                  onPressed: _updateParameter,
                  icon: const Icon(Icons.save),
                  label: const Text('Сохранить изменения'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _updateParameter() async {
    final theme = Theme.of(context);
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save(); // Хотя save здесь не обязателен с контроллерами

      final updatedName = _nameController.text;
      final updatedUnit = _unitController.text;

      // Создаем обновленный объект Parameter, используя ID из исходного параметра
      final updatedParameter = widget.parameter.copyWith(
        name: updatedName,
        dataType: _mapDisplayToDataType(_dataType!), // Преобразуем обратно в тип базы данных
        unit: updatedUnit.isEmpty ? null : updatedUnit,
        // scaleOptions пока не редактируем, но можно добавить логику и для них
      );

      try {
        await _parameterController.updateParameter(updatedParameter);

        Get.back(); // Возвращаемся на предыдущий экран (список)

        Get.snackbar( // Показываем снэкбар уже на экране списка
          'Успех',
          'Параметр "${updatedParameter.name}" успешно обновлен!',
          snackPosition: SnackPosition.BOTTOM
        );

      } catch (e) {
         ScaffoldMessenger.of(context).showSnackBar(
           SnackBar(
             content: Text('Ошибка при обновлении: $e'),
             backgroundColor: theme.colorScheme.error,
             behavior: SnackBarBehavior.floating,
           ),
         );
      }
    }
  }
  
  IconData _getTypeIcon(String dataType) {
    switch (dataType.toLowerCase()) {
      case 'число':
        return Icons.numbers;
      case 'текст':
        return Icons.text_fields;
      case 'оценка':
        return Icons.star_rate;
      case 'да/нет':
        return Icons.check_box;
      case 'время':
        return Icons.access_time;
      case 'дата':
        return Icons.date_range;
      default:
        return Icons.tune;
    }
  }
}
</file>

<file path=".gitignore">
# Miscellaneous
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.build/
.buildlog/
.history
.svn/
.swiftpm/
migrate_working_dir/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# The .vscode folder contains launch configuration and tasks you configure in
# VS Code which you may wish to be included in version control, so this line
# is commented out by default.
#.vscode/

# Flutter/Dart/Pub related
**/doc/api/
**/ios/Flutter/.last_build_id
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.pub-cache/
.pub/
/build/

# Symbolication related
app.*.symbols

# Obfuscation related
app.*.map.json

# Android Studio will place build artifacts here
/android/app/debug
/android/app/profile
/android/app/release
android/
ios/
linux/
macos/
web/
windows/
.vscode/
test/
</file>

<file path="lib/domain/controllers/data_entry_controller.dart">
import 'package:get/get.dart';
import 'package:intl/intl.dart';
import '../../models/parameter.dart';
import '../../domain/controllers/parameter_controller.dart'; // Импорт ParameterController
import '../../domain/controllers/home_controller.dart'; // Импорт HomeController
import '../../presentation/screens/main_navigation_screen.dart'; // Импорт NavigationController
import '../../data/repositories/daily_record_repository_impl.dart';
import '../../models/daily_record.dart';

class DataEntryController extends GetxController {
  final ParameterController _parameterController = Get.find<ParameterController>();
  final _dailyRecordRepository = DailyRecordRepositoryImpl();

  final parametersForEntry = <Parameter>[].obs;
  final enteredValues = <String, dynamic>{}.obs;
  final enteredComments = <String, String>{}.obs;
  final currentParameterIndex = 0.obs;
  Rx<DateTime> selectedDate = DateTime.now().obs;
  final initialViewMode = 'list'.obs; // 'list' для превью, 'edit' для редактирования

  @override
  void onInit() {
    super.onInit();
    // Получаем выбранную дату из HomeController если он существует
    try {
      final homeController = Get.find<HomeController>();
      selectedDate.value = homeController.selectedDate.value;
    } catch (e) {
      // Если HomeController не найден, используем сегодняшнюю дату
      selectedDate.value = DateTime.now();
    }
    
    _loadParametersForEntryForDate(selectedDate.value);

    // Слушаем изменения в списке параметров ParameterController
    ever(_parameterController.parameters, (updatedParameters) { // <--- СЛУШАЕМ parameters, А НЕ isParametersLoaded
      _loadParametersForEntryForDate(selectedDate.value); // <--- Перезагружаем параметры при изменении списка в ParameterController
    });
  }

  void selectDate(DateTime date) {
    selectedDate.value = date;
    _loadParametersForEntryForDate(date);
  }
  
  void setInitialViewMode(String mode) {
    initialViewMode.value = mode;
  }

  void _loadParametersForEntryForDate(DateTime selectedDate) async {
    final normalizedDate = DateTime(selectedDate.year, selectedDate.month, selectedDate.day);
    final dailyRecord = await loadDailyRecordForDate(normalizedDate);
    // Берем только включенные параметры (где isEnabled = true)
    final enabledParameters = _parameterController.parameters.where((param) => param.isEnabled).toList();
    parametersForEntry.assignAll(enabledParameters);

    enteredValues.clear();
    enteredComments.clear();
    for (var parameter in parametersForEntry) {
      final parameterId = parameter.id.toString();
      if (dailyRecord != null && dailyRecord.dataValues.containsKey(parameterId)) {
        enteredValues[parameterId] = dailyRecord.dataValues[parameterId];
      } else {
        enteredValues[parameterId] = '';
      }
      
      if (dailyRecord != null && dailyRecord.comments.containsKey(parameterId)) {
        enteredComments[parameterId] = dailyRecord.comments[parameterId]!;
      } else {
        enteredComments[parameterId] = '';
      }
    }
    if (parametersForEntry.isNotEmpty) {
      currentParameterIndex.value = 0; // <--- Сбрасываем индекс на 0 при загрузке новых параметров
    } else {
      currentParameterIndex.value = -1; // или -1, если параметров нет
    }
    update(); // <---  ОБНОВЛЯЕМ UI после загрузки параметров
  }

  Parameter? get currentParameter =>
      parametersForEntry.isNotEmpty && currentParameterIndex.value < parametersForEntry.length
          ? parametersForEntry[currentParameterIndex.value]
          : null;

  bool get isLastParameter =>
      parametersForEntry.isNotEmpty && currentParameterIndex.value == parametersForEntry.length - 1;

  void updateEnteredValue(String parameterId, dynamic value) {
    enteredValues[parameterId] = value;
  }

  void updateEnteredComment(String parameterId, String comment) {
    enteredComments[parameterId] = comment;
  }

  void nextParameter() {
    if (currentParameterIndex.value < parametersForEntry.length - 1) {
      currentParameterIndex.value++;
    } else {
      // На последнем параметре - сохраняем данные
      saveDailyRecord();
    }
  }

  void previousParameter() {
    if (currentParameterIndex.value > 0) {
      currentParameterIndex.value--;
    } else {
      // Already at first parameter
    }
  }

  Future<void> saveDailyRecord() async {
    // Saving daily record
    
    final dataValuesMap = <String, dynamic>{};
    final commentsMap = <String, String>{};
    
    for (var parameter in parametersForEntry) {
      final parameterId = parameter.id.toString();
      final value = enteredValues[parameterId];
      final comment = enteredComments[parameterId];
      
      if (value != null && value.toString().isNotEmpty) {
        dataValuesMap[parameterId] = value;
      }
      
      if (comment != null && comment.isNotEmpty) {
        commentsMap[parameterId] = comment;
      }
    }

    final normalizedDate = DateTime(selectedDate.value.year, selectedDate.value.month, selectedDate.value.day);
    final dailyRecord = DailyRecord(
      date: normalizedDate,
      dataValues: dataValuesMap,
      comments: commentsMap,
    );

    try {
      await _dailyRecordRepository.insertDailyRecord(dailyRecord);
      // Daily record saved successfully
      
      // Реактивно обновляем HomeController после сохранения
      try {
        final homeController = Get.find<HomeController>();
        await homeController.loadFilledDays();
        homeController.updateCounters();
      } catch (e) {
        print('HomeController не найден для обновления: $e');
      }
      
      // Переключаемся обратно на главную вкладку через NavigationController
      try {
        final navigationController = Get.find<NavigationController>();
        navigationController.goToHome();
      } catch (e) {
        print('NavigationController не найден для навигации: $e');
      }
      
      Get.snackbar(
        'Успех',
        'Данные сохранены за ${DateFormat('dd.MM.yyyy').format(selectedDate.value)}',
        snackPosition: SnackPosition.BOTTOM,
      );
    } catch (e) {
      // Error saving daily record: $e
      Get.snackbar(
        'Ошибка',
        'Не удалось сохранить данные',
        snackPosition: SnackPosition.BOTTOM,
      );
    }
  }

  Future<DailyRecord?> loadDailyRecordForDate(DateTime date) async {
    // Loading daily record for date: $date
    final dailyRecord = await _dailyRecordRepository.getDailyRecordByDate(date);

    if (dailyRecord != null) {
      // Record found with data and comments
      enteredValues.assignAll(dailyRecord.dataValues.map((key, value) => MapEntry(key, value)));
      enteredComments.assignAll(dailyRecord.comments);
    } else {
      // Record not found
      enteredValues.clear();
      enteredComments.clear();
      for (var parameter in parametersForEntry) {
        enteredValues[parameter.id.toString()] = '';
        enteredComments[parameter.id.toString()] = '';
      }
    }
    return dailyRecord;
  }

  // Add this public method
  Future<DailyRecord?> getDailyRecordByDate(DateTime date) async {
    return await _dailyRecordRepository.getDailyRecordByDate(date);
  }
}
</file>

<file path="lib/presentation/screens/data_entry_screen.dart">
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';
import '../../domain/controllers/data_entry_controller.dart';
import '../../models/parameter.dart';
import '../theme/app_theme.dart';
import 'main_navigation_screen.dart';
import '../../utils/parameter_icons.dart';

class DataEntryScreen extends StatefulWidget {
  const DataEntryScreen({Key? key}) : super(key: key);

  @override
  State<DataEntryScreen> createState() => _DataEntryScreenState();
}

class _DataEntryScreenState extends State<DataEntryScreen> {
  final DataEntryController _dataEntryController = Get.find<DataEntryController>();
  late PageController _pageController;
  late TextEditingController _valueController;
  late TextEditingController _commentController;
  final FocusNode _valueFocusNode = FocusNode();
  double _ratingValue = 1.0;
  bool _yesNoValue = false;
  final RxBool _isListViewMode = false.obs;

  @override
  void initState() {
    super.initState();
    _pageController = PageController();
    _valueController = TextEditingController();
    _commentController = TextEditingController();
    
    // Устанавливаем начальный режим на основе initialViewMode из контроллера
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _isListViewMode.value = _dataEntryController.initialViewMode.value == 'list';
      if (!_isListViewMode.value) {
        _loadCurrentParameterData();
      }
    });
    
    // Слушаем изменения initialViewMode для переключения режимов
    ever(_dataEntryController.initialViewMode, (mode) {
      _isListViewMode.value = mode == 'list';
      if (!_isListViewMode.value) {
        _loadCurrentParameterData();
      }
    });
    
    // Слушаем изменения текущего параметра
    ever(_dataEntryController.currentParameterIndex, (index) {
      if (!_isListViewMode.value) {
        _loadCurrentParameterData();
        // Анимируем только если PageController привязан к PageView
        WidgetsBinding.instance.addPostFrameCallback((_) {
          if (_pageController.hasClients) {
            _pageController.animateToPage(
              index,
              duration: const Duration(milliseconds: 300),
              curve: Curves.easeInOut,
            );
          }
        });
      }
    });
  }

  void _loadCurrentParameterData() {
    final currentParameter = _dataEntryController.currentParameter;
    if (currentParameter != null) {
      final parameterId = currentParameter.id.toString();
      final value = _dataEntryController.enteredValues[parameterId]?.toString() ?? '';
      final comment = _dataEntryController.enteredComments[parameterId] ?? '';
      
      setState(() {
        _valueController.text = value;
        _commentController.text = comment;
        
        // Загружаем значения для специфичных типов
        if (currentParameter.dataType == 'Rating') {
          _ratingValue = double.tryParse(value) ?? 1.0;
        } else if (currentParameter.dataType == 'YesNo') {
          _yesNoValue = value.toLowerCase() == 'да' || value.toLowerCase() == 'yes' || value == 'true';
        }
      });
      
      // Автофокус для Number/Text полей
      if (currentParameter.dataType == 'Number' || currentParameter.dataType == 'Text') {
        WidgetsBinding.instance.addPostFrameCallback((_) {
          _valueFocusNode.requestFocus();
        });
      }
    }
  }
  
  void _saveCurrentParameter() {
    final currentParameter = _dataEntryController.currentParameter;
    if (currentParameter != null) {
      final parameterId = currentParameter.id.toString();
      
      String value = '';
      switch (currentParameter.dataType) {
        case 'Number':
        case 'Text':
          value = _valueController.text;
          break;
        case 'Rating':
          value = _ratingValue.round().toString();
          break;
        case 'YesNo':
          value = _yesNoValue ? 'Да' : 'Нет';
          break;
      }
      
      _dataEntryController.updateEnteredValue(parameterId, value);
      _dataEntryController.updateEnteredComment(parameterId, _commentController.text);
    }
  }
  
  void _nextParameter() {
    _saveCurrentParameter();
    
    if (_dataEntryController.isLastParameter) {
      // Сохраняем все данные
      _dataEntryController.saveDailyRecord();
    } else {
      // Переходим к следующему параметру
      _dataEntryController.nextParameter();
    }
  }

  @override
  void dispose() {
    _pageController.dispose();
    _valueController.dispose();
    _commentController.dispose();
    _valueFocusNode.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Scaffold(
      backgroundColor: theme.colorScheme.surface,
      appBar: AppBar(
        title: Obx(() {
          final selectedDate = _dataEntryController.selectedDate.value;
          final dateText = DateFormat('dd.MM.yyyy').format(selectedDate);
          return Text('Данные за $dateText');
        }),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            // Если мы в режиме редактирования и пришли из списка, возвращаемся к списку
            if (!_isListViewMode.value) {
              _isListViewMode.value = true;
              _dataEntryController.setInitialViewMode('list');
            } else {
              // Если мы в режиме списка, возвращаемся на главную
              try {
                final navigationController = Get.find<NavigationController>();
                navigationController.goToHome();
              } catch (e) {
                Navigator.of(context).pop();
              }
            }
          },
        ),
        actions: [
          Obx(() => IconButton(
            icon: Icon(_isListViewMode.value ? Icons.edit : Icons.list),
            tooltip: _isListViewMode.value ? 'Режим редактирования' : 'Быстрый просмотр',
            onPressed: () {
              _isListViewMode.value = !_isListViewMode.value;
              if (!_isListViewMode.value) {
                // При возврате к режиму редактирования, загружаем данные
                _loadCurrentParameterData();
              }
            },
          )),
          Obx(() {
            final totalParams = _dataEntryController.parametersForEntry.length;
            final currentIndex = _dataEntryController.currentParameterIndex.value;
            if (totalParams == 0 || _isListViewMode.value) return const SizedBox.shrink();
            
            return Center(
              child: Padding(
                padding: const EdgeInsets.only(right: 16),
                child: Text(
                  '${currentIndex + 1} / $totalParams',
                  style: theme.textTheme.bodyMedium?.copyWith(
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
            );
          }),
        ],
      ),
      body: Obx(() {
        final parameters = _dataEntryController.parametersForEntry;
        final currentParameter = _dataEntryController.currentParameter;
        
        if (parameters.isEmpty) {
          return Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  Icons.inbox_outlined,
                  size: 64,
                  color: theme.colorScheme.onSurfaceVariant,
                ),
                const SizedBox(height: 16),
                Text(
                  'Нет активных параметров',
                  style: theme.textTheme.headlineSmall,
                ),
                const SizedBox(height: 8),
                Text(
                  'Включите параметры в настройках',
                  style: theme.textTheme.bodyMedium?.copyWith(
                    color: theme.colorScheme.onSurfaceVariant,
                  ),
                ),
              ],
            ),
          );
        }
        
        return Obx(() => _isListViewMode.value 
          ? _buildListView(parameters, context, theme)
          : _buildPageView(parameters, currentParameter, context, theme)
        );
      }),
    );
  }

  /// Строит режим редактирования с PageView
  Widget _buildPageView(List<Parameter> parameters, Parameter? currentParameter, BuildContext context, ThemeData theme) {
    if (currentParameter == null) {
      return const Center(
        child: CircularProgressIndicator(),
      );
    }
    
    return Column(
      children: [
        // Прогресс бар
        Container(
          margin: const EdgeInsets.all(16),
          child: LinearProgressIndicator(
            value: ((_dataEntryController.currentParameterIndex.value + 1) / parameters.length),
            backgroundColor: theme.colorScheme.surfaceVariant,
            valueColor: AlwaysStoppedAnimation<Color>(theme.colorScheme.primary),
            minHeight: 6,
          ),
        ),
        
        // Выбор даты
        _buildDatePicker(theme),
        
        // PageView с параметрами
        Expanded(
          child: PageView.builder(
            controller: _pageController,
            itemCount: parameters.length,
            onPageChanged: (index) {
              _saveCurrentParameter(); // Сохраняем текущий параметр
              _dataEntryController.currentParameterIndex.value = index;
            },
            itemBuilder: (context, index) {
              final parameter = parameters[index];
              return _buildParameterPage(parameter, context, theme);
            },
          ),
        ),
        
        // Кнопки навигации
        _buildNavigationButtons(theme),
      ],
    );
  }

  /// Строит быстрый просмотр с ListView
  Widget _buildListView(List<Parameter> parameters, BuildContext context, ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Заголовок с датой в стиле values.html
        Padding(
          padding: const EdgeInsets.fromLTRB(16, 24, 16, 16),
          child: Text(
            _formatDateForList(_dataEntryController.selectedDate.value),
            style: theme.textTheme.headlineSmall?.copyWith(
              fontWeight: FontWeight.bold,
              color: const Color(0xFF141613),
            ),
          ),
        ),
        
        // Список параметров
        Expanded(
          child: ListView.builder(
            padding: EdgeInsets.zero,
            itemCount: parameters.length,
            itemBuilder: (context, index) {
              final parameter = parameters[index];
              return _buildParameterListItem(parameter, index, theme);
            },
          ),
        ),
      ],
    );
  }
  
  /// Форматирует дату для заголовка списка в стиле "Monday, July 15"
  String _formatDateForList(DateTime date) {
    const weekdays = [
      'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
    ];
    const months = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ];
    
    final weekday = weekdays[date.weekday - 1];
    final month = months[date.month - 1];
    return '$weekday, $month ${date.day}';
  }

  /// Строит виджет выбора даты
  Widget _buildDatePicker(ThemeData theme) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.colorScheme.surfaceVariant,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        children: [
          Icon(Icons.calendar_today, color: theme.colorScheme.primary),
          const SizedBox(width: 12),
          Text('Дата:', style: theme.textTheme.titleMedium),
          const Spacer(),
          TextButton.icon(
            onPressed: () async {
              DateTime? pickedDate = await showDatePicker(
                context: context,
                initialDate: _dataEntryController.selectedDate.value,
                firstDate: DateTime(2020),
                lastDate: DateTime.now(),
              );
              if (pickedDate != null) {
                _dataEntryController.selectDate(pickedDate);
              }
            },
            icon: const Icon(Icons.edit),
            label: Text(
              DateFormat('dd.MM.yyyy').format(_dataEntryController.selectedDate.value),
            ),
          ),
        ],
      ),
    );
  }

  /// Строит кнопки навигации
  Widget _buildNavigationButtons(ThemeData theme) {
    return Container(
      padding: const EdgeInsets.all(16),
      child: Row(
        children: [
          Expanded(
            child: OutlinedButton.icon(
              onPressed: _dataEntryController.currentParameterIndex.value > 0
                  ? () {
                      _saveCurrentParameter();
                      _dataEntryController.previousParameter();
                    }
                  : null,
              icon: const Icon(Icons.arrow_back),
              label: const Text('Назад'),
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: ElevatedButton.icon(
              onPressed: _nextParameter,
              icon: Icon(_dataEntryController.isLastParameter ? Icons.save : Icons.arrow_forward),
              label: Text(_dataEntryController.isLastParameter ? 'Сохранить' : 'Далее'),
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// Строит элемент списка параметра (компактный вид)
  Widget _buildParameterListItem(Parameter parameter, int index, ThemeData theme) {
    final parameterId = parameter.id.toString();
    final value = _dataEntryController.enteredValues[parameterId]?.toString() ?? '';
    final comment = _dataEntryController.enteredComments[parameterId] ?? '';
    
    String displayValue = '';
    if (value.isNotEmpty) {
      switch (parameter.dataType) {
        case 'Number':
          displayValue = parameter.unit != null ? '$value ${parameter.unit}' : value;
          break;
        case 'Text':
          // Для текстовых полей показываем превью с отточием
          displayValue = value.length > 30 ? '${value.substring(0, 30)}...' : value;
          break;
        case 'Rating':
          displayValue = '$value/10';
          break;
        case 'YesNo':
          displayValue = value;
          break;
        default:
          displayValue = value;
      }
      
      // Добавляем комментарий, но тоже с ограничением
      if (comment.isNotEmpty) {
        final shortComment = comment.length > 20 ? '${comment.substring(0, 20)}...' : comment;
        
        if (parameter.dataType == 'Text') {
          // Для текстовых полей показываем как "Notes: комментарий"
          displayValue = 'Notes: $shortComment';
        } else {
          // Для остальных типов добавляем через точку
          displayValue += ' • $shortComment';
        }
      }
    } else {
      displayValue = 'Не заполнено';
    }
    
    return InkWell(
      onTap: () {
        // Находим правильный индекс параметра в списке parametersForEntry
        final correctIndex = _dataEntryController.parametersForEntry.indexWhere((p) => p.id == parameter.id);
        if (correctIndex != -1) {
          _isListViewMode.value = false;
          _dataEntryController.setInitialViewMode('edit');
          _dataEntryController.currentParameterIndex.value = correctIndex;
          
          // Принудительно переводим PageController на правильную страницу
          WidgetsBinding.instance.addPostFrameCallback((_) {
            if (_pageController.hasClients) {
              _pageController.animateToPage(
                correctIndex,
                duration: const Duration(milliseconds: 300),
                curve: Curves.easeInOut,
              );
            }
            _loadCurrentParameterData();
          });
        }
      },
      child: Container(
        margin: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
        padding: const EdgeInsets.all(16),
        decoration: const BoxDecoration(
          color: Colors.white,
        ),
        child: Row(
          children: [
            // Иконка параметра - точная копия из values.html
            Container(
              width: 48,
              height: 48,
              decoration: BoxDecoration(
                color: const Color(0xFFF2F3F1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(
                ParameterIcons.getIcon(parameter),
                size: 24,
                color: const Color(0xFF141613),
              ),
            ),
            const SizedBox(width: 16),
            
            // Название и значение
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    parameter.name,
                    style: theme.textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.w500,
                      color: const Color(0xFF141613),
                    ),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                  const SizedBox(height: 4),
                  Text(
                    displayValue,
                    style: theme.textTheme.bodySmall?.copyWith(
                      color: value.isEmpty ? Colors.grey.shade500 : const Color(0xFF757C6E),
                      fontWeight: FontWeight.normal,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// Строит страницу для конкретного параметра
  Widget _buildParameterPage(Parameter parameter, BuildContext context, ThemeData theme) {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          // Большая иконка и информация о параметре
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF2F3F1),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Column(
              children: [
                Container(
                  width: 80,
                  height: 80,
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Icon(
                    ParameterIcons.getIcon(parameter),
                    size: 40,
                    color: const Color(0xFF141613),
                  ),
                ),
                const SizedBox(height: 16),
                Text(
                  parameter.name,
                  style: theme.textTheme.headlineSmall?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                  textAlign: TextAlign.center,
                ),
                if (parameter.unit != null && parameter.unit!.isNotEmpty) ...[
                  const SizedBox(height: 4),
                  Text(
                    'Единицы: ${parameter.unit}',
                    style: theme.textTheme.bodyMedium?.copyWith(
                      color: theme.colorScheme.onSurfaceVariant,
                    ),
                  ),
                ],
                if (parameter.isPreset) ...[
                  const SizedBox(height: 8),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                    decoration: BoxDecoration(
                      color: theme.colorScheme.primaryContainer,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      'Пресет',
                      style: theme.textTheme.labelSmall?.copyWith(
                        color: theme.colorScheme.onPrimaryContainer,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                ],
              ],
            ),
          ),
          
          const SizedBox(height: 32),
          
          // Поле ввода в зависимости от типа
          _buildInputField(parameter, theme),
          
          const SizedBox(height: 24),
          
          // Поле комментария
          TextFormField(
            controller: _commentController,
            decoration: const InputDecoration(
              labelText: 'Комментарий (необязательно)',
              hintText: 'Добавьте заметку',
              border: OutlineInputBorder(),
            ),
            maxLines: 3,
            minLines: 1,
            onChanged: (value) {
              final parameterId = parameter.id.toString();
              _dataEntryController.updateEnteredComment(parameterId, value);
            },
          ),
          
          const Spacer(),
        ],
      ),
    );
  }

  /// Строит поле ввода в зависимости от типа параметра
  Widget _buildInputField(Parameter parameter, ThemeData theme) {
    switch (parameter.dataType) {
      case 'Number':
        return TextFormField(
          controller: _valueController,
          focusNode: _valueFocusNode,
          decoration: InputDecoration(
            labelText: 'Введите значение',
            hintText: parameter.unit != null 
                ? 'Например: 10 ${parameter.unit}'
                : 'Введите число',
            border: const OutlineInputBorder(),
            prefixIcon: Icon(ParameterIcons.getIcon(parameter)),
          ),
          keyboardType: TextInputType.number,
          maxLines: 3,
          minLines: 1,
          onChanged: (value) {
            final parameterId = parameter.id.toString();
            _dataEntryController.updateEnteredValue(parameterId, value);
          },
        );

      case 'Text':
        return TextFormField(
          controller: _valueController,
          focusNode: _valueFocusNode,
          decoration: InputDecoration(
            labelText: 'Введите текст',
            hintText: 'Введите текстовое значение',
            border: const OutlineInputBorder(),
            prefixIcon: Icon(ParameterIcons.getIcon(parameter)),
          ),
          maxLines: 5,
          minLines: 1,
          onChanged: (value) {
            final parameterId = parameter.id.toString();
            _dataEntryController.updateEnteredValue(parameterId, value);
          },
        );

      case 'Rating':
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Оценка: ${_ratingValue.round()}',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.w500,
              ),
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                border: Border.all(color: theme.colorScheme.outline),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text('1', style: theme.textTheme.bodyMedium),
                      Text('10', style: theme.textTheme.bodyMedium),
                    ],
                  ),
                  Slider(
                    value: _ratingValue,
                    min: 1.0,
                    max: 10.0,
                    divisions: 9,
                    label: _ratingValue.round().toString(),
                    onChanged: (value) {
                      setState(() {
                        _ratingValue = value;
                      });
                      final parameterId = parameter.id.toString();
                      _dataEntryController.updateEnteredValue(parameterId, value.round().toString());
                    },
                  ),
                ],
              ),
            ),
          ],
        );

      case 'YesNo':
        return Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            border: Border.all(color: theme.colorScheme.outline),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                parameter.name,
                style: theme.textTheme.titleMedium,
              ),
              Switch(
                value: _yesNoValue,
                onChanged: (value) {
                  setState(() {
                    _yesNoValue = value;
                  });
                  final parameterId = parameter.id.toString();
                  _dataEntryController.updateEnteredValue(parameterId, value ? 'Да' : 'Нет');
                },
              ),
            ],
          ),
        );

      default:
        return TextFormField(
          controller: _valueController,
          focusNode: _valueFocusNode,
          decoration: const InputDecoration(
            labelText: 'Значение',
            border: OutlineInputBorder(),
          ),
          onChanged: (value) {
            final parameterId = parameter.id.toString();
            _dataEntryController.updateEnteredValue(parameterId, value);
          },
        );
    }
  }
  
  TextInputType _getKeyboardType(String dataType) {
    switch (dataType.toLowerCase()) {
      case 'number':
      case 'rating':
        return TextInputType.number;
      case 'text':
        return TextInputType.text;
      default:
        return TextInputType.text;
    }
  }
}
</file>

<file path="lib/presentation/screens/home_screen.dart">
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../domain/controllers/home_controller.dart';
import '../../domain/controllers/data_entry_controller.dart';
import '../widgets/calendar_widget.dart';
import 'main_navigation_screen.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final HomeController controller = Get.find();
    final theme = Theme.of(context);
    
    return Scaffold(
      backgroundColor: theme.colorScheme.surface,
      appBar: AppBar(
        title: const Text('BioLogger'),
        centerTitle: true,
        elevation: 0,
        backgroundColor: theme.colorScheme.primary,
        foregroundColor: Colors.white,
      ),
      body: Column(
        children: [
          // Календарный виджет (без скроллинга)
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  // Календарный виджет
                  Expanded(
                    child: Obx(() => CalendarWidget(
                      selectedDate: controller.selectedDate.value,
                      filledDates: controller.filledDates.value,
                      onDateSelected: controller.selectDate,
                      onMonthChanged: controller.changeMonth,
                      displayMonth: controller.currentMonth.value,
                    )),
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // Компактная статистика дней подряд
                  _buildCompactStats(controller, theme),
                ],
              ),
            ),
          ),
          
          // Динамическая кнопка внизу
          _buildActionButton(context, controller, theme),
        ],
      ),
    );
  }

  /// Создает компактную статистику дней подряд
  Widget _buildCompactStats(HomeController controller, ThemeData theme) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 16),
      decoration: BoxDecoration(
        border: Border(
          top: BorderSide(color: Colors.grey.shade300, width: 1),
        ),
      ),
      child: Column(
        children: [
          // Заголовок
          Text(
            'Серии заполнений:',
            style: theme.textTheme.titleSmall?.copyWith(
              fontWeight: FontWeight.w600,
              color: theme.colorScheme.onSurface.withOpacity(0.8),
            ),
          ),
          const SizedBox(height: 12),
          
          // Счетчики
          Obx(() => Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: [
              // Дни подряд
              Column(
                children: [
                  Text(
                    '${controller.consecutiveDays.value}',
                    style: theme.textTheme.headlineLarge?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: const Color(0xFF87A96B), // Sage green
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    'Дней подряд',
                    style: theme.textTheme.labelSmall?.copyWith(
                      color: Colors.grey.shade600,
                    ),
                  ),
                ],
              ),
              
              // Дни в месяце
              Column(
                children: [
                  Text(
                    '${controller.monthlyFilledDays.value}',
                    style: theme.textTheme.headlineLarge?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: const Color(0xFF87A96B), // Sage green
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    'Дней в этом месяце',
                    style: theme.textTheme.labelSmall?.copyWith(
                      color: Colors.grey.shade600,
                    ),
                  ),
                ],
              ),
            ],
          )),
        ],
      ),
    );
  }

  /// Создает информацию о выбранной дате
  Widget _buildSelectedDateInfo(HomeController controller, ThemeData theme) {
    return Obx(() {
      final selectedDate = controller.selectedDate.value;
      final isToday = controller.isSelectedDateToday;
      final isFilled = controller.isSelectedDateFilled;
      final isInFuture = controller.isSelectedDateInFuture;
      
      String statusText;
      Color statusColor;
      IconData statusIcon;
      
      if (isInFuture) {
        statusText = 'Будущий день';
        statusColor = theme.colorScheme.onSurface.withOpacity(0.6);
        statusIcon = Icons.schedule;
      } else if (isFilled) {
        statusText = 'День заполнен';
        statusColor = Colors.green;
        statusIcon = Icons.check_circle;
      } else {
        statusText = 'Данные не введены';
        statusColor = theme.colorScheme.error;
        statusIcon = Icons.radio_button_unchecked;
      }
      
      return Card(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              Text(
                'Выбранный день',
                style: theme.textTheme.titleMedium?.copyWith(
                  color: theme.colorScheme.onSurface.withOpacity(0.7),
                ),
              ),
              const SizedBox(height: 8),
              
              // Дата
              Text(
                _formatDate(selectedDate),
                style: theme.textTheme.headlineSmall?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: theme.colorScheme.onSurface,
                ),
              ),
              
              if (isToday) ...[
                const SizedBox(height: 4),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                  decoration: BoxDecoration(
                    color: theme.colorScheme.primary.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(16),
                  ),
                  child: Text(
                    'Сегодня',
                    style: theme.textTheme.labelSmall?.copyWith(
                      color: theme.colorScheme.primary,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
              
              const SizedBox(height: 12),
              
              // Статус дня
              Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(
                    statusIcon,
                    color: statusColor,
                    size: 18,
                  ),
                  const SizedBox(width: 8),
                  Text(
                    statusText,
                    style: theme.textTheme.bodyMedium?.copyWith(
                      color: statusColor,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      );
    });
  }

  /// Создает динамическую кнопку действия
  Widget _buildActionButton(BuildContext context, HomeController controller, ThemeData theme) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.colorScheme.surface,
        border: Border(
          top: BorderSide(
            color: theme.colorScheme.outline.withOpacity(0.2),
            width: 1,
          ),
        ),
      ),
      child: SafeArea(
        child: Obx(() {
          final isEnabled = controller.isActionButtonEnabled;
          final buttonText = controller.actionButtonText;
          final isFilled = controller.isSelectedDateFilled;
          
          return ElevatedButton.icon(
            onPressed: isEnabled ? () => _onActionButtonPressed(context, controller) : null,
            icon: Icon(
              isFilled ? Icons.visibility : Icons.add_circle_outline,
              size: 20,
            ),
            label: Text(
              isFilled ? 'Посмотреть данные' : 'Записать данные',
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
            style: ElevatedButton.styleFrom(
              padding: const EdgeInsets.symmetric(vertical: 16),
              backgroundColor: isEnabled 
                  ? (isFilled ? theme.colorScheme.secondary : theme.colorScheme.primary)
                  : theme.colorScheme.onSurface.withOpacity(0.3),
              foregroundColor: isEnabled 
                  ? (isFilled ? theme.colorScheme.onSecondary : theme.colorScheme.onPrimary)
                  : theme.colorScheme.onSurface.withOpacity(0.6),
              disabledBackgroundColor: theme.colorScheme.onSurface.withOpacity(0.1),
              disabledForegroundColor: theme.colorScheme.onSurface.withOpacity(0.4),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
          );
        }),
      ),
    );
  }

  /// Обработка нажатия на кнопку действия
  void _onActionButtonPressed(BuildContext context, HomeController controller) {
    try {
      // Определяем режим на основе состояния дня
      final isFilled = controller.isSelectedDateFilled;
      final mode = isFilled ? 'list' : 'edit'; // Если заполнено - показываем список, иначе сразу редактирование
      
      // Устанавливаем режим в DataEntryController
      final dataEntryController = Get.find<DataEntryController>();
      dataEntryController.setInitialViewMode(mode);
      
      // Переключаемся на вкладку "Ввод" через NavigationController
      final navigationController = Get.find<NavigationController>();
      navigationController.goToDataEntry();
    } catch (e) {
      print('NavigationController не найден: $e');
    }
  }

  /// Форматирует дату для отображения
  String _formatDate(DateTime date) {
    const months = [
      'января', 'февраля', 'марта', 'апреля', 'мая', 'июня',
      'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'
    ];
    
    return '${date.day} ${months[date.month - 1]} ${date.year}';
  }
}
</file>

<file path="lib/main.dart">
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'presentation/screens/main_navigation_screen.dart';
import 'presentation/theme/app_theme.dart';
import 'data/repositories/daily_record_repository.dart';
import 'data/repositories/daily_record_repository_impl.dart';
import 'data/repositories/parameter_repository.dart';
import 'data/repositories/parameter_repository_impl.dart';
import 'domain/use_cases/export_data_use_case.dart';
import 'domain/use_cases/calculate_streak_use_case.dart';
import 'domain/controllers/daily_record_controller.dart';
import 'domain/controllers/parameter_controller.dart';
import 'domain/controllers/data_entry_controller.dart';
import 'domain/controllers/home_controller.dart';
import 'domain/services/preset_parameters_service.dart';

void main() async {
  // Обеспечиваем что Flutter готов к работе
  WidgetsFlutterBinding.ensureInitialized();
  
  // Инициализируем биндинги
  AppBindings appBindings = AppBindings();
  appBindings.dependencies();
  
  // Инициализируем пресет параметры
  await appBindings.initializePresetParameters();
  
  runApp(const MyApp());
}

class AppBindings extends Bindings {
  @override
  void dependencies() {
    // Repositories
    Get.lazyPut<DailyRecordRepository>(() => DailyRecordRepositoryImpl(), fenix: true);
    Get.lazyPut<ParameterRepository>(() => ParameterRepositoryImpl(), fenix: true);

    // Use Cases
    Get.lazyPut<ExportDataUseCase>(
      () => ExportDataUseCase(
        Get.find<DailyRecordRepository>(), 
        Get.find<ParameterRepository>(),
      ),
      fenix: true,
    );
    Get.lazyPut<CalculateStreakUseCase>(
      () => CalculateStreakUseCase(Get.find<DailyRecordRepository>()),
      fenix: true,
    );

    // Controllers
    Get.lazyPut<DailyRecordController>(
      () => DailyRecordController(
        Get.find<DailyRecordRepository>(),
        Get.find<ExportDataUseCase>(),
      ),
      fenix: true,
    );
    Get.lazyPut(() => ParameterController(Get.find<ParameterRepository>()), fenix: true);
    Get.lazyPut(() => DataEntryController(), fenix: true);
    Get.lazyPut<HomeController>(
      () => HomeController(Get.find<CalculateStreakUseCase>()),
      fenix: true,
    );
    
    // Services
    Get.lazyPut<PresetParametersService>(
      () => PresetParametersService(Get.find<ParameterRepository>()),
      fenix: true,
    );
  }
  
  /// Инициализируем пресет параметры при первом запуске
  Future<void> initializePresetParameters() async {
    try {
      print('AppBindings: Initializing preset parameters...');
      PresetParametersService presetService = Get.find<PresetParametersService>();
      await presetService.initializePresetIfNeeded();
      print('AppBindings: Preset parameters initialization completed');
    } catch (e) {
      print('AppBindings: Error initializing preset parameters: $e');
      // Не прерываем запуск приложения из-за ошибки пресетов
    }
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return GetMaterialApp(
      title: 'BioLogger - Трекер здоровья',
      theme: AppTheme.lightTheme,
      debugShowCheckedModeBanner: false,
      initialBinding: AppBindings(),
      home: const MainNavigationScreen(),
      // Настройка анимаций переходов по умолчанию
      defaultTransition: Transition.fadeIn,
      transitionDuration: const Duration(milliseconds: 300),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(widget.title),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text('You have pushed the button this many times:'),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ),
    );
  }
}
</file>

<file path="pubspec.yaml">
name: biologgs
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: ^3.7.2

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.8
  sqflite: ^2.0.0  # Используй последнюю версию, или укажи конкретную версию, если нужно
  path: ^1.8.0     # Пакет 'path' тоже нужен для работы с путями к файлам
  get: ^4.6.5
  intl: ^0.18.0
  path_provider: ^2.0.14
  share_plus: ^7.2.1
dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^5.0.0
  sqflite_common_ffi: ^2.0.0  # For testing database operations

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package
</file>

<file path="pubspec.lock">
# Generated by pub
# See https://dart.dev/tools/pub/glossary#lockfile
packages:
  async:
    dependency: transitive
    description:
      name: async
      sha256: "758e6d74e971c3e5aceb4110bfd6698efc7f501675bcfe0c775459a8140750eb"
      url: "https://pub.dev"
    source: hosted
    version: "2.13.0"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "8aab1771e1243a5063b8b0ff68042d67334e3feab9e95b9490f9a6ebf73b42ea"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: f71061c654a3380576a52b451dd5532377954cf9dbd272a78fc8479606670803
      url: "https://pub.dev"
    source: hosted
    version: "1.4.0"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: fddb70d9b5277016c77a80201021d40a2247104d9f4aa7bab7157b7e3f05b84b
      url: "https://pub.dev"
    source: hosted
    version: "1.1.2"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: "2f5709ae4d3d59dd8f7cd309b4e023046b57d8a6c82130785d2b0e5868084e76"
      url: "https://pub.dev"
    source: hosted
    version: "1.19.1"
  cross_file:
    dependency: transitive
    description:
      name: cross_file
      sha256: "7caf6a750a0c04effbb52a676dce9a4a592e10ad35c34d6d2d0e4811160d5670"
      url: "https://pub.dev"
    source: hosted
    version: "0.3.4+2"
  crypto:
    dependency: transitive
    description:
      name: crypto
      sha256: "1e445881f28f22d6140f181e07737b22f1e099a5e1ff94b0af2f9e4a463f4855"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.6"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: ba631d1c7f7bef6b729a622b7b752645a2d076dba9976925b8f25725a30e1ee6
      url: "https://pub.dev"
    source: hosted
    version: "1.0.8"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "5368f224a74523e8d2e7399ea1638b37aecfca824a3cc4dfdf77bf1fa905ac44"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.3"
  ffi:
    dependency: transitive
    description:
      name: ffi
      sha256: "289279317b4b16eb2bb7e271abccd4bf84ec9bdcbe999e278a94b804f5630418"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  file:
    dependency: transitive
    description:
      name: file
      sha256: a3b4f84adafef897088c160faf7dfffb7696046cb13ae90b508c2cbc95d3b8d4
      url: "https://pub.dev"
    source: hosted
    version: "7.0.1"
  fixnum:
    dependency: transitive
    description:
      name: fixnum
      sha256: b6dc7065e46c974bc7c5f143080a6764ec7a4be6da1285ececdc37be96de53be
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: "5398f14efa795ffb7a33e9b6a08798b26a180edac4ad7db3f231e40f82ce11e1"
      url: "https://pub.dev"
    source: hosted
    version: "5.0.0"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_web_plugins:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  get:
    dependency: "direct main"
    description:
      name: get
      sha256: c79eeb4339f1f3deffd9ec912f8a923834bec55f7b49c9e882b8fef2c139d425
      url: "https://pub.dev"
    source: hosted
    version: "4.7.2"
  intl:
    dependency: "direct main"
    description:
      name: intl
      sha256: "3bc132a9dbce73a7e4a21a17d06e1878839ffbf975568bc875c60537824b0c4d"
      url: "https://pub.dev"
    source: hosted
    version: "0.18.1"
  leak_tracker:
    dependency: transitive
    description:
      name: leak_tracker
      sha256: "6bb818ecbdffe216e81182c2f0714a2e62b593f4a4f13098713ff1685dfb6ab0"
      url: "https://pub.dev"
    source: hosted
    version: "10.0.9"
  leak_tracker_flutter_testing:
    dependency: transitive
    description:
      name: leak_tracker_flutter_testing
      sha256: f8b613e7e6a13ec79cfdc0e97638fddb3ab848452eff057653abd3edba760573
      url: "https://pub.dev"
    source: hosted
    version: "3.0.9"
  leak_tracker_testing:
    dependency: transitive
    description:
      name: leak_tracker_testing
      sha256: "6ba465d5d76e67ddf503e1161d1f4a6bc42306f9d66ca1e8f079a47290fb06d3"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.1"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: c35bb79562d980e9a453fc715854e1ed39e24e7d0297a880ef54e17f9874a9d7
      url: "https://pub.dev"
    source: hosted
    version: "5.1.1"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: dc58c723c3c24bf8d3e2d3ad3f2f9d7bd9cf43ec6feaa64181775e60190153f2
      url: "https://pub.dev"
    source: hosted
    version: "0.12.17"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: f7142bb1154231d7ea5f96bc7bde4bda2a0945d2806bb11670e30b850d56bdec
      url: "https://pub.dev"
    source: hosted
    version: "0.11.1"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: e3641ec5d63ebf0d9b41bd43201a66e3fc79a65db5f61fc181f04cd27aab950c
      url: "https://pub.dev"
    source: hosted
    version: "1.16.0"
  mime:
    dependency: transitive
    description:
      name: mime
      sha256: "801fd0b26f14a4a58ccb09d5892c3fbdeff209594300a542492cf13fba9d247a"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.6"
  path:
    dependency: "direct main"
    description:
      name: path
      sha256: "75cca69d1490965be98c73ceaea117e8a04dd21217b37b292c9ddbec0d955bc5"
      url: "https://pub.dev"
    source: hosted
    version: "1.9.1"
  path_provider:
    dependency: "direct main"
    description:
      name: path_provider
      sha256: "50c5dd5b6e1aaf6fb3a78b33f6aa3afca52bf903a8a5298f53101fdaee55bbcd"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.5"
  path_provider_android:
    dependency: transitive
    description:
      name: path_provider_android
      sha256: "0ca7359dad67fd7063cb2892ab0c0737b2daafd807cf1acecd62374c8fae6c12"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.16"
  path_provider_foundation:
    dependency: transitive
    description:
      name: path_provider_foundation
      sha256: "4843174df4d288f5e29185bd6e72a6fbdf5a4a4602717eed565497429f179942"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  path_provider_linux:
    dependency: transitive
    description:
      name: path_provider_linux
      sha256: f7a1fe3a634fe7734c8d3f2766ad746ae2a2884abe22e241a8b301bf5cac3279
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  path_provider_platform_interface:
    dependency: transitive
    description:
      name: path_provider_platform_interface
      sha256: "88f5779f72ba699763fa3a3b06aa4bf6de76c8e5de842cf6f29e2e06476c2334"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  path_provider_windows:
    dependency: transitive
    description:
      name: path_provider_windows
      sha256: bd6f00dbd873bfb70d0761682da2b3a2c2fccc2b9e84c495821639601d81afe7
      url: "https://pub.dev"
    source: hosted
    version: "2.3.0"
  platform:
    dependency: transitive
    description:
      name: platform
      sha256: "5d6b1b0036a5f331ebc77c850ebc8506cbc1e9416c27e59b439f917a902a4984"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.6"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.8"
  share_plus:
    dependency: "direct main"
    description:
      name: share_plus
      sha256: "3ef39599b00059db0990ca2e30fca0a29d8b37aae924d60063f8e0184cf20900"
      url: "https://pub.dev"
    source: hosted
    version: "7.2.2"
  share_plus_platform_interface:
    dependency: transitive
    description:
      name: share_plus_platform_interface
      sha256: "251eb156a8b5fa9ce033747d73535bf53911071f8d3b6f4f0b578505ce0d4496"
      url: "https://pub.dev"
    source: hosted
    version: "3.4.0"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "254ee5351d6cb365c859e20ee823c3bb479bf4a293c22d17a9f1bf144ce86f7c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.1"
  sprintf:
    dependency: transitive
    description:
      name: sprintf
      sha256: "1fc9ffe69d4df602376b52949af107d8f5703b77cda567c4d7d86a0693120f23"
      url: "https://pub.dev"
    source: hosted
    version: "7.0.0"
  sqflite:
    dependency: "direct main"
    description:
      name: sqflite
      sha256: e2297b1da52f127bc7a3da11439985d9b536f75070f3325e62ada69a5c585d03
      url: "https://pub.dev"
    source: hosted
    version: "2.4.2"
  sqflite_android:
    dependency: transitive
    description:
      name: sqflite_android
      sha256: "2b3070c5fa881839f8b402ee4a39c1b4d561704d4ebbbcfb808a119bc2a1701b"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  sqflite_common:
    dependency: transitive
    description:
      name: sqflite_common
      sha256: "84731e8bfd8303a3389903e01fb2141b6e59b5973cacbb0929021df08dddbe8b"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.5"
  sqflite_common_ffi:
    dependency: "direct dev"
    description:
      name: sqflite_common_ffi
      sha256: "9faa2fedc5385ef238ce772589f7718c24cdddd27419b609bb9c6f703ea27988"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.6"
  sqflite_darwin:
    dependency: transitive
    description:
      name: sqflite_darwin
      sha256: "279832e5cde3fe99e8571879498c9211f3ca6391b0d818df4e17d9fff5c6ccb3"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.2"
  sqflite_platform_interface:
    dependency: transitive
    description:
      name: sqflite_platform_interface
      sha256: "8dd4515c7bdcae0a785b0062859336de775e8c65db81ae33dd5445f35be61920"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.0"
  sqlite3:
    dependency: transitive
    description:
      name: sqlite3
      sha256: f393d92c71bdcc118d6203d07c991b9be0f84b1a6f89dd4f7eed348131329924
      url: "https://pub.dev"
    source: hosted
    version: "2.9.0"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: "8b27215b45d22309b5cddda1aa2b19bdfec9df0e765f2de506401c071d38d1b1"
      url: "https://pub.dev"
    source: hosted
    version: "1.12.1"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: "969e04c80b8bcdf826f8f16579c7b14d780458bd97f56d107d3950fdbeef059d"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "921cd31725b72fe181906c6a94d987c78e3b98c2e205b397ea399d4054872b43"
      url: "https://pub.dev"
    source: hosted
    version: "1.4.1"
  synchronized:
    dependency: transitive
    description:
      name: synchronized
      sha256: "0669c70faae6270521ee4f05bffd2919892d42d1276e6c495be80174b6bc0ef6"
      url: "https://pub.dev"
    source: hosted
    version: "3.3.1"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: "7f554798625ea768a7518313e58f83891c7f5024f88e46e7182a4558850a4b8e"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.2"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: fb31f383e2ee25fbbfe06b40fe21e1e458d14080e3c67e7ba0acfde4df4e0bbd
      url: "https://pub.dev"
    source: hosted
    version: "0.7.4"
  typed_data:
    dependency: transitive
    description:
      name: typed_data
      sha256: f9049c039ebfeb4cf7a7104a675823cd72dba8297f264b6637062516699fa006
      url: "https://pub.dev"
    source: hosted
    version: "1.4.0"
  url_launcher_linux:
    dependency: transitive
    description:
      name: url_launcher_linux
      sha256: "4e9ba368772369e3e08f231d2301b4ef72b9ff87c31192ef471b380ef29a4935"
      url: "https://pub.dev"
    source: hosted
    version: "3.2.1"
  url_launcher_platform_interface:
    dependency: transitive
    description:
      name: url_launcher_platform_interface
      sha256: "552f8a1e663569be95a8190206a38187b531910283c3e982193e4f2733f01029"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.2"
  url_launcher_web:
    dependency: transitive
    description:
      name: url_launcher_web
      sha256: "3ba963161bd0fe395917ba881d320b9c4f6dd3c4a233da62ab18a5025c85f1e9"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.0"
  url_launcher_windows:
    dependency: transitive
    description:
      name: url_launcher_windows
      sha256: "3284b6d2ac454cf34f114e1d3319866fdd1e19cdc329999057e44ffe936cfa77"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.4"
  uuid:
    dependency: transitive
    description:
      name: uuid
      sha256: a5be9ef6618a7ac1e964353ef476418026db906c4facdedaa299b7a2e71690ff
      url: "https://pub.dev"
    source: hosted
    version: "4.5.1"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  vm_service:
    dependency: transitive
    description:
      name: vm_service
      sha256: ddfa8d30d89985b96407efce8acbdd124701f96741f2d981ca860662f1c0dc02
      url: "https://pub.dev"
    source: hosted
    version: "15.0.0"
  web:
    dependency: transitive
    description:
      name: web
      sha256: "868d88a33d8a87b18ffc05f9f030ba328ffefba92d6c127917a2ba740f9cfe4a"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  win32:
    dependency: transitive
    description:
      name: win32
      sha256: dc6ecaa00a7c708e5b4d10ee7bec8c270e9276dfcab1783f57e9962d7884305f
      url: "https://pub.dev"
    source: hosted
    version: "5.12.0"
  xdg_directories:
    dependency: transitive
    description:
      name: xdg_directories
      sha256: "7a3f37b05d989967cdddcbb571f1ea834867ae2faa29725fd085180e0883aa15"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
sdks:
  dart: ">=3.7.2 <4.0.0"
  flutter: ">=3.27.0"
</file>

<file path="README.md">
# BioLogger 🌿

**A Flutter application for easily tracking personal metrics, life quality data, and exporting it for analysis.**

Define what matters to you, log your daily progress, and gain insights from your data.

<!-- TODO: Add a screenshot or GIF demonstrating the app's main screens (e.g., parameter list, data entry, home screen) -->
<!-- You can embed images using Markdown: ![Alt Text](path/to/image.png) -->

## ✨ Key Features (Current)

*   **📝 Custom Parameter Management:**
    *   Create parameters you want to track (e.g., Sleep Hours, Mood, Water Intake, Workout Duration).
    *   Define parameter details: Name, Data Type (Number, Text, Rating, Yes/No, Time, Date), Unit of Measurement.
    *   View, **Edit**, and **Delete** your parameters easily through a dedicated management screen.
*   **📅 Daily Data Logging:**
    *   Simple, sequential interface for entering values for each of your defined parameters daily.
*   **📤 Export & Share Data:**
    *   Generate a comprehensive CSV file containing all your parameters and daily entries.
    *   **Share the CSV file seamlessly** using the native system share dialog – send it to your messenger, email, cloud storage, or any compatible app without needing extra permissions.
*   **📱 Local & Private Storage:**
    *   All your data (parameters and daily records) is stored securely **on your device only** using an SQLite database.

## 🚀 Project Status

**✅ MVP (Minimum Viable Product) Complete!**

The core functionalities (parameter management, basic data entry, local storage, export/share) are implemented and working.

**🚧 Actively working on Post-MVP enhancements** focused on improving User Experience (UX) and adding more input flexibility.

## 🏗️ Architecture & Tech Stack

*   **Framework:** Flutter
*   **State Management:** GetX
*   **Database:** SQLite (via `sqflite` package)
*   **Architecture:** Layered Architecture (Presentation, Domain, Data)
    *   **Presentation:** UI Screens and GetX Controllers interacting with the Domain layer.
    *   **Domain:** Business logic, Use Cases (structure defined), Controllers.
    *   **Data:** Repositories (interfaces & implementations), DAOs (Data Access Objects), Database Helper (managing DB connection, creation, and **migrations**).
*   **Sharing:** `share_plus`
*   **Date Formatting:** `intl`
*   **File Paths:** `path_provider`

##  roadmap

### ⏳ Next Steps (Immediate Focus: Enhancing Data Entry)

*   **Improved Data Entry Screen UI/UX:** Make the data input process more intuitive and visually appealing.
*   **Dynamic Input Widgets:** Display appropriate input fields based on the parameter's data type:
    *   `Number`: Numeric input field (potentially with stepper +/- buttons).
    *   `Text`: Standard text input field.
    *   `Rating`: Interactive rating scale (e.g., 1-10 slider, tappable stars/emojis).
    *   `Yes/No`: Switch or Toggle Buttons.
    *   `Time`: Time picker dialog.
    *   `Date`: Date picker dialog.
*   **(Optional)** **Parameter Presets:** Allow users to add predefined sets of common parameters (e.g., "Wellness Basics", "Fitness Tracking") for a quicker start.

### 📅 Future Plans (Longer Term)

*   **Calendar View:** Navigate and view data entries visually on a calendar.
*   **Reminders:** Set reminders to log daily data.
*   **In-App Analytics & Visualization:** Basic charts and trends directly within the app.
*   **Improved Design:** Overall UI polish, potential theming.
*   **Data Import:** Import data from CSV or other formats.
*   **Cloud Sync & Backup (Optional):** Securely back up and sync data across devices.
*   **Advanced Features:** Voice input, deeper analytics, potential integrations.

## ⚙️ Installation and Setup

1.  Ensure you have [Flutter](https://flutter.dev/docs/get-started/install) installed (check with `flutter doctor`).
2.  Clone the repository:
    ```bash
    git clone https://github.com/elsquaddie/BioLogger.git
    ```
3.  Navigate to the project directory:
    ```bash
    cd BioLog
    ```
4.  Install dependencies:
    ```bash
    flutter pub get
    ```
5.  Run the application on an emulator or connected device:
    ```bash
    flutter run
    ```
</file>

</files>
